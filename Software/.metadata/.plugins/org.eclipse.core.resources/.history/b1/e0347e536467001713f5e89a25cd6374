/* Lab 2 for ECE224
 * Group 6
 * Richard Shi and Fanzhe Meng
 */

/*=========================================================================*/
/*  Includes                                                               */
/*=========================================================================*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#include <system.h>
#include <sys/alt_alarm.h>
#include <io.h>

//#include "fatfs.h"
//#include "diskio.h"

#include "ff.h"
#include "monitor.h"
#include "uart.h"

#include "audioplayer.h"

//#include "alt_types.h"
//
//#include <altera_up_avalon_audio.h>
//#include <altera_up_avalon_audio_and_video_config.h>

/*=========================================================================*/
/*  Globals                                                                */
/*=========================================================================*/

PlayerState pstate = NOT_PLAYING;
ButtonState bstate = NONE;
bool stateChanged = false;


/*=========================================================================*/
/*  Functions                                                              */
/*=========================================================================*/

static void buttonPressed(void* context, alt_u32 id) {
	//xprintf("Testing ISR\n");
	unsigned int n = IORD(BUTTON_PIO_BASE, 0);

    // identify which button is pressed
	switch (n) {
        case 0b1110: //0xe - Forward button
            bstate = FORWARD;
            break;
        case 0b1101: //0xd - Play Button
        	bstate = PLAY_PAUSE;
            break;
        case 0b1011: //0xb - Stop Button
        	bstate = STOP;
            break;
        case 0b0111: //0x7 - Reverse Button
        	bstate = BACKWARD;
            break;
        case 0b1111: //0xf - No button pressed	//TODO: ********************************************************** NOT SURE IF WE SHOULD KEEP THIS
        	bstate = NONE;
        	break;
        default:
        	// Do nothing if invalid button combination
        	break;
	}

    stateChanged = true;     			// indicate the state has changed
	IOWR(BUTTON_PIO_BASE, 3, 0x0);     	// clear button ISR
}


int main(int argc, char* argv[]){
	// Initializations
	FATFS disk;


	FIL songFile;
    FRESULT result;


    alt_up_audio_dev *audio_dev;
    uint32_t bytesToRead, bytesBeenRead;
    long totalBytesToRead;
    uint8_t l_buf[2], r_buf[2];

	// Load songs from root directory on disk
	xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t) DRIVE));	//di 0
	putRc(f_mount((uint8_t) DRIVE, &disk));								//fi 0
	putRc(loadSongs(""));

	// Start off with displaying the first song
	printCurrentTrack();

	//Clear previous interrupts if any and register ISR
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	alt_irq_register(BUTTON_PIO_IRQ, (void*) 0, buttonPressed);
	IOWR(BUTTON_PIO_BASE, 2, 0xFF);

	// Main run loop
	while(true){
		if(stateChanged){
			// Call corresponding state change code?




		} else {

		}
	}
}

/*
int main() {
	// Initializations
	FATFS disk;
	FIL songFile;
    FRESULT result;
    alt_up_audio_dev *audio_dev;
    uint32_t bytesToRead, bytesBeenRead;
    long totalBytesToRead;
    uint8_t l_buf[2], r_buf[2];

	xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t) DRIVE));	//di 0
	putRc(f_mount((uint8_t) DRIVE, &disk));								//fi 0
	putRc(loadSongsInCurrentDir());

	//Clear previous interrupts if any and register ISR
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	alt_irq_register(BUTTON_PIO_IRQ, (void*) 0, buttonPressed);
	IOWR(BUTTON_PIO_BASE, 2, 0xFF);
    
    init();
    // open the file
    result = f_open(&songFile, songs[currentTrack].filename, SONGEFILE_OPEN_MODE);
    if (result != FR_OK) {  // cannot open song file
        putRc(result);
        return 1;
    }
    
    // open audio device
    audio_dev = alt_up_audio_open_dev("/dev/Audio");
    if (audio_dev == NULL)
        alt_printf("Error: could not open audio device \n");
    else
        alt_printf("Opened audio device \n");
    
    totalBytesToRead = songs[currentTrack].size;
    
	// Main run loop
	while(1) {
        while (!stateChanged) {
            // do not play when pstate == NOT_PLAYING
            if (pstate == NOT_PLAYING) continue;
            // playing current track otherwise
            while (totalBytesToRead > 0) {
                if (totalBytesToRead >= BUFFER_SIZE) {
                    bytesToRead = BUFFER_SIZE;
                    totalBytesToRead -= BUFFER_SIZE;
                } else {
                    bytesToRead = totalBytesToRead;
                    totalBytesToRead = 0;
                }
                
                result = f_read(&songFile, Buff, bytesToRead, &bytesBeenRead);
                if (result != FR_OK) {  // cannot read bytes
                    putRc(result);
                    return 1;
                }
                if (bytesBeenRead == 0) { // bytes been read is 0, should not happen
                    return 1;
                }
                
                // write buffers to audio interface 
                uint8_t *cursor;
                for(cursor = Buff; cursor < Buff + BUFFER_SIZE; cursor += 4){
                    l_buf[0] = cursor[0];
                    l_buf[1] = cursor[1];
                    r_buf[0] = cursor[2];
                    r_buf[1] = cursor[3];
                    
                    alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
                    alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
                }
            }
        }
        
		switch(bstate){
            case PLAY_PAUSE:
                if (pstate == PLAYING) pstate = NOT_PLAYING;
                else pstate = PLAYING;
                break;
            case STOP:
                // move internal pointer to very beginning
                result = f_lseek(&songFile, 0);
                if (result != FR_OK) {
                    putRc(result);
                    return 1;
                }
                // set pstate to NOT_PLAYING
                pstate = NOT_PLAYING;
                break;
            case BACKWARD:
                if (pstate == NOT_PLAYING) { 
                    prevSong();
                    // open next song file
                    result = f_open(&songFile, songs[currentTrack].filename, SONGEFILE_OPEN_MODE);
                    if (result != FR_OK) {
                        putRc(result);
                        return 1;
                    }
                    totalBytesToRead = songs[currentTrack].size;
                }
                else {} // pstate == PLAYING: reverse while button held
                break;
            case FORWARD:
                if (pstate == NOT_PLAYING) { 
                    nextSong();
                    // open next song file
                    result = f_open(&songFile, songs[currentTrack].filename, SONGEFILE_OPEN_MODE);
                    if (result != FR_OK) {
                        putRc(result);
                        return 1;
                    }
                    totalBytesToRead = songs[currentTrack].size;
                }
                else {} // pstate == PLAYING: double speed while button held
                break;
		}
        stateChanged = 0;
	}
}
*/
