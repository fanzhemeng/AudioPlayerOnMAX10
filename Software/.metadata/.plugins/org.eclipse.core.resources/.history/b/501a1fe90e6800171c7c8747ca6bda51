/* Lab 2 for ECE224
 * Group 6
 * Richard Shi and Fanzhe Meng
 *
 * Audio Player Module
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#include "alt_types.h"
#include <altera_up_avalon_audio.h>
#include <altera_up_avalon_audio_and_video_config.h>

#include "fatfs.h"
#include "diskio.h"
#include "monitor.h"

#include "audioplayer.h"

// Defines
#define SONGFILE_OPEN_MODE 1
#define BUFFER_SIZE 32

// Globals
static uint8_t Buff[8192] __attribute__ ((aligned(4)));  /* Working buffer */


void pauseSong(void){
	xprintf("Pausing song");
	while(stateChanged){
		switch(bstate){
		case FORWARD:
			break;
		case PLAY_PAUSE:
			stateChanged = false;
			break;
		case STOP:
			break;

		case BACKWARD:
			break;

		default:
			break;
		}
	}
}


int playSong(char *songFilename, unsigned long size){
	xprintf("I'm playing %s with a size of %d\n", songFilename, size);
	FIL songFile;
	alt_up_audio_dev *audio_dev;

	uint32_t bytesToRead, bytesBeenRead;
	long totalBytesToRead;
	uint8_t l_buf[2], r_buf[2];

	//Song speed multiplier
	int multiplier = 1;

	// Open Song file
    FRESULT result = f_open(&songFile, songFilename, SONGFILE_OPEN_MODE);
	if(result != FR_OK){
		putRc(result);
		return 1;
	}

    // open audio device
    audio_dev = alt_up_audio_open_dev("/dev/Audio");
    if (audio_dev == NULL){
        xprintf("Error: could not open audio device \n");
    } else {
    	xprintf("Opened audio device \n");
    }

    // Loop for song playing
    totalBytesToRead = size;
    while (totalBytesToRead > 0) {
		if (totalBytesToRead >= BUFFER_SIZE) {
			bytesToRead = BUFFER_SIZE;
			totalBytesToRead -= BUFFER_SIZE;
		} else {
			bytesToRead = totalBytesToRead;
			totalBytesToRead = 0;
		}

		result = f_read(&songFile, Buff, bytesToRead, &bytesBeenRead);
		if (result != FR_OK) {  // cannot read bytes
			putRc(result);
			return 1;
		}
		if (bytesBeenRead == 0) { // bytes been read is 0, should not happen
			return 1;
		}

		//TODO: Read state of buttons and change behavior based on them
		// If bstate is forward:











		// write buffers to audio interface
		uint8_t *cursor;
		for(cursor = Buff; cursor < Buff + BUFFER_SIZE; cursor += 4 * multiplier){
			// Write to left channel buffer
			l_buf[0] = cursor[0];
			l_buf[1] = cursor[1];

			// Write to right channel buffer
			r_buf[0] = cursor[2];
			r_buf[1] = cursor[3];

			// Write completely to
			alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
			alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
		}
    }

    f_close(&songFile);
    return 0;
}


