
led_demo.elf:     file format elf32-littlenios2
led_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006a00 memsz 0x00006a00 flags r-x
    LOAD off    0x00007a20 vaddr 0x00806a20 paddr 0x008076a4 align 2**12
         filesz 0x00000c84 memsz 0x00000c84 flags rw-
    LOAD off    0x00009328 vaddr 0x00808328 paddr 0x00808328 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000064c4  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000318  00806708  00806708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000c84  00806a20  008076a4  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00808328  00808328  00009328  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  0080847c  0080847c  000086a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000086a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ae8  00000000  00000000  000086c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000175b3  00000000  00000000  000091b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000641b  00000000  00000000  00020763  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007241  00000000  00000000  00026b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017c0  00000000  00000000  0002ddc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c09  00000000  00000000  0002f580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004730  00000000  00000000  00032189  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000368bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d8  00000000  00000000  00036920  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000397ea  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000397ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000397f9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000397fa  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000397fb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000397ff  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00039803  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00039807  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00039812  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003981d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00039828  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  00039833  2**0
                  CONTENTS, READONLY
 29 .jdi          00004244  00000000  00000000  00039850  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ff91  00000000  00000000  0003da94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00806708 l    d  .rodata	00000000 .rodata
00806a20 l    d  .rwdata	00000000 .rwdata
00808328 l    d  .bss	00000000 .bss
0080847c l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../led_demo_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00806a20 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801dc4 l     F .text	00000008 __fp_lock
00801dcc l     F .text	00000008 __fp_unlock
00801de0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00802e30 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00802f5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080307c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008030a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008031a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080329c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803380 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080355c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080768c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
008037b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803900 l     F .text	00000038 alt_dev_reg
008073f4 l     O .rwdata	0000002c jtag_uart_0
00807420 l     O .rwdata	00000120 lcd_display
00807540 l     O .rwdata	000000c4 uart
00807604 l     O .rwdata	00000030 audio_i2c_config
00807634 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00807690 l     O .rwdata	00000004 colstart
00803c28 l     F .text	000000b4 lcd_write_command
00803cdc l     F .text	000000d4 lcd_write_data
00803db0 l     F .text	000000cc lcd_clear_screen
00803e7c l     F .text	000001e8 lcd_repaint_screen
00804064 l     F .text	000000c8 lcd_scroll_up
0080412c l     F .text	000002a0 lcd_handle_escape
008048b4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00804ca8 l     F .text	0000009c altera_avalon_uart_irq
00804d44 l     F .text	000000e0 altera_avalon_uart_rxirq
00804e24 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00804fbc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008051e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00805568 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00805744 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00805a2c l     F .text	00000050 alt_get_errno
00805a7c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080689d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00808350 g     O .bss	00000004 alt_instruction_exception_handler
00802d24 g     F .text	00000054 _isatty_r
008034a4 g     F .text	00000078 alt_main
008002e8 g     F .text	000000a8 _puts_r
0080837c g     O .bss	00000100 alt_irq
00802d78 g     F .text	0000005c _lseek_r
008076a4 g       *ABS*	00000000 __flash_rwdata_start
0080847c g       *ABS*	00000000 __alt_heap_start
00802ab4 g     F .text	0000005c __sseek
00802114 g     F .text	00000010 __sinit
00801f7c g     F .text	00000068 __sfmoreglue
0080353c g     F .text	00000020 __malloc_unlock
008012c4 g     F .text	0000015c memmove
008020fc g     F .text	00000018 _cleanup
00805e6c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802ccc g     F .text	00000058 _fstat_r
00808334 g     O .bss	00000004 errno
00802a30 g     F .text	00000008 __seofread
0080833c g     O .bss	00000004 alt_argv
0080f664 g       *ABS*	00000000 _gp
00805e3c g     F .text	00000030 usleep
00807274 g     O .rwdata	00000180 alt_fd_list
00805fe4 g     F .text	00000090 alt_find_dev
0080118c g     F .text	00000138 memcpy
00801dd4 g     F .text	0000000c _cleanup_r
00805804 g     F .text	00000078 alt_io_redirect
00806708 g       *ABS*	00000000 __DTOR_END__
00800390 g     F .text	00000014 puts
008062c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00803ab0 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00802f4c g     F .text	00000008 .hidden __udivsi3
008031f8 g     F .text	000000a4 isatty
0080623c g     F .text	0000008c alt_icache_flush
00808330 g     O .bss	00000004 __malloc_top_pad
0080043c g     F .text	000004c0 __sfvwrite_r
00801988 g     F .text	00000054 _sbrk_r
00802dd4 g     F .text	0000005c _read_r
00807684 g     O .rwdata	00000004 alt_max_fd
00802bc8 g     F .text	000000f0 _fclose_r
00801d94 g     F .text	00000030 fflush
0080832c g     O .bss	00000004 __malloc_max_sbrked_mem
0080587c g     F .text	000001b0 alt_irq_register
008033d0 g     F .text	000000d4 lseek
00807664 g     O .rwdata	00000004 _global_impure_ptr
00801420 g     F .text	00000568 _realloc_r
0080847c g       *ABS*	00000000 __bss_end
00805d38 g     F .text	00000104 alt_tick
00804c08 g     F .text	000000a0 altera_avalon_uart_init
00802134 g     F .text	00000018 __fp_lock_all
00805ca0 g     F .text	00000098 alt_alarm_stop
00808344 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080724c g     O .rwdata	00000028 alt_dev_null
00805524 g     F .text	00000044 alt_dcache_flush_all
008076a4 g       *ABS*	00000000 __ram_rwdata_end
0080767c g     O .rwdata	00000008 alt_dev_list
00803808 g     F .text	000000f8 write
00806a20 g       *ABS*	00000000 __ram_rodata_end
008030f8 g     F .text	000000b0 fstat
00802f54 g     F .text	00000008 .hidden __umodsi3
0080847c g       *ABS*	00000000 end
008043cc g     F .text	000004e8 altera_avalon_lcd_16207_write
00805238 g     F .text	000001ac altera_avalon_uart_write
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00806708 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804b58 g     F .text	00000060 altera_avalon_uart_write_fd
00804bb8 g     F .text	00000050 altera_avalon_uart_close_fd
00803b94 g     F .text	00000094 altera_avalon_jtag_uart_write
00802124 g     F .text	00000004 __sfp_lock_acquire
008010a4 g     F .text	000000e8 memchr
00802288 g     F .text	000002f0 _free_r
00806540 g     F .text	00000194 __call_exitprocs
0080766c g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00808348 g     O .bss	00000004 _alt_tick_rate
0080834c g     O .bss	00000004 _alt_nticks
008035ac g     F .text	000000fc read
0080396c g     F .text	00000084 alt_sys_init
0080642c g     F .text	00000114 __register_exitproc
00806a20 g       *ABS*	00000000 __ram_rwdata_start
00806708 g       *ABS*	00000000 __ram_rodata_start
00808354 g     O .bss	00000028 __malloc_current_mallinfo
008039f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00806188 g     F .text	000000b4 alt_get_fd
00805e8c g     F .text	00000158 alt_busy_sleep
00802b74 g     F .text	00000054 _close_r
008063b0 g     F .text	0000007c memcmp
0080847c g       *ABS*	00000000 __alt_stack_base
008019dc g     F .text	00000154 __swsetup_r
00801fe4 g     F .text	00000118 __sfp
00806e44 g     O .rwdata	00000408 __malloc_av_
00802130 g     F .text	00000004 __sinit_lock_release
008029dc g     F .text	00000054 __sread
00806074 g     F .text	00000114 alt_find_file
008055b8 g     F .text	000000a4 alt_dev_llist_insert
0080351c g     F .text	00000020 __malloc_lock
00803708 g     F .text	000000b0 sbrk
00801d38 g     F .text	0000005c _fflush_r
00808328 g       *ABS*	00000000 __bss_start
008028b8 g     F .text	00000124 memset
00800290 g     F .text	00000058 main
00808340 g     O .bss	00000004 alt_envp
00808328 g     O .bss	00000004 __malloc_max_total_mem
00803a50 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00804960 g     F .text	00000138 altera_avalon_lcd_16207_init
00802b10 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802cb8 g     F .text	00000014 fclose
008008fc g     F .text	000007a8 _malloc_r
00807688 g     O .rwdata	00000004 alt_errno
00802578 g     F .text	000000c4 _fwalk
00802e9c g     F .text	00000054 .hidden __divsi3
00802164 g     F .text	00000124 _malloc_trim_r
00806708 g       *ABS*	00000000 __CTOR_END__
00806708 g       *ABS*	00000000 __flash_rodata_start
00806708 g       *ABS*	00000000 __DTOR_LIST__
00803938 g     F .text	00000034 alt_irq_init
008036a8 g     F .text	00000060 alt_release_fd
00806364 g     F .text	00000014 atexit
00802b18 g     F .text	0000005c _write_r
00807668 g     O .rwdata	00000004 _impure_ptr
00808338 g     O .bss	00000004 alt_argc
00801b30 g     F .text	00000208 __sflush_r
008056b8 g     F .text	0000005c _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080214c g     F .text	00000018 __fp_unlock_all
00804a98 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00807674 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008076a4 g       *ABS*	00000000 _edata
00804af8 g     F .text	00000060 altera_avalon_uart_read_fd
0080847c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00802a38 g     F .text	0000007c __swrite
00807670 g     O .rwdata	00000004 __malloc_trim_threshold
00806378 g     F .text	00000038 exit
0080263c g     F .text	000000c4 _fwalk_reent
00802ef0 g     F .text	0000005c .hidden __modsi3
008076a0 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00802128 g     F .text	00000004 __sfp_lock_release
0080679c g     O .rodata	00000101 _ctype_
00804f68 g     F .text	00000054 altera_avalon_uart_close
008066d4 g     F .text	00000034 _exit
008053e4 g     F .text	00000140 alt_alarm_start
00802700 g     F .text	000001b8 __smakebuf_r
008003a4 g     F .text	00000098 strlen
00805b48 g     F .text	00000158 open
00805714 g     F .text	00000030 alt_icache_flush_all
00807694 g     O .rwdata	00000004 alt_priority_mask
0080500c g     F .text	000001dc altera_avalon_uart_read
00807698 g     O .rwdata	00000008 alt_alarm_list
0080565c g     F .text	0000005c _do_ctors
00802fac g     F .text	000000d0 close
00803300 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0080212c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10a0df04 	addi	r2,r2,-31876
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10a0df04 	addi	r2,r2,-31876
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a33b17 	ldw	r2,-29460(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a33b17 	ldw	r2,-29460(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6bd9914 	ori	gp,gp,63076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10a0ca14 	ori	r2,r2,33576

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18e11f14 	ori	r3,r3,33916

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08033000 	call	803300 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08034a40 	call	8034a4 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
  800290:	defffc04 	addi	sp,sp,-16
  800294:	dfc00315 	stw	ra,12(sp)
  800298:	df000215 	stw	fp,8(sp)
  80029c:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
  8002a0:	01002034 	movhi	r4,128
  8002a4:	2119c204 	addi	r4,r4,26376
  8002a8:	08003900 	call	800390 <puts>

  while (1) {
	  unsigned int buttons = IORD(BUTTON_PIO_BASE, 0);
  8002ac:	00804034 	movhi	r2,256
  8002b0:	10844804 	addi	r2,r2,4384
  8002b4:	10800037 	ldwio	r2,0(r2)
  8002b8:	e0bffe15 	stw	r2,-8(fp)
	  buttons = buttons ^ 0xf;
  8002bc:	e0bffe17 	ldw	r2,-8(fp)
  8002c0:	108003dc 	xori	r2,r2,15
  8002c4:	e0bffe15 	stw	r2,-8(fp)
	  unsigned int leds = 0xf & buttons;
  8002c8:	e0bffe17 	ldw	r2,-8(fp)
  8002cc:	108003cc 	andi	r2,r2,15
  8002d0:	e0bfff15 	stw	r2,-4(fp)
	  IOWR(LED_PIO_BASE, 0, leds);
  8002d4:	e0ffff17 	ldw	r3,-4(fp)
  8002d8:	00804034 	movhi	r2,256
  8002dc:	10844c04 	addi	r2,r2,4400
  8002e0:	10c00035 	stwio	r3,0(r2)
  }
  8002e4:	003ff106 	br	8002ac <__alt_data_end+0xff8002ac>

008002e8 <_puts_r>:
  8002e8:	defff604 	addi	sp,sp,-40
  8002ec:	dc000715 	stw	r16,28(sp)
  8002f0:	2021883a 	mov	r16,r4
  8002f4:	2809883a 	mov	r4,r5
  8002f8:	dc400815 	stw	r17,32(sp)
  8002fc:	dfc00915 	stw	ra,36(sp)
  800300:	2823883a 	mov	r17,r5
  800304:	08003a40 	call	8003a4 <strlen>
  800308:	81400217 	ldw	r5,8(r16)
  80030c:	11000044 	addi	r4,r2,1
  800310:	d8800115 	stw	r2,4(sp)
  800314:	00802034 	movhi	r2,128
  800318:	2980030b 	ldhu	r6,12(r5)
  80031c:	1099c704 	addi	r2,r2,26396
  800320:	d8800215 	stw	r2,8(sp)
  800324:	00800044 	movi	r2,1
  800328:	d8800315 	stw	r2,12(sp)
  80032c:	00800084 	movi	r2,2
  800330:	d8800515 	stw	r2,20(sp)
  800334:	dc400015 	stw	r17,0(sp)
  800338:	d9000615 	stw	r4,24(sp)
  80033c:	dec00415 	stw	sp,16(sp)
  800340:	3088000c 	andi	r2,r6,8192
  800344:	1000061e 	bne	r2,zero,800360 <_puts_r+0x78>
  800348:	29001917 	ldw	r4,100(r5)
  80034c:	00b7ffc4 	movi	r2,-8193
  800350:	31880014 	ori	r6,r6,8192
  800354:	2084703a 	and	r2,r4,r2
  800358:	2980030d 	sth	r6,12(r5)
  80035c:	28801915 	stw	r2,100(r5)
  800360:	8009883a 	mov	r4,r16
  800364:	d9800404 	addi	r6,sp,16
  800368:	080043c0 	call	80043c <__sfvwrite_r>
  80036c:	1000061e 	bne	r2,zero,800388 <_puts_r+0xa0>
  800370:	00800284 	movi	r2,10
  800374:	dfc00917 	ldw	ra,36(sp)
  800378:	dc400817 	ldw	r17,32(sp)
  80037c:	dc000717 	ldw	r16,28(sp)
  800380:	dec00a04 	addi	sp,sp,40
  800384:	f800283a 	ret
  800388:	00bfffc4 	movi	r2,-1
  80038c:	003ff906 	br	800374 <__alt_data_end+0xff800374>

00800390 <puts>:
  800390:	00802034 	movhi	r2,128
  800394:	109d9a04 	addi	r2,r2,30312
  800398:	200b883a 	mov	r5,r4
  80039c:	11000017 	ldw	r4,0(r2)
  8003a0:	08002e81 	jmpi	8002e8 <_puts_r>

008003a4 <strlen>:
  8003a4:	208000cc 	andi	r2,r4,3
  8003a8:	10002026 	beq	r2,zero,80042c <strlen+0x88>
  8003ac:	20800007 	ldb	r2,0(r4)
  8003b0:	10002026 	beq	r2,zero,800434 <strlen+0x90>
  8003b4:	2005883a 	mov	r2,r4
  8003b8:	00000206 	br	8003c4 <strlen+0x20>
  8003bc:	10c00007 	ldb	r3,0(r2)
  8003c0:	18001826 	beq	r3,zero,800424 <strlen+0x80>
  8003c4:	10800044 	addi	r2,r2,1
  8003c8:	10c000cc 	andi	r3,r2,3
  8003cc:	183ffb1e 	bne	r3,zero,8003bc <__alt_data_end+0xff8003bc>
  8003d0:	10c00017 	ldw	r3,0(r2)
  8003d4:	01ffbff4 	movhi	r7,65279
  8003d8:	39ffbfc4 	addi	r7,r7,-257
  8003dc:	00ca303a 	nor	r5,zero,r3
  8003e0:	01a02074 	movhi	r6,32897
  8003e4:	19c7883a 	add	r3,r3,r7
  8003e8:	31a02004 	addi	r6,r6,-32640
  8003ec:	1946703a 	and	r3,r3,r5
  8003f0:	1986703a 	and	r3,r3,r6
  8003f4:	1800091e 	bne	r3,zero,80041c <strlen+0x78>
  8003f8:	10800104 	addi	r2,r2,4
  8003fc:	10c00017 	ldw	r3,0(r2)
  800400:	19cb883a 	add	r5,r3,r7
  800404:	00c6303a 	nor	r3,zero,r3
  800408:	28c6703a 	and	r3,r5,r3
  80040c:	1986703a 	and	r3,r3,r6
  800410:	183ff926 	beq	r3,zero,8003f8 <__alt_data_end+0xff8003f8>
  800414:	00000106 	br	80041c <strlen+0x78>
  800418:	10800044 	addi	r2,r2,1
  80041c:	10c00007 	ldb	r3,0(r2)
  800420:	183ffd1e 	bne	r3,zero,800418 <__alt_data_end+0xff800418>
  800424:	1105c83a 	sub	r2,r2,r4
  800428:	f800283a 	ret
  80042c:	2005883a 	mov	r2,r4
  800430:	003fe706 	br	8003d0 <__alt_data_end+0xff8003d0>
  800434:	0005883a 	mov	r2,zero
  800438:	f800283a 	ret

0080043c <__sfvwrite_r>:
  80043c:	30800217 	ldw	r2,8(r6)
  800440:	10006726 	beq	r2,zero,8005e0 <__sfvwrite_r+0x1a4>
  800444:	defff404 	addi	sp,sp,-48
  800448:	dd000615 	stw	r20,24(sp)
  80044c:	2029883a 	mov	r20,r4
  800450:	2900030b 	ldhu	r4,12(r5)
  800454:	ddc00915 	stw	r23,36(sp)
  800458:	dc000215 	stw	r16,8(sp)
  80045c:	dfc00b15 	stw	ra,44(sp)
  800460:	df000a15 	stw	fp,40(sp)
  800464:	dd800815 	stw	r22,32(sp)
  800468:	dd400715 	stw	r21,28(sp)
  80046c:	dcc00515 	stw	r19,20(sp)
  800470:	dc800415 	stw	r18,16(sp)
  800474:	dc400315 	stw	r17,12(sp)
  800478:	2080020c 	andi	r2,r4,8
  80047c:	2821883a 	mov	r16,r5
  800480:	302f883a 	mov	r23,r6
  800484:	10002726 	beq	r2,zero,800524 <__sfvwrite_r+0xe8>
  800488:	28800417 	ldw	r2,16(r5)
  80048c:	10002526 	beq	r2,zero,800524 <__sfvwrite_r+0xe8>
  800490:	2080008c 	andi	r2,r4,2
  800494:	bc400017 	ldw	r17,0(r23)
  800498:	10002a26 	beq	r2,zero,800544 <__sfvwrite_r+0x108>
  80049c:	05600034 	movhi	r21,32768
  8004a0:	0027883a 	mov	r19,zero
  8004a4:	0025883a 	mov	r18,zero
  8004a8:	ad7f0004 	addi	r21,r21,-1024
  8004ac:	980d883a 	mov	r6,r19
  8004b0:	a009883a 	mov	r4,r20
  8004b4:	90004626 	beq	r18,zero,8005d0 <__sfvwrite_r+0x194>
  8004b8:	900f883a 	mov	r7,r18
  8004bc:	81400717 	ldw	r5,28(r16)
  8004c0:	ac80022e 	bgeu	r21,r18,8004cc <__sfvwrite_r+0x90>
  8004c4:	01e00034 	movhi	r7,32768
  8004c8:	39ff0004 	addi	r7,r7,-1024
  8004cc:	80800917 	ldw	r2,36(r16)
  8004d0:	103ee83a 	callr	r2
  8004d4:	0080520e 	bge	zero,r2,800620 <__sfvwrite_r+0x1e4>
  8004d8:	b8c00217 	ldw	r3,8(r23)
  8004dc:	98a7883a 	add	r19,r19,r2
  8004e0:	90a5c83a 	sub	r18,r18,r2
  8004e4:	1885c83a 	sub	r2,r3,r2
  8004e8:	b8800215 	stw	r2,8(r23)
  8004ec:	103fef1e 	bne	r2,zero,8004ac <__alt_data_end+0xff8004ac>
  8004f0:	0005883a 	mov	r2,zero
  8004f4:	dfc00b17 	ldw	ra,44(sp)
  8004f8:	df000a17 	ldw	fp,40(sp)
  8004fc:	ddc00917 	ldw	r23,36(sp)
  800500:	dd800817 	ldw	r22,32(sp)
  800504:	dd400717 	ldw	r21,28(sp)
  800508:	dd000617 	ldw	r20,24(sp)
  80050c:	dcc00517 	ldw	r19,20(sp)
  800510:	dc800417 	ldw	r18,16(sp)
  800514:	dc400317 	ldw	r17,12(sp)
  800518:	dc000217 	ldw	r16,8(sp)
  80051c:	dec00c04 	addi	sp,sp,48
  800520:	f800283a 	ret
  800524:	a009883a 	mov	r4,r20
  800528:	800b883a 	mov	r5,r16
  80052c:	08019dc0 	call	8019dc <__swsetup_r>
  800530:	1000ec1e 	bne	r2,zero,8008e4 <__sfvwrite_r+0x4a8>
  800534:	8100030b 	ldhu	r4,12(r16)
  800538:	bc400017 	ldw	r17,0(r23)
  80053c:	2080008c 	andi	r2,r4,2
  800540:	103fd61e 	bne	r2,zero,80049c <__alt_data_end+0xff80049c>
  800544:	2080004c 	andi	r2,r4,1
  800548:	10003a1e 	bne	r2,zero,800634 <__sfvwrite_r+0x1f8>
  80054c:	0039883a 	mov	fp,zero
  800550:	0025883a 	mov	r18,zero
  800554:	90001a26 	beq	r18,zero,8005c0 <__sfvwrite_r+0x184>
  800558:	2080800c 	andi	r2,r4,512
  80055c:	85800217 	ldw	r22,8(r16)
  800560:	10007626 	beq	r2,zero,80073c <__sfvwrite_r+0x300>
  800564:	b027883a 	mov	r19,r22
  800568:	95809436 	bltu	r18,r22,8007bc <__sfvwrite_r+0x380>
  80056c:	2081200c 	andi	r2,r4,1152
  800570:	10009f1e 	bne	r2,zero,8007f0 <__sfvwrite_r+0x3b4>
  800574:	81000017 	ldw	r4,0(r16)
  800578:	e00b883a 	mov	r5,fp
  80057c:	980d883a 	mov	r6,r19
  800580:	08012c40 	call	8012c4 <memmove>
  800584:	81000217 	ldw	r4,8(r16)
  800588:	81400017 	ldw	r5,0(r16)
  80058c:	9005883a 	mov	r2,r18
  800590:	2587c83a 	sub	r3,r4,r22
  800594:	2ce7883a 	add	r19,r5,r19
  800598:	80c00215 	stw	r3,8(r16)
  80059c:	84c00015 	stw	r19,0(r16)
  8005a0:	b8c00217 	ldw	r3,8(r23)
  8005a4:	e0b9883a 	add	fp,fp,r2
  8005a8:	90a5c83a 	sub	r18,r18,r2
  8005ac:	1885c83a 	sub	r2,r3,r2
  8005b0:	b8800215 	stw	r2,8(r23)
  8005b4:	103fce26 	beq	r2,zero,8004f0 <__alt_data_end+0xff8004f0>
  8005b8:	8100030b 	ldhu	r4,12(r16)
  8005bc:	903fe61e 	bne	r18,zero,800558 <__alt_data_end+0xff800558>
  8005c0:	8f000017 	ldw	fp,0(r17)
  8005c4:	8c800117 	ldw	r18,4(r17)
  8005c8:	8c400204 	addi	r17,r17,8
  8005cc:	003fe106 	br	800554 <__alt_data_end+0xff800554>
  8005d0:	8cc00017 	ldw	r19,0(r17)
  8005d4:	8c800117 	ldw	r18,4(r17)
  8005d8:	8c400204 	addi	r17,r17,8
  8005dc:	003fb306 	br	8004ac <__alt_data_end+0xff8004ac>
  8005e0:	0005883a 	mov	r2,zero
  8005e4:	f800283a 	ret
  8005e8:	00a00034 	movhi	r2,32768
  8005ec:	10bfffc4 	addi	r2,r2,-1
  8005f0:	9009883a 	mov	r4,r18
  8005f4:	1480012e 	bgeu	r2,r18,8005fc <__sfvwrite_r+0x1c0>
  8005f8:	1009883a 	mov	r4,r2
  8005fc:	980b883a 	mov	r5,r19
  800600:	0802e9c0 	call	802e9c <__divsi3>
  800604:	81400717 	ldw	r5,28(r16)
  800608:	80c00917 	ldw	r3,36(r16)
  80060c:	988f383a 	mul	r7,r19,r2
  800610:	a009883a 	mov	r4,r20
  800614:	e00d883a 	mov	r6,fp
  800618:	183ee83a 	callr	r3
  80061c:	00bfe016 	blt	zero,r2,8005a0 <__alt_data_end+0xff8005a0>
  800620:	8080030b 	ldhu	r2,12(r16)
  800624:	10801014 	ori	r2,r2,64
  800628:	8080030d 	sth	r2,12(r16)
  80062c:	00bfffc4 	movi	r2,-1
  800630:	003fb006 	br	8004f4 <__alt_data_end+0xff8004f4>
  800634:	0027883a 	mov	r19,zero
  800638:	0011883a 	mov	r8,zero
  80063c:	0039883a 	mov	fp,zero
  800640:	0025883a 	mov	r18,zero
  800644:	90001f26 	beq	r18,zero,8006c4 <__sfvwrite_r+0x288>
  800648:	40006026 	beq	r8,zero,8007cc <__sfvwrite_r+0x390>
  80064c:	982b883a 	mov	r21,r19
  800650:	94c0012e 	bgeu	r18,r19,800658 <__sfvwrite_r+0x21c>
  800654:	902b883a 	mov	r21,r18
  800658:	81000017 	ldw	r4,0(r16)
  80065c:	80800417 	ldw	r2,16(r16)
  800660:	a82d883a 	mov	r22,r21
  800664:	81800217 	ldw	r6,8(r16)
  800668:	81c00517 	ldw	r7,20(r16)
  80066c:	1100022e 	bgeu	r2,r4,800678 <__sfvwrite_r+0x23c>
  800670:	31c7883a 	add	r3,r6,r7
  800674:	1d401816 	blt	r3,r21,8006d8 <__sfvwrite_r+0x29c>
  800678:	a9c04416 	blt	r21,r7,80078c <__sfvwrite_r+0x350>
  80067c:	80800917 	ldw	r2,36(r16)
  800680:	81400717 	ldw	r5,28(r16)
  800684:	a009883a 	mov	r4,r20
  800688:	da000115 	stw	r8,4(sp)
  80068c:	e00d883a 	mov	r6,fp
  800690:	103ee83a 	callr	r2
  800694:	102d883a 	mov	r22,r2
  800698:	da000117 	ldw	r8,4(sp)
  80069c:	00bfe00e 	bge	zero,r2,800620 <__alt_data_end+0xff800620>
  8006a0:	9da7c83a 	sub	r19,r19,r22
  8006a4:	98001f26 	beq	r19,zero,800724 <__sfvwrite_r+0x2e8>
  8006a8:	b8800217 	ldw	r2,8(r23)
  8006ac:	e5b9883a 	add	fp,fp,r22
  8006b0:	95a5c83a 	sub	r18,r18,r22
  8006b4:	15adc83a 	sub	r22,r2,r22
  8006b8:	bd800215 	stw	r22,8(r23)
  8006bc:	b03f8c26 	beq	r22,zero,8004f0 <__alt_data_end+0xff8004f0>
  8006c0:	903fe11e 	bne	r18,zero,800648 <__alt_data_end+0xff800648>
  8006c4:	8f000017 	ldw	fp,0(r17)
  8006c8:	8c800117 	ldw	r18,4(r17)
  8006cc:	0011883a 	mov	r8,zero
  8006d0:	8c400204 	addi	r17,r17,8
  8006d4:	003fdb06 	br	800644 <__alt_data_end+0xff800644>
  8006d8:	180d883a 	mov	r6,r3
  8006dc:	e00b883a 	mov	r5,fp
  8006e0:	da000115 	stw	r8,4(sp)
  8006e4:	d8c00015 	stw	r3,0(sp)
  8006e8:	08012c40 	call	8012c4 <memmove>
  8006ec:	d8c00017 	ldw	r3,0(sp)
  8006f0:	80800017 	ldw	r2,0(r16)
  8006f4:	a009883a 	mov	r4,r20
  8006f8:	800b883a 	mov	r5,r16
  8006fc:	10c5883a 	add	r2,r2,r3
  800700:	80800015 	stw	r2,0(r16)
  800704:	d8c00015 	stw	r3,0(sp)
  800708:	0801d380 	call	801d38 <_fflush_r>
  80070c:	d8c00017 	ldw	r3,0(sp)
  800710:	da000117 	ldw	r8,4(sp)
  800714:	103fc21e 	bne	r2,zero,800620 <__alt_data_end+0xff800620>
  800718:	182d883a 	mov	r22,r3
  80071c:	9da7c83a 	sub	r19,r19,r22
  800720:	983fe11e 	bne	r19,zero,8006a8 <__alt_data_end+0xff8006a8>
  800724:	a009883a 	mov	r4,r20
  800728:	800b883a 	mov	r5,r16
  80072c:	0801d380 	call	801d38 <_fflush_r>
  800730:	103fbb1e 	bne	r2,zero,800620 <__alt_data_end+0xff800620>
  800734:	0011883a 	mov	r8,zero
  800738:	003fdb06 	br	8006a8 <__alt_data_end+0xff8006a8>
  80073c:	81000017 	ldw	r4,0(r16)
  800740:	80800417 	ldw	r2,16(r16)
  800744:	11000236 	bltu	r2,r4,800750 <__sfvwrite_r+0x314>
  800748:	84c00517 	ldw	r19,20(r16)
  80074c:	94ffa62e 	bgeu	r18,r19,8005e8 <__alt_data_end+0xff8005e8>
  800750:	9027883a 	mov	r19,r18
  800754:	b480012e 	bgeu	r22,r18,80075c <__sfvwrite_r+0x320>
  800758:	b027883a 	mov	r19,r22
  80075c:	e00b883a 	mov	r5,fp
  800760:	980d883a 	mov	r6,r19
  800764:	08012c40 	call	8012c4 <memmove>
  800768:	80800217 	ldw	r2,8(r16)
  80076c:	80c00017 	ldw	r3,0(r16)
  800770:	14c5c83a 	sub	r2,r2,r19
  800774:	1cc7883a 	add	r3,r3,r19
  800778:	80800215 	stw	r2,8(r16)
  80077c:	80c00015 	stw	r3,0(r16)
  800780:	10004326 	beq	r2,zero,800890 <__sfvwrite_r+0x454>
  800784:	9805883a 	mov	r2,r19
  800788:	003f8506 	br	8005a0 <__alt_data_end+0xff8005a0>
  80078c:	a80d883a 	mov	r6,r21
  800790:	e00b883a 	mov	r5,fp
  800794:	da000115 	stw	r8,4(sp)
  800798:	08012c40 	call	8012c4 <memmove>
  80079c:	80800217 	ldw	r2,8(r16)
  8007a0:	80c00017 	ldw	r3,0(r16)
  8007a4:	da000117 	ldw	r8,4(sp)
  8007a8:	1545c83a 	sub	r2,r2,r21
  8007ac:	1d6b883a 	add	r21,r3,r21
  8007b0:	80800215 	stw	r2,8(r16)
  8007b4:	85400015 	stw	r21,0(r16)
  8007b8:	003fb906 	br	8006a0 <__alt_data_end+0xff8006a0>
  8007bc:	81000017 	ldw	r4,0(r16)
  8007c0:	902d883a 	mov	r22,r18
  8007c4:	9027883a 	mov	r19,r18
  8007c8:	003f6b06 	br	800578 <__alt_data_end+0xff800578>
  8007cc:	e009883a 	mov	r4,fp
  8007d0:	01400284 	movi	r5,10
  8007d4:	900d883a 	mov	r6,r18
  8007d8:	08010a40 	call	8010a4 <memchr>
  8007dc:	10003e26 	beq	r2,zero,8008d8 <__sfvwrite_r+0x49c>
  8007e0:	10800044 	addi	r2,r2,1
  8007e4:	1727c83a 	sub	r19,r2,fp
  8007e8:	02000044 	movi	r8,1
  8007ec:	003f9706 	br	80064c <__alt_data_end+0xff80064c>
  8007f0:	80800517 	ldw	r2,20(r16)
  8007f4:	81400417 	ldw	r5,16(r16)
  8007f8:	80c00017 	ldw	r3,0(r16)
  8007fc:	10a7883a 	add	r19,r2,r2
  800800:	9885883a 	add	r2,r19,r2
  800804:	1026d7fa 	srli	r19,r2,31
  800808:	196bc83a 	sub	r21,r3,r5
  80080c:	a9800044 	addi	r6,r21,1
  800810:	9885883a 	add	r2,r19,r2
  800814:	1027d07a 	srai	r19,r2,1
  800818:	3485883a 	add	r2,r6,r18
  80081c:	980d883a 	mov	r6,r19
  800820:	9880022e 	bgeu	r19,r2,80082c <__sfvwrite_r+0x3f0>
  800824:	1027883a 	mov	r19,r2
  800828:	100d883a 	mov	r6,r2
  80082c:	2101000c 	andi	r4,r4,1024
  800830:	20001c26 	beq	r4,zero,8008a4 <__sfvwrite_r+0x468>
  800834:	a009883a 	mov	r4,r20
  800838:	300b883a 	mov	r5,r6
  80083c:	08008fc0 	call	8008fc <_malloc_r>
  800840:	102d883a 	mov	r22,r2
  800844:	10002926 	beq	r2,zero,8008ec <__sfvwrite_r+0x4b0>
  800848:	81400417 	ldw	r5,16(r16)
  80084c:	1009883a 	mov	r4,r2
  800850:	a80d883a 	mov	r6,r21
  800854:	080118c0 	call	80118c <memcpy>
  800858:	8080030b 	ldhu	r2,12(r16)
  80085c:	00fedfc4 	movi	r3,-1153
  800860:	10c4703a 	and	r2,r2,r3
  800864:	10802014 	ori	r2,r2,128
  800868:	8080030d 	sth	r2,12(r16)
  80086c:	b549883a 	add	r4,r22,r21
  800870:	9d4bc83a 	sub	r5,r19,r21
  800874:	85800415 	stw	r22,16(r16)
  800878:	84c00515 	stw	r19,20(r16)
  80087c:	81000015 	stw	r4,0(r16)
  800880:	902d883a 	mov	r22,r18
  800884:	81400215 	stw	r5,8(r16)
  800888:	9027883a 	mov	r19,r18
  80088c:	003f3a06 	br	800578 <__alt_data_end+0xff800578>
  800890:	a009883a 	mov	r4,r20
  800894:	800b883a 	mov	r5,r16
  800898:	0801d380 	call	801d38 <_fflush_r>
  80089c:	103fb926 	beq	r2,zero,800784 <__alt_data_end+0xff800784>
  8008a0:	003f5f06 	br	800620 <__alt_data_end+0xff800620>
  8008a4:	a009883a 	mov	r4,r20
  8008a8:	08014200 	call	801420 <_realloc_r>
  8008ac:	102d883a 	mov	r22,r2
  8008b0:	103fee1e 	bne	r2,zero,80086c <__alt_data_end+0xff80086c>
  8008b4:	81400417 	ldw	r5,16(r16)
  8008b8:	a009883a 	mov	r4,r20
  8008bc:	08022880 	call	802288 <_free_r>
  8008c0:	8080030b 	ldhu	r2,12(r16)
  8008c4:	00ffdfc4 	movi	r3,-129
  8008c8:	1884703a 	and	r2,r3,r2
  8008cc:	00c00304 	movi	r3,12
  8008d0:	a0c00015 	stw	r3,0(r20)
  8008d4:	003f5306 	br	800624 <__alt_data_end+0xff800624>
  8008d8:	94c00044 	addi	r19,r18,1
  8008dc:	02000044 	movi	r8,1
  8008e0:	003f5a06 	br	80064c <__alt_data_end+0xff80064c>
  8008e4:	00bfffc4 	movi	r2,-1
  8008e8:	003f0206 	br	8004f4 <__alt_data_end+0xff8004f4>
  8008ec:	00800304 	movi	r2,12
  8008f0:	a0800015 	stw	r2,0(r20)
  8008f4:	8080030b 	ldhu	r2,12(r16)
  8008f8:	003f4a06 	br	800624 <__alt_data_end+0xff800624>

008008fc <_malloc_r>:
  8008fc:	defff504 	addi	sp,sp,-44
  800900:	dc800315 	stw	r18,12(sp)
  800904:	dfc00a15 	stw	ra,40(sp)
  800908:	df000915 	stw	fp,36(sp)
  80090c:	ddc00815 	stw	r23,32(sp)
  800910:	dd800715 	stw	r22,28(sp)
  800914:	dd400615 	stw	r21,24(sp)
  800918:	dd000515 	stw	r20,20(sp)
  80091c:	dcc00415 	stw	r19,16(sp)
  800920:	dc400215 	stw	r17,8(sp)
  800924:	dc000115 	stw	r16,4(sp)
  800928:	288002c4 	addi	r2,r5,11
  80092c:	00c00584 	movi	r3,22
  800930:	2025883a 	mov	r18,r4
  800934:	18802a2e 	bgeu	r3,r2,8009e0 <_malloc_r+0xe4>
  800938:	047ffe04 	movi	r17,-8
  80093c:	1462703a 	and	r17,r2,r17
  800940:	88009e16 	blt	r17,zero,800bbc <_malloc_r+0x2c0>
  800944:	89409d36 	bltu	r17,r5,800bbc <_malloc_r+0x2c0>
  800948:	080351c0 	call	80351c <__malloc_lock>
  80094c:	00807dc4 	movi	r2,503
  800950:	14402736 	bltu	r2,r17,8009f0 <_malloc_r+0xf4>
  800954:	8806d0fa 	srli	r3,r17,3
  800958:	04c02034 	movhi	r19,128
  80095c:	9cdb9104 	addi	r19,r19,28228
  800960:	18c5883a 	add	r2,r3,r3
  800964:	1085883a 	add	r2,r2,r2
  800968:	1085883a 	add	r2,r2,r2
  80096c:	9885883a 	add	r2,r19,r2
  800970:	14000317 	ldw	r16,12(r2)
  800974:	80814a26 	beq	r16,r2,800ea0 <_malloc_r+0x5a4>
  800978:	80c00117 	ldw	r3,4(r16)
  80097c:	81000317 	ldw	r4,12(r16)
  800980:	00bfff04 	movi	r2,-4
  800984:	1884703a 	and	r2,r3,r2
  800988:	81400217 	ldw	r5,8(r16)
  80098c:	8085883a 	add	r2,r16,r2
  800990:	10c00117 	ldw	r3,4(r2)
  800994:	29000315 	stw	r4,12(r5)
  800998:	21400215 	stw	r5,8(r4)
  80099c:	18c00054 	ori	r3,r3,1
  8009a0:	10c00115 	stw	r3,4(r2)
  8009a4:	9009883a 	mov	r4,r18
  8009a8:	080353c0 	call	80353c <__malloc_unlock>
  8009ac:	80800204 	addi	r2,r16,8
  8009b0:	dfc00a17 	ldw	ra,40(sp)
  8009b4:	df000917 	ldw	fp,36(sp)
  8009b8:	ddc00817 	ldw	r23,32(sp)
  8009bc:	dd800717 	ldw	r22,28(sp)
  8009c0:	dd400617 	ldw	r21,24(sp)
  8009c4:	dd000517 	ldw	r20,20(sp)
  8009c8:	dcc00417 	ldw	r19,16(sp)
  8009cc:	dc800317 	ldw	r18,12(sp)
  8009d0:	dc400217 	ldw	r17,8(sp)
  8009d4:	dc000117 	ldw	r16,4(sp)
  8009d8:	dec00b04 	addi	sp,sp,44
  8009dc:	f800283a 	ret
  8009e0:	04400404 	movi	r17,16
  8009e4:	89407536 	bltu	r17,r5,800bbc <_malloc_r+0x2c0>
  8009e8:	080351c0 	call	80351c <__malloc_lock>
  8009ec:	003fd906 	br	800954 <__alt_data_end+0xff800954>
  8009f0:	8806d27a 	srli	r3,r17,9
  8009f4:	18007526 	beq	r3,zero,800bcc <_malloc_r+0x2d0>
  8009f8:	00800104 	movi	r2,4
  8009fc:	10c0ef36 	bltu	r2,r3,800dbc <_malloc_r+0x4c0>
  800a00:	8806d1ba 	srli	r3,r17,6
  800a04:	19c00e04 	addi	r7,r3,56
  800a08:	39cb883a 	add	r5,r7,r7
  800a0c:	04c02034 	movhi	r19,128
  800a10:	294b883a 	add	r5,r5,r5
  800a14:	9cdb9104 	addi	r19,r19,28228
  800a18:	294b883a 	add	r5,r5,r5
  800a1c:	994b883a 	add	r5,r19,r5
  800a20:	2c000317 	ldw	r16,12(r5)
  800a24:	2c000e26 	beq	r5,r16,800a60 <_malloc_r+0x164>
  800a28:	80800117 	ldw	r2,4(r16)
  800a2c:	01bfff04 	movi	r6,-4
  800a30:	010003c4 	movi	r4,15
  800a34:	1184703a 	and	r2,r2,r6
  800a38:	1447c83a 	sub	r3,r2,r17
  800a3c:	20c00716 	blt	r4,r3,800a5c <_malloc_r+0x160>
  800a40:	1800650e 	bge	r3,zero,800bd8 <_malloc_r+0x2dc>
  800a44:	84000317 	ldw	r16,12(r16)
  800a48:	2c000526 	beq	r5,r16,800a60 <_malloc_r+0x164>
  800a4c:	80800117 	ldw	r2,4(r16)
  800a50:	1184703a 	and	r2,r2,r6
  800a54:	1447c83a 	sub	r3,r2,r17
  800a58:	20fff90e 	bge	r4,r3,800a40 <__alt_data_end+0xff800a40>
  800a5c:	39ffffc4 	addi	r7,r7,-1
  800a60:	38c00044 	addi	r3,r7,1
  800a64:	01802034 	movhi	r6,128
  800a68:	9c000417 	ldw	r16,16(r19)
  800a6c:	319b9104 	addi	r6,r6,28228
  800a70:	32400204 	addi	r9,r6,8
  800a74:	82410326 	beq	r16,r9,800e84 <_malloc_r+0x588>
  800a78:	81000117 	ldw	r4,4(r16)
  800a7c:	00bfff04 	movi	r2,-4
  800a80:	208e703a 	and	r7,r4,r2
  800a84:	3c45c83a 	sub	r2,r7,r17
  800a88:	010003c4 	movi	r4,15
  800a8c:	2080ee16 	blt	r4,r2,800e48 <_malloc_r+0x54c>
  800a90:	32400515 	stw	r9,20(r6)
  800a94:	32400415 	stw	r9,16(r6)
  800a98:	1000510e 	bge	r2,zero,800be0 <_malloc_r+0x2e4>
  800a9c:	00807fc4 	movi	r2,511
  800aa0:	11c0ce36 	bltu	r2,r7,800ddc <_malloc_r+0x4e0>
  800aa4:	3808d0fa 	srli	r4,r7,3
  800aa8:	01c00044 	movi	r7,1
  800aac:	30800117 	ldw	r2,4(r6)
  800ab0:	210b883a 	add	r5,r4,r4
  800ab4:	294b883a 	add	r5,r5,r5
  800ab8:	2009d0ba 	srai	r4,r4,2
  800abc:	294b883a 	add	r5,r5,r5
  800ac0:	298b883a 	add	r5,r5,r6
  800ac4:	2a000217 	ldw	r8,8(r5)
  800ac8:	3908983a 	sll	r4,r7,r4
  800acc:	81400315 	stw	r5,12(r16)
  800ad0:	82000215 	stw	r8,8(r16)
  800ad4:	2088b03a 	or	r4,r4,r2
  800ad8:	2c000215 	stw	r16,8(r5)
  800adc:	31000115 	stw	r4,4(r6)
  800ae0:	44000315 	stw	r16,12(r8)
  800ae4:	1805d0ba 	srai	r2,r3,2
  800ae8:	01400044 	movi	r5,1
  800aec:	288a983a 	sll	r5,r5,r2
  800af0:	21404336 	bltu	r4,r5,800c00 <_malloc_r+0x304>
  800af4:	2144703a 	and	r2,r4,r5
  800af8:	10000a1e 	bne	r2,zero,800b24 <_malloc_r+0x228>
  800afc:	00bfff04 	movi	r2,-4
  800b00:	294b883a 	add	r5,r5,r5
  800b04:	1886703a 	and	r3,r3,r2
  800b08:	2144703a 	and	r2,r4,r5
  800b0c:	18c00104 	addi	r3,r3,4
  800b10:	1000041e 	bne	r2,zero,800b24 <_malloc_r+0x228>
  800b14:	294b883a 	add	r5,r5,r5
  800b18:	2144703a 	and	r2,r4,r5
  800b1c:	18c00104 	addi	r3,r3,4
  800b20:	103ffc26 	beq	r2,zero,800b14 <__alt_data_end+0xff800b14>
  800b24:	023fff04 	movi	r8,-4
  800b28:	01c003c4 	movi	r7,15
  800b2c:	18c5883a 	add	r2,r3,r3
  800b30:	1085883a 	add	r2,r2,r2
  800b34:	1085883a 	add	r2,r2,r2
  800b38:	9895883a 	add	r10,r19,r2
  800b3c:	52c00304 	addi	r11,r10,12
  800b40:	1819883a 	mov	r12,r3
  800b44:	5c000017 	ldw	r16,0(r11)
  800b48:	59bffd04 	addi	r6,r11,-12
  800b4c:	8180041e 	bne	r16,r6,800b60 <_malloc_r+0x264>
  800b50:	0000ce06 	br	800e8c <_malloc_r+0x590>
  800b54:	2000d70e 	bge	r4,zero,800eb4 <_malloc_r+0x5b8>
  800b58:	84000317 	ldw	r16,12(r16)
  800b5c:	8180cb26 	beq	r16,r6,800e8c <_malloc_r+0x590>
  800b60:	80800117 	ldw	r2,4(r16)
  800b64:	1204703a 	and	r2,r2,r8
  800b68:	1449c83a 	sub	r4,r2,r17
  800b6c:	393ff90e 	bge	r7,r4,800b54 <__alt_data_end+0xff800b54>
  800b70:	80800317 	ldw	r2,12(r16)
  800b74:	80c00217 	ldw	r3,8(r16)
  800b78:	89400054 	ori	r5,r17,1
  800b7c:	81400115 	stw	r5,4(r16)
  800b80:	18800315 	stw	r2,12(r3)
  800b84:	10c00215 	stw	r3,8(r2)
  800b88:	8463883a 	add	r17,r16,r17
  800b8c:	9c400515 	stw	r17,20(r19)
  800b90:	9c400415 	stw	r17,16(r19)
  800b94:	20800054 	ori	r2,r4,1
  800b98:	88800115 	stw	r2,4(r17)
  800b9c:	8a400315 	stw	r9,12(r17)
  800ba0:	8a400215 	stw	r9,8(r17)
  800ba4:	8923883a 	add	r17,r17,r4
  800ba8:	89000015 	stw	r4,0(r17)
  800bac:	9009883a 	mov	r4,r18
  800bb0:	080353c0 	call	80353c <__malloc_unlock>
  800bb4:	80800204 	addi	r2,r16,8
  800bb8:	003f7d06 	br	8009b0 <__alt_data_end+0xff8009b0>
  800bbc:	00800304 	movi	r2,12
  800bc0:	90800015 	stw	r2,0(r18)
  800bc4:	0005883a 	mov	r2,zero
  800bc8:	003f7906 	br	8009b0 <__alt_data_end+0xff8009b0>
  800bcc:	01401f84 	movi	r5,126
  800bd0:	01c00fc4 	movi	r7,63
  800bd4:	003f8d06 	br	800a0c <__alt_data_end+0xff800a0c>
  800bd8:	81000317 	ldw	r4,12(r16)
  800bdc:	003f6a06 	br	800988 <__alt_data_end+0xff800988>
  800be0:	81c5883a 	add	r2,r16,r7
  800be4:	10c00117 	ldw	r3,4(r2)
  800be8:	9009883a 	mov	r4,r18
  800bec:	18c00054 	ori	r3,r3,1
  800bf0:	10c00115 	stw	r3,4(r2)
  800bf4:	080353c0 	call	80353c <__malloc_unlock>
  800bf8:	80800204 	addi	r2,r16,8
  800bfc:	003f6c06 	br	8009b0 <__alt_data_end+0xff8009b0>
  800c00:	9c000217 	ldw	r16,8(r19)
  800c04:	00bfff04 	movi	r2,-4
  800c08:	85800117 	ldw	r22,4(r16)
  800c0c:	b0ac703a 	and	r22,r22,r2
  800c10:	b4400336 	bltu	r22,r17,800c20 <_malloc_r+0x324>
  800c14:	b445c83a 	sub	r2,r22,r17
  800c18:	00c003c4 	movi	r3,15
  800c1c:	18805d16 	blt	r3,r2,800d94 <_malloc_r+0x498>
  800c20:	05c02034 	movhi	r23,128
  800c24:	00802074 	movhi	r2,129
  800c28:	bddd9b04 	addi	r23,r23,30316
  800c2c:	10a0cc04 	addi	r2,r2,-31952
  800c30:	15400017 	ldw	r21,0(r2)
  800c34:	b9000017 	ldw	r4,0(r23)
  800c38:	00ffffc4 	movi	r3,-1
  800c3c:	858d883a 	add	r6,r16,r22
  800c40:	8d6b883a 	add	r21,r17,r21
  800c44:	20c0e426 	beq	r4,r3,800fd8 <_malloc_r+0x6dc>
  800c48:	ad4403c4 	addi	r21,r21,4111
  800c4c:	00fc0004 	movi	r3,-4096
  800c50:	a8ea703a 	and	r21,r21,r3
  800c54:	9009883a 	mov	r4,r18
  800c58:	a80b883a 	mov	r5,r21
  800c5c:	d9800015 	stw	r6,0(sp)
  800c60:	08019880 	call	801988 <_sbrk_r>
  800c64:	00ffffc4 	movi	r3,-1
  800c68:	1029883a 	mov	r20,r2
  800c6c:	d9800017 	ldw	r6,0(sp)
  800c70:	10c0a426 	beq	r2,r3,800f04 <_malloc_r+0x608>
  800c74:	1180a236 	bltu	r2,r6,800f00 <_malloc_r+0x604>
  800c78:	07002074 	movhi	fp,129
  800c7c:	e720d504 	addi	fp,fp,-31916
  800c80:	e0c00017 	ldw	r3,0(fp)
  800c84:	a8c7883a 	add	r3,r21,r3
  800c88:	e0c00015 	stw	r3,0(fp)
  800c8c:	3500da26 	beq	r6,r20,800ff8 <_malloc_r+0x6fc>
  800c90:	b9000017 	ldw	r4,0(r23)
  800c94:	00bfffc4 	movi	r2,-1
  800c98:	2080e426 	beq	r4,r2,80102c <_malloc_r+0x730>
  800c9c:	a185c83a 	sub	r2,r20,r6
  800ca0:	1885883a 	add	r2,r3,r2
  800ca4:	e0800015 	stw	r2,0(fp)
  800ca8:	a0c001cc 	andi	r3,r20,7
  800cac:	1800b526 	beq	r3,zero,800f84 <_malloc_r+0x688>
  800cb0:	a0e9c83a 	sub	r20,r20,r3
  800cb4:	00840204 	movi	r2,4104
  800cb8:	a5000204 	addi	r20,r20,8
  800cbc:	10c7c83a 	sub	r3,r2,r3
  800cc0:	a545883a 	add	r2,r20,r21
  800cc4:	1083ffcc 	andi	r2,r2,4095
  800cc8:	18abc83a 	sub	r21,r3,r2
  800ccc:	9009883a 	mov	r4,r18
  800cd0:	a80b883a 	mov	r5,r21
  800cd4:	08019880 	call	801988 <_sbrk_r>
  800cd8:	00ffffc4 	movi	r3,-1
  800cdc:	10c0d026 	beq	r2,r3,801020 <_malloc_r+0x724>
  800ce0:	1507c83a 	sub	r3,r2,r20
  800ce4:	a8c7883a 	add	r3,r21,r3
  800ce8:	18c00054 	ori	r3,r3,1
  800cec:	e0800017 	ldw	r2,0(fp)
  800cf0:	9d000215 	stw	r20,8(r19)
  800cf4:	a0c00115 	stw	r3,4(r20)
  800cf8:	a887883a 	add	r3,r21,r2
  800cfc:	e0c00015 	stw	r3,0(fp)
  800d00:	84c00e26 	beq	r16,r19,800d3c <_malloc_r+0x440>
  800d04:	018003c4 	movi	r6,15
  800d08:	3580a02e 	bgeu	r6,r22,800f8c <_malloc_r+0x690>
  800d0c:	81400117 	ldw	r5,4(r16)
  800d10:	013ffe04 	movi	r4,-8
  800d14:	b0bffd04 	addi	r2,r22,-12
  800d18:	1104703a 	and	r2,r2,r4
  800d1c:	2900004c 	andi	r4,r5,1
  800d20:	1108b03a 	or	r4,r2,r4
  800d24:	81000115 	stw	r4,4(r16)
  800d28:	01400144 	movi	r5,5
  800d2c:	8089883a 	add	r4,r16,r2
  800d30:	21400115 	stw	r5,4(r4)
  800d34:	21400215 	stw	r5,8(r4)
  800d38:	3080c036 	bltu	r6,r2,80103c <_malloc_r+0x740>
  800d3c:	00802074 	movhi	r2,129
  800d40:	10a0cb04 	addi	r2,r2,-31956
  800d44:	11000017 	ldw	r4,0(r2)
  800d48:	20c0012e 	bgeu	r4,r3,800d50 <_malloc_r+0x454>
  800d4c:	10c00015 	stw	r3,0(r2)
  800d50:	00802074 	movhi	r2,129
  800d54:	10a0ca04 	addi	r2,r2,-31960
  800d58:	11000017 	ldw	r4,0(r2)
  800d5c:	9c000217 	ldw	r16,8(r19)
  800d60:	20c0012e 	bgeu	r4,r3,800d68 <_malloc_r+0x46c>
  800d64:	10c00015 	stw	r3,0(r2)
  800d68:	80c00117 	ldw	r3,4(r16)
  800d6c:	00bfff04 	movi	r2,-4
  800d70:	1886703a 	and	r3,r3,r2
  800d74:	1c45c83a 	sub	r2,r3,r17
  800d78:	1c400236 	bltu	r3,r17,800d84 <_malloc_r+0x488>
  800d7c:	00c003c4 	movi	r3,15
  800d80:	18800416 	blt	r3,r2,800d94 <_malloc_r+0x498>
  800d84:	9009883a 	mov	r4,r18
  800d88:	080353c0 	call	80353c <__malloc_unlock>
  800d8c:	0005883a 	mov	r2,zero
  800d90:	003f0706 	br	8009b0 <__alt_data_end+0xff8009b0>
  800d94:	88c00054 	ori	r3,r17,1
  800d98:	80c00115 	stw	r3,4(r16)
  800d9c:	8463883a 	add	r17,r16,r17
  800da0:	10800054 	ori	r2,r2,1
  800da4:	9c400215 	stw	r17,8(r19)
  800da8:	88800115 	stw	r2,4(r17)
  800dac:	9009883a 	mov	r4,r18
  800db0:	080353c0 	call	80353c <__malloc_unlock>
  800db4:	80800204 	addi	r2,r16,8
  800db8:	003efd06 	br	8009b0 <__alt_data_end+0xff8009b0>
  800dbc:	00800504 	movi	r2,20
  800dc0:	10c0482e 	bgeu	r2,r3,800ee4 <_malloc_r+0x5e8>
  800dc4:	00801504 	movi	r2,84
  800dc8:	10c06836 	bltu	r2,r3,800f6c <_malloc_r+0x670>
  800dcc:	8806d33a 	srli	r3,r17,12
  800dd0:	19c01b84 	addi	r7,r3,110
  800dd4:	39cb883a 	add	r5,r7,r7
  800dd8:	003f0c06 	br	800a0c <__alt_data_end+0xff800a0c>
  800ddc:	3804d27a 	srli	r2,r7,9
  800de0:	01000104 	movi	r4,4
  800de4:	2080422e 	bgeu	r4,r2,800ef0 <_malloc_r+0x5f4>
  800de8:	01000504 	movi	r4,20
  800dec:	20807c36 	bltu	r4,r2,800fe0 <_malloc_r+0x6e4>
  800df0:	110016c4 	addi	r4,r2,91
  800df4:	210b883a 	add	r5,r4,r4
  800df8:	294b883a 	add	r5,r5,r5
  800dfc:	294b883a 	add	r5,r5,r5
  800e00:	994b883a 	add	r5,r19,r5
  800e04:	28800217 	ldw	r2,8(r5)
  800e08:	02002034 	movhi	r8,128
  800e0c:	421b9104 	addi	r8,r8,28228
  800e10:	11406326 	beq	r2,r5,800fa0 <_malloc_r+0x6a4>
  800e14:	01bfff04 	movi	r6,-4
  800e18:	11000117 	ldw	r4,4(r2)
  800e1c:	2188703a 	and	r4,r4,r6
  800e20:	3900022e 	bgeu	r7,r4,800e2c <_malloc_r+0x530>
  800e24:	10800217 	ldw	r2,8(r2)
  800e28:	28bffb1e 	bne	r5,r2,800e18 <__alt_data_end+0xff800e18>
  800e2c:	11800317 	ldw	r6,12(r2)
  800e30:	99000117 	ldw	r4,4(r19)
  800e34:	81800315 	stw	r6,12(r16)
  800e38:	80800215 	stw	r2,8(r16)
  800e3c:	34000215 	stw	r16,8(r6)
  800e40:	14000315 	stw	r16,12(r2)
  800e44:	003f2706 	br	800ae4 <__alt_data_end+0xff800ae4>
  800e48:	88c00054 	ori	r3,r17,1
  800e4c:	80c00115 	stw	r3,4(r16)
  800e50:	8463883a 	add	r17,r16,r17
  800e54:	34400515 	stw	r17,20(r6)
  800e58:	34400415 	stw	r17,16(r6)
  800e5c:	10c00054 	ori	r3,r2,1
  800e60:	8a400315 	stw	r9,12(r17)
  800e64:	8a400215 	stw	r9,8(r17)
  800e68:	88c00115 	stw	r3,4(r17)
  800e6c:	88a3883a 	add	r17,r17,r2
  800e70:	88800015 	stw	r2,0(r17)
  800e74:	9009883a 	mov	r4,r18
  800e78:	080353c0 	call	80353c <__malloc_unlock>
  800e7c:	80800204 	addi	r2,r16,8
  800e80:	003ecb06 	br	8009b0 <__alt_data_end+0xff8009b0>
  800e84:	31000117 	ldw	r4,4(r6)
  800e88:	003f1606 	br	800ae4 <__alt_data_end+0xff800ae4>
  800e8c:	63000044 	addi	r12,r12,1
  800e90:	608000cc 	andi	r2,r12,3
  800e94:	5ac00204 	addi	r11,r11,8
  800e98:	103f2a1e 	bne	r2,zero,800b44 <__alt_data_end+0xff800b44>
  800e9c:	00002106 	br	800f24 <_malloc_r+0x628>
  800ea0:	80800204 	addi	r2,r16,8
  800ea4:	84000517 	ldw	r16,20(r16)
  800ea8:	143eb31e 	bne	r2,r16,800978 <__alt_data_end+0xff800978>
  800eac:	18c00084 	addi	r3,r3,2
  800eb0:	003eec06 	br	800a64 <__alt_data_end+0xff800a64>
  800eb4:	8085883a 	add	r2,r16,r2
  800eb8:	10c00117 	ldw	r3,4(r2)
  800ebc:	81000317 	ldw	r4,12(r16)
  800ec0:	81400217 	ldw	r5,8(r16)
  800ec4:	18c00054 	ori	r3,r3,1
  800ec8:	10c00115 	stw	r3,4(r2)
  800ecc:	29000315 	stw	r4,12(r5)
  800ed0:	21400215 	stw	r5,8(r4)
  800ed4:	9009883a 	mov	r4,r18
  800ed8:	080353c0 	call	80353c <__malloc_unlock>
  800edc:	80800204 	addi	r2,r16,8
  800ee0:	003eb306 	br	8009b0 <__alt_data_end+0xff8009b0>
  800ee4:	19c016c4 	addi	r7,r3,91
  800ee8:	39cb883a 	add	r5,r7,r7
  800eec:	003ec706 	br	800a0c <__alt_data_end+0xff800a0c>
  800ef0:	3804d1ba 	srli	r2,r7,6
  800ef4:	11000e04 	addi	r4,r2,56
  800ef8:	210b883a 	add	r5,r4,r4
  800efc:	003fbe06 	br	800df8 <__alt_data_end+0xff800df8>
  800f00:	84ff5d26 	beq	r16,r19,800c78 <__alt_data_end+0xff800c78>
  800f04:	9c000217 	ldw	r16,8(r19)
  800f08:	00bfff04 	movi	r2,-4
  800f0c:	80c00117 	ldw	r3,4(r16)
  800f10:	1886703a 	and	r3,r3,r2
  800f14:	003f9706 	br	800d74 <__alt_data_end+0xff800d74>
  800f18:	52800017 	ldw	r10,0(r10)
  800f1c:	18ffffc4 	addi	r3,r3,-1
  800f20:	50805c1e 	bne	r10,r2,801094 <_malloc_r+0x798>
  800f24:	190000cc 	andi	r4,r3,3
  800f28:	50bffe04 	addi	r2,r10,-8
  800f2c:	203ffa1e 	bne	r4,zero,800f18 <__alt_data_end+0xff800f18>
  800f30:	98800117 	ldw	r2,4(r19)
  800f34:	0146303a 	nor	r3,zero,r5
  800f38:	1884703a 	and	r2,r3,r2
  800f3c:	98800115 	stw	r2,4(r19)
  800f40:	294b883a 	add	r5,r5,r5
  800f44:	117f2e36 	bltu	r2,r5,800c00 <__alt_data_end+0xff800c00>
  800f48:	283f2d26 	beq	r5,zero,800c00 <__alt_data_end+0xff800c00>
  800f4c:	1146703a 	and	r3,r2,r5
  800f50:	1800521e 	bne	r3,zero,80109c <_malloc_r+0x7a0>
  800f54:	6007883a 	mov	r3,r12
  800f58:	294b883a 	add	r5,r5,r5
  800f5c:	1148703a 	and	r4,r2,r5
  800f60:	18c00104 	addi	r3,r3,4
  800f64:	203ffc26 	beq	r4,zero,800f58 <__alt_data_end+0xff800f58>
  800f68:	003ef006 	br	800b2c <__alt_data_end+0xff800b2c>
  800f6c:	00805504 	movi	r2,340
  800f70:	10c01336 	bltu	r2,r3,800fc0 <_malloc_r+0x6c4>
  800f74:	8806d3fa 	srli	r3,r17,15
  800f78:	19c01dc4 	addi	r7,r3,119
  800f7c:	39cb883a 	add	r5,r7,r7
  800f80:	003ea206 	br	800a0c <__alt_data_end+0xff800a0c>
  800f84:	00c40004 	movi	r3,4096
  800f88:	003f4d06 	br	800cc0 <__alt_data_end+0xff800cc0>
  800f8c:	00800044 	movi	r2,1
  800f90:	a0800115 	stw	r2,4(r20)
  800f94:	a021883a 	mov	r16,r20
  800f98:	0007883a 	mov	r3,zero
  800f9c:	003f7506 	br	800d74 <__alt_data_end+0xff800d74>
  800fa0:	200bd0ba 	srai	r5,r4,2
  800fa4:	01800044 	movi	r6,1
  800fa8:	41000117 	ldw	r4,4(r8)
  800fac:	314a983a 	sll	r5,r6,r5
  800fb0:	100d883a 	mov	r6,r2
  800fb4:	2908b03a 	or	r4,r5,r4
  800fb8:	41000115 	stw	r4,4(r8)
  800fbc:	003f9d06 	br	800e34 <__alt_data_end+0xff800e34>
  800fc0:	00815504 	movi	r2,1364
  800fc4:	10c01336 	bltu	r2,r3,801014 <_malloc_r+0x718>
  800fc8:	8806d4ba 	srli	r3,r17,18
  800fcc:	19c01f04 	addi	r7,r3,124
  800fd0:	39cb883a 	add	r5,r7,r7
  800fd4:	003e8d06 	br	800a0c <__alt_data_end+0xff800a0c>
  800fd8:	ad400404 	addi	r21,r21,16
  800fdc:	003f1d06 	br	800c54 <__alt_data_end+0xff800c54>
  800fe0:	01001504 	movi	r4,84
  800fe4:	20801c36 	bltu	r4,r2,801058 <_malloc_r+0x75c>
  800fe8:	3804d33a 	srli	r2,r7,12
  800fec:	11001b84 	addi	r4,r2,110
  800ff0:	210b883a 	add	r5,r4,r4
  800ff4:	003f8006 	br	800df8 <__alt_data_end+0xff800df8>
  800ff8:	3083ffcc 	andi	r2,r6,4095
  800ffc:	103f241e 	bne	r2,zero,800c90 <__alt_data_end+0xff800c90>
  801000:	99000217 	ldw	r4,8(r19)
  801004:	ad85883a 	add	r2,r21,r22
  801008:	10800054 	ori	r2,r2,1
  80100c:	20800115 	stw	r2,4(r4)
  801010:	003f4a06 	br	800d3c <__alt_data_end+0xff800d3c>
  801014:	01403f04 	movi	r5,252
  801018:	01c01f84 	movi	r7,126
  80101c:	003e7b06 	br	800a0c <__alt_data_end+0xff800a0c>
  801020:	00c00044 	movi	r3,1
  801024:	002b883a 	mov	r21,zero
  801028:	003f3006 	br	800cec <__alt_data_end+0xff800cec>
  80102c:	00802034 	movhi	r2,128
  801030:	109d9b04 	addi	r2,r2,30316
  801034:	15000015 	stw	r20,0(r2)
  801038:	003f1b06 	br	800ca8 <__alt_data_end+0xff800ca8>
  80103c:	9009883a 	mov	r4,r18
  801040:	81400204 	addi	r5,r16,8
  801044:	08022880 	call	802288 <_free_r>
  801048:	00802074 	movhi	r2,129
  80104c:	10a0d504 	addi	r2,r2,-31916
  801050:	10c00017 	ldw	r3,0(r2)
  801054:	003f3906 	br	800d3c <__alt_data_end+0xff800d3c>
  801058:	01005504 	movi	r4,340
  80105c:	20800436 	bltu	r4,r2,801070 <_malloc_r+0x774>
  801060:	3804d3fa 	srli	r2,r7,15
  801064:	11001dc4 	addi	r4,r2,119
  801068:	210b883a 	add	r5,r4,r4
  80106c:	003f6206 	br	800df8 <__alt_data_end+0xff800df8>
  801070:	01015504 	movi	r4,1364
  801074:	20800436 	bltu	r4,r2,801088 <_malloc_r+0x78c>
  801078:	3804d4ba 	srli	r2,r7,18
  80107c:	11001f04 	addi	r4,r2,124
  801080:	210b883a 	add	r5,r4,r4
  801084:	003f5c06 	br	800df8 <__alt_data_end+0xff800df8>
  801088:	01403f04 	movi	r5,252
  80108c:	01001f84 	movi	r4,126
  801090:	003f5906 	br	800df8 <__alt_data_end+0xff800df8>
  801094:	98800117 	ldw	r2,4(r19)
  801098:	003fa906 	br	800f40 <__alt_data_end+0xff800f40>
  80109c:	6007883a 	mov	r3,r12
  8010a0:	003ea206 	br	800b2c <__alt_data_end+0xff800b2c>

008010a4 <memchr>:
  8010a4:	208000cc 	andi	r2,r4,3
  8010a8:	280f883a 	mov	r7,r5
  8010ac:	10003526 	beq	r2,zero,801184 <memchr+0xe0>
  8010b0:	30bfffc4 	addi	r2,r6,-1
  8010b4:	30001b26 	beq	r6,zero,801124 <memchr+0x80>
  8010b8:	21800003 	ldbu	r6,0(r4)
  8010bc:	28c03fcc 	andi	r3,r5,255
  8010c0:	30c01a26 	beq	r6,r3,80112c <memchr+0x88>
  8010c4:	180d883a 	mov	r6,r3
  8010c8:	00000406 	br	8010dc <memchr+0x38>
  8010cc:	10001526 	beq	r2,zero,801124 <memchr+0x80>
  8010d0:	20c00003 	ldbu	r3,0(r4)
  8010d4:	10bfffc4 	addi	r2,r2,-1
  8010d8:	19801426 	beq	r3,r6,80112c <memchr+0x88>
  8010dc:	21000044 	addi	r4,r4,1
  8010e0:	20c000cc 	andi	r3,r4,3
  8010e4:	183ff91e 	bne	r3,zero,8010cc <__alt_data_end+0xff8010cc>
  8010e8:	024000c4 	movi	r9,3
  8010ec:	48801136 	bltu	r9,r2,801134 <memchr+0x90>
  8010f0:	10000c26 	beq	r2,zero,801124 <memchr+0x80>
  8010f4:	20c00003 	ldbu	r3,0(r4)
  8010f8:	29403fcc 	andi	r5,r5,255
  8010fc:	19400b26 	beq	r3,r5,80112c <memchr+0x88>
  801100:	20c00044 	addi	r3,r4,1
  801104:	2085883a 	add	r2,r4,r2
  801108:	39803fcc 	andi	r6,r7,255
  80110c:	00000306 	br	80111c <memchr+0x78>
  801110:	18c00044 	addi	r3,r3,1
  801114:	197fffc3 	ldbu	r5,-1(r3)
  801118:	29800426 	beq	r5,r6,80112c <memchr+0x88>
  80111c:	1809883a 	mov	r4,r3
  801120:	18bffb1e 	bne	r3,r2,801110 <__alt_data_end+0xff801110>
  801124:	0005883a 	mov	r2,zero
  801128:	f800283a 	ret
  80112c:	2005883a 	mov	r2,r4
  801130:	f800283a 	ret
  801134:	28c03fcc 	andi	r3,r5,255
  801138:	1810923a 	slli	r8,r3,8
  80113c:	02ffbff4 	movhi	r11,65279
  801140:	02a02074 	movhi	r10,32897
  801144:	40c6b03a 	or	r3,r8,r3
  801148:	1810943a 	slli	r8,r3,16
  80114c:	5affbfc4 	addi	r11,r11,-257
  801150:	52a02004 	addi	r10,r10,-32640
  801154:	40d0b03a 	or	r8,r8,r3
  801158:	20c00017 	ldw	r3,0(r4)
  80115c:	40c6f03a 	xor	r3,r8,r3
  801160:	1acd883a 	add	r6,r3,r11
  801164:	00c6303a 	nor	r3,zero,r3
  801168:	30c6703a 	and	r3,r6,r3
  80116c:	1a86703a 	and	r3,r3,r10
  801170:	183fdf1e 	bne	r3,zero,8010f0 <__alt_data_end+0xff8010f0>
  801174:	10bfff04 	addi	r2,r2,-4
  801178:	21000104 	addi	r4,r4,4
  80117c:	48bff636 	bltu	r9,r2,801158 <__alt_data_end+0xff801158>
  801180:	003fdb06 	br	8010f0 <__alt_data_end+0xff8010f0>
  801184:	3005883a 	mov	r2,r6
  801188:	003fd706 	br	8010e8 <__alt_data_end+0xff8010e8>

0080118c <memcpy>:
  80118c:	deffff04 	addi	sp,sp,-4
  801190:	dc000015 	stw	r16,0(sp)
  801194:	00c003c4 	movi	r3,15
  801198:	2005883a 	mov	r2,r4
  80119c:	1980432e 	bgeu	r3,r6,8012ac <memcpy+0x120>
  8011a0:	2146b03a 	or	r3,r4,r5
  8011a4:	18c000cc 	andi	r3,r3,3
  8011a8:	1800421e 	bne	r3,zero,8012b4 <memcpy+0x128>
  8011ac:	343ffc04 	addi	r16,r6,-16
  8011b0:	8020d13a 	srli	r16,r16,4
  8011b4:	28c00104 	addi	r3,r5,4
  8011b8:	23400104 	addi	r13,r4,4
  8011bc:	801e913a 	slli	r15,r16,4
  8011c0:	2b000204 	addi	r12,r5,8
  8011c4:	22c00204 	addi	r11,r4,8
  8011c8:	7bc00504 	addi	r15,r15,20
  8011cc:	2a800304 	addi	r10,r5,12
  8011d0:	22400304 	addi	r9,r4,12
  8011d4:	2bdf883a 	add	r15,r5,r15
  8011d8:	2811883a 	mov	r8,r5
  8011dc:	200f883a 	mov	r7,r4
  8011e0:	41000017 	ldw	r4,0(r8)
  8011e4:	39c00404 	addi	r7,r7,16
  8011e8:	18c00404 	addi	r3,r3,16
  8011ec:	393ffc15 	stw	r4,-16(r7)
  8011f0:	1bbffc17 	ldw	r14,-16(r3)
  8011f4:	6b400404 	addi	r13,r13,16
  8011f8:	5ac00404 	addi	r11,r11,16
  8011fc:	6bbffc15 	stw	r14,-16(r13)
  801200:	63800017 	ldw	r14,0(r12)
  801204:	4a400404 	addi	r9,r9,16
  801208:	42000404 	addi	r8,r8,16
  80120c:	5bbffc15 	stw	r14,-16(r11)
  801210:	53800017 	ldw	r14,0(r10)
  801214:	63000404 	addi	r12,r12,16
  801218:	52800404 	addi	r10,r10,16
  80121c:	4bbffc15 	stw	r14,-16(r9)
  801220:	1bffef1e 	bne	r3,r15,8011e0 <__alt_data_end+0xff8011e0>
  801224:	81c00044 	addi	r7,r16,1
  801228:	380e913a 	slli	r7,r7,4
  80122c:	310003cc 	andi	r4,r6,15
  801230:	02c000c4 	movi	r11,3
  801234:	11c7883a 	add	r3,r2,r7
  801238:	29cb883a 	add	r5,r5,r7
  80123c:	59001f2e 	bgeu	r11,r4,8012bc <memcpy+0x130>
  801240:	1813883a 	mov	r9,r3
  801244:	2811883a 	mov	r8,r5
  801248:	200f883a 	mov	r7,r4
  80124c:	42800017 	ldw	r10,0(r8)
  801250:	4a400104 	addi	r9,r9,4
  801254:	39ffff04 	addi	r7,r7,-4
  801258:	4abfff15 	stw	r10,-4(r9)
  80125c:	42000104 	addi	r8,r8,4
  801260:	59fffa36 	bltu	r11,r7,80124c <__alt_data_end+0xff80124c>
  801264:	213fff04 	addi	r4,r4,-4
  801268:	2008d0ba 	srli	r4,r4,2
  80126c:	318000cc 	andi	r6,r6,3
  801270:	21000044 	addi	r4,r4,1
  801274:	2109883a 	add	r4,r4,r4
  801278:	2109883a 	add	r4,r4,r4
  80127c:	1907883a 	add	r3,r3,r4
  801280:	290b883a 	add	r5,r5,r4
  801284:	30000626 	beq	r6,zero,8012a0 <memcpy+0x114>
  801288:	198d883a 	add	r6,r3,r6
  80128c:	29c00003 	ldbu	r7,0(r5)
  801290:	18c00044 	addi	r3,r3,1
  801294:	29400044 	addi	r5,r5,1
  801298:	19ffffc5 	stb	r7,-1(r3)
  80129c:	19bffb1e 	bne	r3,r6,80128c <__alt_data_end+0xff80128c>
  8012a0:	dc000017 	ldw	r16,0(sp)
  8012a4:	dec00104 	addi	sp,sp,4
  8012a8:	f800283a 	ret
  8012ac:	2007883a 	mov	r3,r4
  8012b0:	003ff406 	br	801284 <__alt_data_end+0xff801284>
  8012b4:	2007883a 	mov	r3,r4
  8012b8:	003ff306 	br	801288 <__alt_data_end+0xff801288>
  8012bc:	200d883a 	mov	r6,r4
  8012c0:	003ff006 	br	801284 <__alt_data_end+0xff801284>

008012c4 <memmove>:
  8012c4:	2005883a 	mov	r2,r4
  8012c8:	29000b2e 	bgeu	r5,r4,8012f8 <memmove+0x34>
  8012cc:	298f883a 	add	r7,r5,r6
  8012d0:	21c0092e 	bgeu	r4,r7,8012f8 <memmove+0x34>
  8012d4:	2187883a 	add	r3,r4,r6
  8012d8:	198bc83a 	sub	r5,r3,r6
  8012dc:	30004b26 	beq	r6,zero,80140c <memmove+0x148>
  8012e0:	39ffffc4 	addi	r7,r7,-1
  8012e4:	39000003 	ldbu	r4,0(r7)
  8012e8:	18ffffc4 	addi	r3,r3,-1
  8012ec:	19000005 	stb	r4,0(r3)
  8012f0:	197ffb1e 	bne	r3,r5,8012e0 <__alt_data_end+0xff8012e0>
  8012f4:	f800283a 	ret
  8012f8:	00c003c4 	movi	r3,15
  8012fc:	1980412e 	bgeu	r3,r6,801404 <memmove+0x140>
  801300:	1146b03a 	or	r3,r2,r5
  801304:	18c000cc 	andi	r3,r3,3
  801308:	1800411e 	bne	r3,zero,801410 <memmove+0x14c>
  80130c:	33fffc04 	addi	r15,r6,-16
  801310:	781ed13a 	srli	r15,r15,4
  801314:	28c00104 	addi	r3,r5,4
  801318:	13400104 	addi	r13,r2,4
  80131c:	781c913a 	slli	r14,r15,4
  801320:	2b000204 	addi	r12,r5,8
  801324:	12c00204 	addi	r11,r2,8
  801328:	73800504 	addi	r14,r14,20
  80132c:	2a800304 	addi	r10,r5,12
  801330:	12400304 	addi	r9,r2,12
  801334:	2b9d883a 	add	r14,r5,r14
  801338:	2811883a 	mov	r8,r5
  80133c:	100f883a 	mov	r7,r2
  801340:	41000017 	ldw	r4,0(r8)
  801344:	39c00404 	addi	r7,r7,16
  801348:	18c00404 	addi	r3,r3,16
  80134c:	393ffc15 	stw	r4,-16(r7)
  801350:	193ffc17 	ldw	r4,-16(r3)
  801354:	6b400404 	addi	r13,r13,16
  801358:	5ac00404 	addi	r11,r11,16
  80135c:	693ffc15 	stw	r4,-16(r13)
  801360:	61000017 	ldw	r4,0(r12)
  801364:	4a400404 	addi	r9,r9,16
  801368:	42000404 	addi	r8,r8,16
  80136c:	593ffc15 	stw	r4,-16(r11)
  801370:	51000017 	ldw	r4,0(r10)
  801374:	63000404 	addi	r12,r12,16
  801378:	52800404 	addi	r10,r10,16
  80137c:	493ffc15 	stw	r4,-16(r9)
  801380:	1bbfef1e 	bne	r3,r14,801340 <__alt_data_end+0xff801340>
  801384:	79000044 	addi	r4,r15,1
  801388:	2008913a 	slli	r4,r4,4
  80138c:	328003cc 	andi	r10,r6,15
  801390:	02c000c4 	movi	r11,3
  801394:	1107883a 	add	r3,r2,r4
  801398:	290b883a 	add	r5,r5,r4
  80139c:	5a801e2e 	bgeu	r11,r10,801418 <memmove+0x154>
  8013a0:	1813883a 	mov	r9,r3
  8013a4:	2811883a 	mov	r8,r5
  8013a8:	500f883a 	mov	r7,r10
  8013ac:	41000017 	ldw	r4,0(r8)
  8013b0:	4a400104 	addi	r9,r9,4
  8013b4:	39ffff04 	addi	r7,r7,-4
  8013b8:	493fff15 	stw	r4,-4(r9)
  8013bc:	42000104 	addi	r8,r8,4
  8013c0:	59fffa36 	bltu	r11,r7,8013ac <__alt_data_end+0xff8013ac>
  8013c4:	513fff04 	addi	r4,r10,-4
  8013c8:	2008d0ba 	srli	r4,r4,2
  8013cc:	318000cc 	andi	r6,r6,3
  8013d0:	21000044 	addi	r4,r4,1
  8013d4:	2109883a 	add	r4,r4,r4
  8013d8:	2109883a 	add	r4,r4,r4
  8013dc:	1907883a 	add	r3,r3,r4
  8013e0:	290b883a 	add	r5,r5,r4
  8013e4:	30000926 	beq	r6,zero,80140c <memmove+0x148>
  8013e8:	198d883a 	add	r6,r3,r6
  8013ec:	29c00003 	ldbu	r7,0(r5)
  8013f0:	18c00044 	addi	r3,r3,1
  8013f4:	29400044 	addi	r5,r5,1
  8013f8:	19ffffc5 	stb	r7,-1(r3)
  8013fc:	19bffb1e 	bne	r3,r6,8013ec <__alt_data_end+0xff8013ec>
  801400:	f800283a 	ret
  801404:	1007883a 	mov	r3,r2
  801408:	003ff606 	br	8013e4 <__alt_data_end+0xff8013e4>
  80140c:	f800283a 	ret
  801410:	1007883a 	mov	r3,r2
  801414:	003ff406 	br	8013e8 <__alt_data_end+0xff8013e8>
  801418:	500d883a 	mov	r6,r10
  80141c:	003ff106 	br	8013e4 <__alt_data_end+0xff8013e4>

00801420 <_realloc_r>:
  801420:	defff604 	addi	sp,sp,-40
  801424:	dd000415 	stw	r20,16(sp)
  801428:	dc400115 	stw	r17,4(sp)
  80142c:	dfc00915 	stw	ra,36(sp)
  801430:	df000815 	stw	fp,32(sp)
  801434:	ddc00715 	stw	r23,28(sp)
  801438:	dd800615 	stw	r22,24(sp)
  80143c:	dd400515 	stw	r21,20(sp)
  801440:	dcc00315 	stw	r19,12(sp)
  801444:	dc800215 	stw	r18,8(sp)
  801448:	dc000015 	stw	r16,0(sp)
  80144c:	2829883a 	mov	r20,r5
  801450:	3023883a 	mov	r17,r6
  801454:	2800ad26 	beq	r5,zero,80170c <_realloc_r+0x2ec>
  801458:	2025883a 	mov	r18,r4
  80145c:	080351c0 	call	80351c <__malloc_lock>
  801460:	a0ffff17 	ldw	r3,-4(r20)
  801464:	043fff04 	movi	r16,-4
  801468:	890002c4 	addi	r4,r17,11
  80146c:	01c00584 	movi	r7,22
  801470:	a57ffe04 	addi	r21,r20,-8
  801474:	1c20703a 	and	r16,r3,r16
  801478:	39001d2e 	bgeu	r7,r4,8014f0 <_realloc_r+0xd0>
  80147c:	05bffe04 	movi	r22,-8
  801480:	25ac703a 	and	r22,r4,r22
  801484:	b00f883a 	mov	r7,r22
  801488:	b0006516 	blt	r22,zero,801620 <_realloc_r+0x200>
  80148c:	b4406436 	bltu	r22,r17,801620 <_realloc_r+0x200>
  801490:	81c01a0e 	bge	r16,r7,8014fc <_realloc_r+0xdc>
  801494:	07002034 	movhi	fp,128
  801498:	e71b9104 	addi	fp,fp,28228
  80149c:	e1400217 	ldw	r5,8(fp)
  8014a0:	ac11883a 	add	r8,r21,r16
  8014a4:	2a006226 	beq	r5,r8,801630 <_realloc_r+0x210>
  8014a8:	41800117 	ldw	r6,4(r8)
  8014ac:	027fff84 	movi	r9,-2
  8014b0:	3252703a 	and	r9,r6,r9
  8014b4:	4253883a 	add	r9,r8,r9
  8014b8:	49000117 	ldw	r4,4(r9)
  8014bc:	2100004c 	andi	r4,r4,1
  8014c0:	2000281e 	bne	r4,zero,801564 <_realloc_r+0x144>
  8014c4:	00bfff04 	movi	r2,-4
  8014c8:	3084703a 	and	r2,r6,r2
  8014cc:	1409883a 	add	r4,r2,r16
  8014d0:	21c05e16 	blt	r4,r7,80164c <_realloc_r+0x22c>
  8014d4:	40800317 	ldw	r2,12(r8)
  8014d8:	41400217 	ldw	r5,8(r8)
  8014dc:	a023883a 	mov	r17,r20
  8014e0:	2021883a 	mov	r16,r4
  8014e4:	28800315 	stw	r2,12(r5)
  8014e8:	11400215 	stw	r5,8(r2)
  8014ec:	00000406 	br	801500 <_realloc_r+0xe0>
  8014f0:	01c00404 	movi	r7,16
  8014f4:	382d883a 	mov	r22,r7
  8014f8:	003fe406 	br	80148c <__alt_data_end+0xff80148c>
  8014fc:	a023883a 	mov	r17,r20
  801500:	858fc83a 	sub	r7,r16,r22
  801504:	008003c4 	movi	r2,15
  801508:	18c0004c 	andi	r3,r3,1
  80150c:	11c07236 	bltu	r2,r7,8016d8 <_realloc_r+0x2b8>
  801510:	1c06b03a 	or	r3,r3,r16
  801514:	a8c00115 	stw	r3,4(r21)
  801518:	ac21883a 	add	r16,r21,r16
  80151c:	80800117 	ldw	r2,4(r16)
  801520:	10800054 	ori	r2,r2,1
  801524:	80800115 	stw	r2,4(r16)
  801528:	9009883a 	mov	r4,r18
  80152c:	080353c0 	call	80353c <__malloc_unlock>
  801530:	8805883a 	mov	r2,r17
  801534:	dfc00917 	ldw	ra,36(sp)
  801538:	df000817 	ldw	fp,32(sp)
  80153c:	ddc00717 	ldw	r23,28(sp)
  801540:	dd800617 	ldw	r22,24(sp)
  801544:	dd400517 	ldw	r21,20(sp)
  801548:	dd000417 	ldw	r20,16(sp)
  80154c:	dcc00317 	ldw	r19,12(sp)
  801550:	dc800217 	ldw	r18,8(sp)
  801554:	dc400117 	ldw	r17,4(sp)
  801558:	dc000017 	ldw	r16,0(sp)
  80155c:	dec00a04 	addi	sp,sp,40
  801560:	f800283a 	ret
  801564:	18c0004c 	andi	r3,r3,1
  801568:	1800081e 	bne	r3,zero,80158c <_realloc_r+0x16c>
  80156c:	a4fffe17 	ldw	r19,-8(r20)
  801570:	00bfff04 	movi	r2,-4
  801574:	ace7c83a 	sub	r19,r21,r19
  801578:	98c00117 	ldw	r3,4(r19)
  80157c:	1886703a 	and	r3,r3,r2
  801580:	98000226 	beq	r19,zero,80158c <_realloc_r+0x16c>
  801584:	1c2f883a 	add	r23,r3,r16
  801588:	b9c06d0e 	bge	r23,r7,801740 <_realloc_r+0x320>
  80158c:	880b883a 	mov	r5,r17
  801590:	9009883a 	mov	r4,r18
  801594:	08008fc0 	call	8008fc <_malloc_r>
  801598:	1023883a 	mov	r17,r2
  80159c:	1000ef26 	beq	r2,zero,80195c <_realloc_r+0x53c>
  8015a0:	a0ffff17 	ldw	r3,-4(r20)
  8015a4:	113ffe04 	addi	r4,r2,-8
  8015a8:	00bfff84 	movi	r2,-2
  8015ac:	1884703a 	and	r2,r3,r2
  8015b0:	a885883a 	add	r2,r21,r2
  8015b4:	2080bf26 	beq	r4,r2,8018b4 <_realloc_r+0x494>
  8015b8:	81bfff04 	addi	r6,r16,-4
  8015bc:	00800904 	movi	r2,36
  8015c0:	11808936 	bltu	r2,r6,8017e8 <_realloc_r+0x3c8>
  8015c4:	00c004c4 	movi	r3,19
  8015c8:	19806c2e 	bgeu	r3,r6,80177c <_realloc_r+0x35c>
  8015cc:	a0c00017 	ldw	r3,0(r20)
  8015d0:	88c00015 	stw	r3,0(r17)
  8015d4:	a0c00117 	ldw	r3,4(r20)
  8015d8:	88c00115 	stw	r3,4(r17)
  8015dc:	00c006c4 	movi	r3,27
  8015e0:	1980ac36 	bltu	r3,r6,801894 <_realloc_r+0x474>
  8015e4:	88800204 	addi	r2,r17,8
  8015e8:	a0c00204 	addi	r3,r20,8
  8015ec:	19000017 	ldw	r4,0(r3)
  8015f0:	11000015 	stw	r4,0(r2)
  8015f4:	19000117 	ldw	r4,4(r3)
  8015f8:	11000115 	stw	r4,4(r2)
  8015fc:	18c00217 	ldw	r3,8(r3)
  801600:	10c00215 	stw	r3,8(r2)
  801604:	a00b883a 	mov	r5,r20
  801608:	9009883a 	mov	r4,r18
  80160c:	08022880 	call	802288 <_free_r>
  801610:	9009883a 	mov	r4,r18
  801614:	080353c0 	call	80353c <__malloc_unlock>
  801618:	8805883a 	mov	r2,r17
  80161c:	003fc506 	br	801534 <__alt_data_end+0xff801534>
  801620:	00800304 	movi	r2,12
  801624:	90800015 	stw	r2,0(r18)
  801628:	0005883a 	mov	r2,zero
  80162c:	003fc106 	br	801534 <__alt_data_end+0xff801534>
  801630:	29800117 	ldw	r6,4(r5)
  801634:	00bfff04 	movi	r2,-4
  801638:	b1000404 	addi	r4,r22,16
  80163c:	3084703a 	and	r2,r6,r2
  801640:	140d883a 	add	r6,r2,r16
  801644:	31005b0e 	bge	r6,r4,8017b4 <_realloc_r+0x394>
  801648:	2811883a 	mov	r8,r5
  80164c:	18c0004c 	andi	r3,r3,1
  801650:	183fce1e 	bne	r3,zero,80158c <__alt_data_end+0xff80158c>
  801654:	a4fffe17 	ldw	r19,-8(r20)
  801658:	00ffff04 	movi	r3,-4
  80165c:	ace7c83a 	sub	r19,r21,r19
  801660:	99000117 	ldw	r4,4(r19)
  801664:	20c6703a 	and	r3,r4,r3
  801668:	403fc526 	beq	r8,zero,801580 <__alt_data_end+0xff801580>
  80166c:	1c2f883a 	add	r23,r3,r16
  801670:	b8af883a 	add	r23,r23,r2
  801674:	41406026 	beq	r8,r5,8017f8 <_realloc_r+0x3d8>
  801678:	b9ffc116 	blt	r23,r7,801580 <__alt_data_end+0xff801580>
  80167c:	40c00217 	ldw	r3,8(r8)
  801680:	40800317 	ldw	r2,12(r8)
  801684:	81bfff04 	addi	r6,r16,-4
  801688:	01000904 	movi	r4,36
  80168c:	18800315 	stw	r2,12(r3)
  801690:	10c00215 	stw	r3,8(r2)
  801694:	99400217 	ldw	r5,8(r19)
  801698:	98c00317 	ldw	r3,12(r19)
  80169c:	9c400204 	addi	r17,r19,8
  8016a0:	28c00315 	stw	r3,12(r5)
  8016a4:	19400215 	stw	r5,8(r3)
  8016a8:	21802d36 	bltu	r4,r6,801760 <_realloc_r+0x340>
  8016ac:	008004c4 	movi	r2,19
  8016b0:	1180352e 	bgeu	r2,r6,801788 <_realloc_r+0x368>
  8016b4:	a0800017 	ldw	r2,0(r20)
  8016b8:	98800215 	stw	r2,8(r19)
  8016bc:	a0800117 	ldw	r2,4(r20)
  8016c0:	98800315 	stw	r2,12(r19)
  8016c4:	008006c4 	movi	r2,27
  8016c8:	11808036 	bltu	r2,r6,8018cc <_realloc_r+0x4ac>
  8016cc:	98c00404 	addi	r3,r19,16
  8016d0:	a5000204 	addi	r20,r20,8
  8016d4:	00002d06 	br	80178c <_realloc_r+0x36c>
  8016d8:	1d86b03a 	or	r3,r3,r22
  8016dc:	ad8b883a 	add	r5,r21,r22
  8016e0:	a8c00115 	stw	r3,4(r21)
  8016e4:	38800054 	ori	r2,r7,1
  8016e8:	28800115 	stw	r2,4(r5)
  8016ec:	29cf883a 	add	r7,r5,r7
  8016f0:	38800117 	ldw	r2,4(r7)
  8016f4:	9009883a 	mov	r4,r18
  8016f8:	29400204 	addi	r5,r5,8
  8016fc:	10800054 	ori	r2,r2,1
  801700:	38800115 	stw	r2,4(r7)
  801704:	08022880 	call	802288 <_free_r>
  801708:	003f8706 	br	801528 <__alt_data_end+0xff801528>
  80170c:	300b883a 	mov	r5,r6
  801710:	dfc00917 	ldw	ra,36(sp)
  801714:	df000817 	ldw	fp,32(sp)
  801718:	ddc00717 	ldw	r23,28(sp)
  80171c:	dd800617 	ldw	r22,24(sp)
  801720:	dd400517 	ldw	r21,20(sp)
  801724:	dd000417 	ldw	r20,16(sp)
  801728:	dcc00317 	ldw	r19,12(sp)
  80172c:	dc800217 	ldw	r18,8(sp)
  801730:	dc400117 	ldw	r17,4(sp)
  801734:	dc000017 	ldw	r16,0(sp)
  801738:	dec00a04 	addi	sp,sp,40
  80173c:	08008fc1 	jmpi	8008fc <_malloc_r>
  801740:	98800317 	ldw	r2,12(r19)
  801744:	98c00217 	ldw	r3,8(r19)
  801748:	81bfff04 	addi	r6,r16,-4
  80174c:	01000904 	movi	r4,36
  801750:	18800315 	stw	r2,12(r3)
  801754:	10c00215 	stw	r3,8(r2)
  801758:	9c400204 	addi	r17,r19,8
  80175c:	21bfd32e 	bgeu	r4,r6,8016ac <__alt_data_end+0xff8016ac>
  801760:	8809883a 	mov	r4,r17
  801764:	a00b883a 	mov	r5,r20
  801768:	08012c40 	call	8012c4 <memmove>
  80176c:	98c00117 	ldw	r3,4(r19)
  801770:	b821883a 	mov	r16,r23
  801774:	982b883a 	mov	r21,r19
  801778:	003f6106 	br	801500 <__alt_data_end+0xff801500>
  80177c:	8805883a 	mov	r2,r17
  801780:	a007883a 	mov	r3,r20
  801784:	003f9906 	br	8015ec <__alt_data_end+0xff8015ec>
  801788:	8807883a 	mov	r3,r17
  80178c:	a0800017 	ldw	r2,0(r20)
  801790:	b821883a 	mov	r16,r23
  801794:	982b883a 	mov	r21,r19
  801798:	18800015 	stw	r2,0(r3)
  80179c:	a0800117 	ldw	r2,4(r20)
  8017a0:	18800115 	stw	r2,4(r3)
  8017a4:	a0800217 	ldw	r2,8(r20)
  8017a8:	18800215 	stw	r2,8(r3)
  8017ac:	98c00117 	ldw	r3,4(r19)
  8017b0:	003f5306 	br	801500 <__alt_data_end+0xff801500>
  8017b4:	adab883a 	add	r21,r21,r22
  8017b8:	3585c83a 	sub	r2,r6,r22
  8017bc:	e5400215 	stw	r21,8(fp)
  8017c0:	10800054 	ori	r2,r2,1
  8017c4:	a8800115 	stw	r2,4(r21)
  8017c8:	a0bfff17 	ldw	r2,-4(r20)
  8017cc:	9009883a 	mov	r4,r18
  8017d0:	1080004c 	andi	r2,r2,1
  8017d4:	b0acb03a 	or	r22,r22,r2
  8017d8:	a5bfff15 	stw	r22,-4(r20)
  8017dc:	080353c0 	call	80353c <__malloc_unlock>
  8017e0:	a005883a 	mov	r2,r20
  8017e4:	003f5306 	br	801534 <__alt_data_end+0xff801534>
  8017e8:	8809883a 	mov	r4,r17
  8017ec:	a00b883a 	mov	r5,r20
  8017f0:	08012c40 	call	8012c4 <memmove>
  8017f4:	003f8306 	br	801604 <__alt_data_end+0xff801604>
  8017f8:	b0800404 	addi	r2,r22,16
  8017fc:	b8bf6016 	blt	r23,r2,801580 <__alt_data_end+0xff801580>
  801800:	98800317 	ldw	r2,12(r19)
  801804:	98c00217 	ldw	r3,8(r19)
  801808:	81bfff04 	addi	r6,r16,-4
  80180c:	01000904 	movi	r4,36
  801810:	18800315 	stw	r2,12(r3)
  801814:	10c00215 	stw	r3,8(r2)
  801818:	9c400204 	addi	r17,r19,8
  80181c:	21804336 	bltu	r4,r6,80192c <_realloc_r+0x50c>
  801820:	008004c4 	movi	r2,19
  801824:	11803f2e 	bgeu	r2,r6,801924 <_realloc_r+0x504>
  801828:	a0800017 	ldw	r2,0(r20)
  80182c:	98800215 	stw	r2,8(r19)
  801830:	a0800117 	ldw	r2,4(r20)
  801834:	98800315 	stw	r2,12(r19)
  801838:	008006c4 	movi	r2,27
  80183c:	11803f36 	bltu	r2,r6,80193c <_realloc_r+0x51c>
  801840:	98800404 	addi	r2,r19,16
  801844:	a5000204 	addi	r20,r20,8
  801848:	a0c00017 	ldw	r3,0(r20)
  80184c:	10c00015 	stw	r3,0(r2)
  801850:	a0c00117 	ldw	r3,4(r20)
  801854:	10c00115 	stw	r3,4(r2)
  801858:	a0c00217 	ldw	r3,8(r20)
  80185c:	10c00215 	stw	r3,8(r2)
  801860:	9d87883a 	add	r3,r19,r22
  801864:	bd85c83a 	sub	r2,r23,r22
  801868:	e0c00215 	stw	r3,8(fp)
  80186c:	10800054 	ori	r2,r2,1
  801870:	18800115 	stw	r2,4(r3)
  801874:	98800117 	ldw	r2,4(r19)
  801878:	9009883a 	mov	r4,r18
  80187c:	1080004c 	andi	r2,r2,1
  801880:	b0acb03a 	or	r22,r22,r2
  801884:	9d800115 	stw	r22,4(r19)
  801888:	080353c0 	call	80353c <__malloc_unlock>
  80188c:	8805883a 	mov	r2,r17
  801890:	003f2806 	br	801534 <__alt_data_end+0xff801534>
  801894:	a0c00217 	ldw	r3,8(r20)
  801898:	88c00215 	stw	r3,8(r17)
  80189c:	a0c00317 	ldw	r3,12(r20)
  8018a0:	88c00315 	stw	r3,12(r17)
  8018a4:	30801126 	beq	r6,r2,8018ec <_realloc_r+0x4cc>
  8018a8:	88800404 	addi	r2,r17,16
  8018ac:	a0c00404 	addi	r3,r20,16
  8018b0:	003f4e06 	br	8015ec <__alt_data_end+0xff8015ec>
  8018b4:	893fff17 	ldw	r4,-4(r17)
  8018b8:	00bfff04 	movi	r2,-4
  8018bc:	a023883a 	mov	r17,r20
  8018c0:	2084703a 	and	r2,r4,r2
  8018c4:	80a1883a 	add	r16,r16,r2
  8018c8:	003f0d06 	br	801500 <__alt_data_end+0xff801500>
  8018cc:	a0800217 	ldw	r2,8(r20)
  8018d0:	98800415 	stw	r2,16(r19)
  8018d4:	a0800317 	ldw	r2,12(r20)
  8018d8:	98800515 	stw	r2,20(r19)
  8018dc:	31000a26 	beq	r6,r4,801908 <_realloc_r+0x4e8>
  8018e0:	98c00604 	addi	r3,r19,24
  8018e4:	a5000404 	addi	r20,r20,16
  8018e8:	003fa806 	br	80178c <__alt_data_end+0xff80178c>
  8018ec:	a1000417 	ldw	r4,16(r20)
  8018f0:	88800604 	addi	r2,r17,24
  8018f4:	a0c00604 	addi	r3,r20,24
  8018f8:	89000415 	stw	r4,16(r17)
  8018fc:	a1000517 	ldw	r4,20(r20)
  801900:	89000515 	stw	r4,20(r17)
  801904:	003f3906 	br	8015ec <__alt_data_end+0xff8015ec>
  801908:	a0800417 	ldw	r2,16(r20)
  80190c:	a5000604 	addi	r20,r20,24
  801910:	98c00804 	addi	r3,r19,32
  801914:	98800615 	stw	r2,24(r19)
  801918:	a0bfff17 	ldw	r2,-4(r20)
  80191c:	98800715 	stw	r2,28(r19)
  801920:	003f9a06 	br	80178c <__alt_data_end+0xff80178c>
  801924:	8805883a 	mov	r2,r17
  801928:	003fc706 	br	801848 <__alt_data_end+0xff801848>
  80192c:	8809883a 	mov	r4,r17
  801930:	a00b883a 	mov	r5,r20
  801934:	08012c40 	call	8012c4 <memmove>
  801938:	003fc906 	br	801860 <__alt_data_end+0xff801860>
  80193c:	a0800217 	ldw	r2,8(r20)
  801940:	98800415 	stw	r2,16(r19)
  801944:	a0800317 	ldw	r2,12(r20)
  801948:	98800515 	stw	r2,20(r19)
  80194c:	31000726 	beq	r6,r4,80196c <_realloc_r+0x54c>
  801950:	98800604 	addi	r2,r19,24
  801954:	a5000404 	addi	r20,r20,16
  801958:	003fbb06 	br	801848 <__alt_data_end+0xff801848>
  80195c:	9009883a 	mov	r4,r18
  801960:	080353c0 	call	80353c <__malloc_unlock>
  801964:	0005883a 	mov	r2,zero
  801968:	003ef206 	br	801534 <__alt_data_end+0xff801534>
  80196c:	a0c00417 	ldw	r3,16(r20)
  801970:	a5000604 	addi	r20,r20,24
  801974:	98800804 	addi	r2,r19,32
  801978:	98c00615 	stw	r3,24(r19)
  80197c:	a0ffff17 	ldw	r3,-4(r20)
  801980:	98c00715 	stw	r3,28(r19)
  801984:	003fb006 	br	801848 <__alt_data_end+0xff801848>

00801988 <_sbrk_r>:
  801988:	defffd04 	addi	sp,sp,-12
  80198c:	dc000015 	stw	r16,0(sp)
  801990:	04002074 	movhi	r16,129
  801994:	dc400115 	stw	r17,4(sp)
  801998:	8420cd04 	addi	r16,r16,-31948
  80199c:	2023883a 	mov	r17,r4
  8019a0:	2809883a 	mov	r4,r5
  8019a4:	dfc00215 	stw	ra,8(sp)
  8019a8:	80000015 	stw	zero,0(r16)
  8019ac:	08037080 	call	803708 <sbrk>
  8019b0:	00ffffc4 	movi	r3,-1
  8019b4:	10c00526 	beq	r2,r3,8019cc <_sbrk_r+0x44>
  8019b8:	dfc00217 	ldw	ra,8(sp)
  8019bc:	dc400117 	ldw	r17,4(sp)
  8019c0:	dc000017 	ldw	r16,0(sp)
  8019c4:	dec00304 	addi	sp,sp,12
  8019c8:	f800283a 	ret
  8019cc:	80c00017 	ldw	r3,0(r16)
  8019d0:	183ff926 	beq	r3,zero,8019b8 <__alt_data_end+0xff8019b8>
  8019d4:	88c00015 	stw	r3,0(r17)
  8019d8:	003ff706 	br	8019b8 <__alt_data_end+0xff8019b8>

008019dc <__swsetup_r>:
  8019dc:	00802034 	movhi	r2,128
  8019e0:	defffd04 	addi	sp,sp,-12
  8019e4:	109d9a04 	addi	r2,r2,30312
  8019e8:	dc400115 	stw	r17,4(sp)
  8019ec:	2023883a 	mov	r17,r4
  8019f0:	11000017 	ldw	r4,0(r2)
  8019f4:	dc000015 	stw	r16,0(sp)
  8019f8:	dfc00215 	stw	ra,8(sp)
  8019fc:	2821883a 	mov	r16,r5
  801a00:	20000226 	beq	r4,zero,801a0c <__swsetup_r+0x30>
  801a04:	20c00e17 	ldw	r3,56(r4)
  801a08:	18003126 	beq	r3,zero,801ad0 <__swsetup_r+0xf4>
  801a0c:	8080030b 	ldhu	r2,12(r16)
  801a10:	10c0020c 	andi	r3,r2,8
  801a14:	100d883a 	mov	r6,r2
  801a18:	18000f26 	beq	r3,zero,801a58 <__swsetup_r+0x7c>
  801a1c:	80c00417 	ldw	r3,16(r16)
  801a20:	18001526 	beq	r3,zero,801a78 <__swsetup_r+0x9c>
  801a24:	1100004c 	andi	r4,r2,1
  801a28:	20001c1e 	bne	r4,zero,801a9c <__swsetup_r+0xc0>
  801a2c:	1080008c 	andi	r2,r2,2
  801a30:	1000291e 	bne	r2,zero,801ad8 <__swsetup_r+0xfc>
  801a34:	80800517 	ldw	r2,20(r16)
  801a38:	80800215 	stw	r2,8(r16)
  801a3c:	18001c26 	beq	r3,zero,801ab0 <__swsetup_r+0xd4>
  801a40:	0005883a 	mov	r2,zero
  801a44:	dfc00217 	ldw	ra,8(sp)
  801a48:	dc400117 	ldw	r17,4(sp)
  801a4c:	dc000017 	ldw	r16,0(sp)
  801a50:	dec00304 	addi	sp,sp,12
  801a54:	f800283a 	ret
  801a58:	3080040c 	andi	r2,r6,16
  801a5c:	10002e26 	beq	r2,zero,801b18 <__swsetup_r+0x13c>
  801a60:	3080010c 	andi	r2,r6,4
  801a64:	10001e1e 	bne	r2,zero,801ae0 <__swsetup_r+0x104>
  801a68:	80c00417 	ldw	r3,16(r16)
  801a6c:	30800214 	ori	r2,r6,8
  801a70:	8080030d 	sth	r2,12(r16)
  801a74:	183feb1e 	bne	r3,zero,801a24 <__alt_data_end+0xff801a24>
  801a78:	1140a00c 	andi	r5,r2,640
  801a7c:	01008004 	movi	r4,512
  801a80:	293fe826 	beq	r5,r4,801a24 <__alt_data_end+0xff801a24>
  801a84:	8809883a 	mov	r4,r17
  801a88:	800b883a 	mov	r5,r16
  801a8c:	08027000 	call	802700 <__smakebuf_r>
  801a90:	8080030b 	ldhu	r2,12(r16)
  801a94:	80c00417 	ldw	r3,16(r16)
  801a98:	003fe206 	br	801a24 <__alt_data_end+0xff801a24>
  801a9c:	80800517 	ldw	r2,20(r16)
  801aa0:	80000215 	stw	zero,8(r16)
  801aa4:	0085c83a 	sub	r2,zero,r2
  801aa8:	80800615 	stw	r2,24(r16)
  801aac:	183fe41e 	bne	r3,zero,801a40 <__alt_data_end+0xff801a40>
  801ab0:	80c0030b 	ldhu	r3,12(r16)
  801ab4:	0005883a 	mov	r2,zero
  801ab8:	1900200c 	andi	r4,r3,128
  801abc:	203fe126 	beq	r4,zero,801a44 <__alt_data_end+0xff801a44>
  801ac0:	18c01014 	ori	r3,r3,64
  801ac4:	80c0030d 	sth	r3,12(r16)
  801ac8:	00bfffc4 	movi	r2,-1
  801acc:	003fdd06 	br	801a44 <__alt_data_end+0xff801a44>
  801ad0:	08021140 	call	802114 <__sinit>
  801ad4:	003fcd06 	br	801a0c <__alt_data_end+0xff801a0c>
  801ad8:	0005883a 	mov	r2,zero
  801adc:	003fd606 	br	801a38 <__alt_data_end+0xff801a38>
  801ae0:	81400c17 	ldw	r5,48(r16)
  801ae4:	28000626 	beq	r5,zero,801b00 <__swsetup_r+0x124>
  801ae8:	80801004 	addi	r2,r16,64
  801aec:	28800326 	beq	r5,r2,801afc <__swsetup_r+0x120>
  801af0:	8809883a 	mov	r4,r17
  801af4:	08022880 	call	802288 <_free_r>
  801af8:	8180030b 	ldhu	r6,12(r16)
  801afc:	80000c15 	stw	zero,48(r16)
  801b00:	80c00417 	ldw	r3,16(r16)
  801b04:	00bff6c4 	movi	r2,-37
  801b08:	118c703a 	and	r6,r2,r6
  801b0c:	80000115 	stw	zero,4(r16)
  801b10:	80c00015 	stw	r3,0(r16)
  801b14:	003fd506 	br	801a6c <__alt_data_end+0xff801a6c>
  801b18:	00800244 	movi	r2,9
  801b1c:	88800015 	stw	r2,0(r17)
  801b20:	30801014 	ori	r2,r6,64
  801b24:	8080030d 	sth	r2,12(r16)
  801b28:	00bfffc4 	movi	r2,-1
  801b2c:	003fc506 	br	801a44 <__alt_data_end+0xff801a44>

00801b30 <__sflush_r>:
  801b30:	2880030b 	ldhu	r2,12(r5)
  801b34:	defffb04 	addi	sp,sp,-20
  801b38:	dcc00315 	stw	r19,12(sp)
  801b3c:	dc400115 	stw	r17,4(sp)
  801b40:	dfc00415 	stw	ra,16(sp)
  801b44:	dc800215 	stw	r18,8(sp)
  801b48:	dc000015 	stw	r16,0(sp)
  801b4c:	10c0020c 	andi	r3,r2,8
  801b50:	2823883a 	mov	r17,r5
  801b54:	2027883a 	mov	r19,r4
  801b58:	1800311e 	bne	r3,zero,801c20 <__sflush_r+0xf0>
  801b5c:	28c00117 	ldw	r3,4(r5)
  801b60:	10820014 	ori	r2,r2,2048
  801b64:	2880030d 	sth	r2,12(r5)
  801b68:	00c04b0e 	bge	zero,r3,801c98 <__sflush_r+0x168>
  801b6c:	8a000a17 	ldw	r8,40(r17)
  801b70:	40002326 	beq	r8,zero,801c00 <__sflush_r+0xd0>
  801b74:	9c000017 	ldw	r16,0(r19)
  801b78:	10c4000c 	andi	r3,r2,4096
  801b7c:	98000015 	stw	zero,0(r19)
  801b80:	18004826 	beq	r3,zero,801ca4 <__sflush_r+0x174>
  801b84:	89801417 	ldw	r6,80(r17)
  801b88:	10c0010c 	andi	r3,r2,4
  801b8c:	18000626 	beq	r3,zero,801ba8 <__sflush_r+0x78>
  801b90:	88c00117 	ldw	r3,4(r17)
  801b94:	88800c17 	ldw	r2,48(r17)
  801b98:	30cdc83a 	sub	r6,r6,r3
  801b9c:	10000226 	beq	r2,zero,801ba8 <__sflush_r+0x78>
  801ba0:	88800f17 	ldw	r2,60(r17)
  801ba4:	308dc83a 	sub	r6,r6,r2
  801ba8:	89400717 	ldw	r5,28(r17)
  801bac:	9809883a 	mov	r4,r19
  801bb0:	000f883a 	mov	r7,zero
  801bb4:	403ee83a 	callr	r8
  801bb8:	00ffffc4 	movi	r3,-1
  801bbc:	10c04426 	beq	r2,r3,801cd0 <__sflush_r+0x1a0>
  801bc0:	88c0030b 	ldhu	r3,12(r17)
  801bc4:	89000417 	ldw	r4,16(r17)
  801bc8:	88000115 	stw	zero,4(r17)
  801bcc:	197dffcc 	andi	r5,r3,63487
  801bd0:	8940030d 	sth	r5,12(r17)
  801bd4:	89000015 	stw	r4,0(r17)
  801bd8:	18c4000c 	andi	r3,r3,4096
  801bdc:	18002c1e 	bne	r3,zero,801c90 <__sflush_r+0x160>
  801be0:	89400c17 	ldw	r5,48(r17)
  801be4:	9c000015 	stw	r16,0(r19)
  801be8:	28000526 	beq	r5,zero,801c00 <__sflush_r+0xd0>
  801bec:	88801004 	addi	r2,r17,64
  801bf0:	28800226 	beq	r5,r2,801bfc <__sflush_r+0xcc>
  801bf4:	9809883a 	mov	r4,r19
  801bf8:	08022880 	call	802288 <_free_r>
  801bfc:	88000c15 	stw	zero,48(r17)
  801c00:	0005883a 	mov	r2,zero
  801c04:	dfc00417 	ldw	ra,16(sp)
  801c08:	dcc00317 	ldw	r19,12(sp)
  801c0c:	dc800217 	ldw	r18,8(sp)
  801c10:	dc400117 	ldw	r17,4(sp)
  801c14:	dc000017 	ldw	r16,0(sp)
  801c18:	dec00504 	addi	sp,sp,20
  801c1c:	f800283a 	ret
  801c20:	2c800417 	ldw	r18,16(r5)
  801c24:	903ff626 	beq	r18,zero,801c00 <__alt_data_end+0xff801c00>
  801c28:	2c000017 	ldw	r16,0(r5)
  801c2c:	108000cc 	andi	r2,r2,3
  801c30:	2c800015 	stw	r18,0(r5)
  801c34:	84a1c83a 	sub	r16,r16,r18
  801c38:	1000131e 	bne	r2,zero,801c88 <__sflush_r+0x158>
  801c3c:	28800517 	ldw	r2,20(r5)
  801c40:	88800215 	stw	r2,8(r17)
  801c44:	04000316 	blt	zero,r16,801c54 <__sflush_r+0x124>
  801c48:	003fed06 	br	801c00 <__alt_data_end+0xff801c00>
  801c4c:	90a5883a 	add	r18,r18,r2
  801c50:	043feb0e 	bge	zero,r16,801c00 <__alt_data_end+0xff801c00>
  801c54:	88800917 	ldw	r2,36(r17)
  801c58:	89400717 	ldw	r5,28(r17)
  801c5c:	800f883a 	mov	r7,r16
  801c60:	900d883a 	mov	r6,r18
  801c64:	9809883a 	mov	r4,r19
  801c68:	103ee83a 	callr	r2
  801c6c:	80a1c83a 	sub	r16,r16,r2
  801c70:	00bff616 	blt	zero,r2,801c4c <__alt_data_end+0xff801c4c>
  801c74:	88c0030b 	ldhu	r3,12(r17)
  801c78:	00bfffc4 	movi	r2,-1
  801c7c:	18c01014 	ori	r3,r3,64
  801c80:	88c0030d 	sth	r3,12(r17)
  801c84:	003fdf06 	br	801c04 <__alt_data_end+0xff801c04>
  801c88:	0005883a 	mov	r2,zero
  801c8c:	003fec06 	br	801c40 <__alt_data_end+0xff801c40>
  801c90:	88801415 	stw	r2,80(r17)
  801c94:	003fd206 	br	801be0 <__alt_data_end+0xff801be0>
  801c98:	28c00f17 	ldw	r3,60(r5)
  801c9c:	00ffb316 	blt	zero,r3,801b6c <__alt_data_end+0xff801b6c>
  801ca0:	003fd706 	br	801c00 <__alt_data_end+0xff801c00>
  801ca4:	89400717 	ldw	r5,28(r17)
  801ca8:	000d883a 	mov	r6,zero
  801cac:	9809883a 	mov	r4,r19
  801cb0:	01c00044 	movi	r7,1
  801cb4:	403ee83a 	callr	r8
  801cb8:	100d883a 	mov	r6,r2
  801cbc:	00bfffc4 	movi	r2,-1
  801cc0:	30801426 	beq	r6,r2,801d14 <__sflush_r+0x1e4>
  801cc4:	8880030b 	ldhu	r2,12(r17)
  801cc8:	8a000a17 	ldw	r8,40(r17)
  801ccc:	003fae06 	br	801b88 <__alt_data_end+0xff801b88>
  801cd0:	98c00017 	ldw	r3,0(r19)
  801cd4:	183fba26 	beq	r3,zero,801bc0 <__alt_data_end+0xff801bc0>
  801cd8:	01000744 	movi	r4,29
  801cdc:	19000626 	beq	r3,r4,801cf8 <__sflush_r+0x1c8>
  801ce0:	01000584 	movi	r4,22
  801ce4:	19000426 	beq	r3,r4,801cf8 <__sflush_r+0x1c8>
  801ce8:	88c0030b 	ldhu	r3,12(r17)
  801cec:	18c01014 	ori	r3,r3,64
  801cf0:	88c0030d 	sth	r3,12(r17)
  801cf4:	003fc306 	br	801c04 <__alt_data_end+0xff801c04>
  801cf8:	8880030b 	ldhu	r2,12(r17)
  801cfc:	88c00417 	ldw	r3,16(r17)
  801d00:	88000115 	stw	zero,4(r17)
  801d04:	10bdffcc 	andi	r2,r2,63487
  801d08:	8880030d 	sth	r2,12(r17)
  801d0c:	88c00015 	stw	r3,0(r17)
  801d10:	003fb306 	br	801be0 <__alt_data_end+0xff801be0>
  801d14:	98800017 	ldw	r2,0(r19)
  801d18:	103fea26 	beq	r2,zero,801cc4 <__alt_data_end+0xff801cc4>
  801d1c:	00c00744 	movi	r3,29
  801d20:	10c00226 	beq	r2,r3,801d2c <__sflush_r+0x1fc>
  801d24:	00c00584 	movi	r3,22
  801d28:	10ffd21e 	bne	r2,r3,801c74 <__alt_data_end+0xff801c74>
  801d2c:	9c000015 	stw	r16,0(r19)
  801d30:	0005883a 	mov	r2,zero
  801d34:	003fb306 	br	801c04 <__alt_data_end+0xff801c04>

00801d38 <_fflush_r>:
  801d38:	defffd04 	addi	sp,sp,-12
  801d3c:	dc000115 	stw	r16,4(sp)
  801d40:	dfc00215 	stw	ra,8(sp)
  801d44:	2021883a 	mov	r16,r4
  801d48:	20000226 	beq	r4,zero,801d54 <_fflush_r+0x1c>
  801d4c:	20800e17 	ldw	r2,56(r4)
  801d50:	10000c26 	beq	r2,zero,801d84 <_fflush_r+0x4c>
  801d54:	2880030f 	ldh	r2,12(r5)
  801d58:	1000051e 	bne	r2,zero,801d70 <_fflush_r+0x38>
  801d5c:	0005883a 	mov	r2,zero
  801d60:	dfc00217 	ldw	ra,8(sp)
  801d64:	dc000117 	ldw	r16,4(sp)
  801d68:	dec00304 	addi	sp,sp,12
  801d6c:	f800283a 	ret
  801d70:	8009883a 	mov	r4,r16
  801d74:	dfc00217 	ldw	ra,8(sp)
  801d78:	dc000117 	ldw	r16,4(sp)
  801d7c:	dec00304 	addi	sp,sp,12
  801d80:	0801b301 	jmpi	801b30 <__sflush_r>
  801d84:	d9400015 	stw	r5,0(sp)
  801d88:	08021140 	call	802114 <__sinit>
  801d8c:	d9400017 	ldw	r5,0(sp)
  801d90:	003ff006 	br	801d54 <__alt_data_end+0xff801d54>

00801d94 <fflush>:
  801d94:	20000526 	beq	r4,zero,801dac <fflush+0x18>
  801d98:	00802034 	movhi	r2,128
  801d9c:	109d9a04 	addi	r2,r2,30312
  801da0:	200b883a 	mov	r5,r4
  801da4:	11000017 	ldw	r4,0(r2)
  801da8:	0801d381 	jmpi	801d38 <_fflush_r>
  801dac:	00802034 	movhi	r2,128
  801db0:	109d9904 	addi	r2,r2,30308
  801db4:	11000017 	ldw	r4,0(r2)
  801db8:	01402034 	movhi	r5,128
  801dbc:	29474e04 	addi	r5,r5,7480
  801dc0:	080263c1 	jmpi	80263c <_fwalk_reent>

00801dc4 <__fp_lock>:
  801dc4:	0005883a 	mov	r2,zero
  801dc8:	f800283a 	ret

00801dcc <__fp_unlock>:
  801dcc:	0005883a 	mov	r2,zero
  801dd0:	f800283a 	ret

00801dd4 <_cleanup_r>:
  801dd4:	01402034 	movhi	r5,128
  801dd8:	294af204 	addi	r5,r5,11208
  801ddc:	080263c1 	jmpi	80263c <_fwalk_reent>

00801de0 <__sinit.part.1>:
  801de0:	defff704 	addi	sp,sp,-36
  801de4:	00c02034 	movhi	r3,128
  801de8:	dfc00815 	stw	ra,32(sp)
  801dec:	ddc00715 	stw	r23,28(sp)
  801df0:	dd800615 	stw	r22,24(sp)
  801df4:	dd400515 	stw	r21,20(sp)
  801df8:	dd000415 	stw	r20,16(sp)
  801dfc:	dcc00315 	stw	r19,12(sp)
  801e00:	dc800215 	stw	r18,8(sp)
  801e04:	dc400115 	stw	r17,4(sp)
  801e08:	dc000015 	stw	r16,0(sp)
  801e0c:	18c77504 	addi	r3,r3,7636
  801e10:	24000117 	ldw	r16,4(r4)
  801e14:	20c00f15 	stw	r3,60(r4)
  801e18:	2080bb04 	addi	r2,r4,748
  801e1c:	00c000c4 	movi	r3,3
  801e20:	20c0b915 	stw	r3,740(r4)
  801e24:	2080ba15 	stw	r2,744(r4)
  801e28:	2000b815 	stw	zero,736(r4)
  801e2c:	05c00204 	movi	r23,8
  801e30:	00800104 	movi	r2,4
  801e34:	2025883a 	mov	r18,r4
  801e38:	b80d883a 	mov	r6,r23
  801e3c:	81001704 	addi	r4,r16,92
  801e40:	000b883a 	mov	r5,zero
  801e44:	80000015 	stw	zero,0(r16)
  801e48:	80000115 	stw	zero,4(r16)
  801e4c:	80000215 	stw	zero,8(r16)
  801e50:	8080030d 	sth	r2,12(r16)
  801e54:	80001915 	stw	zero,100(r16)
  801e58:	8000038d 	sth	zero,14(r16)
  801e5c:	80000415 	stw	zero,16(r16)
  801e60:	80000515 	stw	zero,20(r16)
  801e64:	80000615 	stw	zero,24(r16)
  801e68:	08028b80 	call	8028b8 <memset>
  801e6c:	05802034 	movhi	r22,128
  801e70:	94400217 	ldw	r17,8(r18)
  801e74:	05402034 	movhi	r21,128
  801e78:	05002034 	movhi	r20,128
  801e7c:	04c02034 	movhi	r19,128
  801e80:	b58a7704 	addi	r22,r22,10716
  801e84:	ad4a8e04 	addi	r21,r21,10808
  801e88:	a50aad04 	addi	r20,r20,10932
  801e8c:	9ccac404 	addi	r19,r19,11024
  801e90:	85800815 	stw	r22,32(r16)
  801e94:	85400915 	stw	r21,36(r16)
  801e98:	85000a15 	stw	r20,40(r16)
  801e9c:	84c00b15 	stw	r19,44(r16)
  801ea0:	84000715 	stw	r16,28(r16)
  801ea4:	00800284 	movi	r2,10
  801ea8:	8880030d 	sth	r2,12(r17)
  801eac:	00800044 	movi	r2,1
  801eb0:	89001704 	addi	r4,r17,92
  801eb4:	b80d883a 	mov	r6,r23
  801eb8:	000b883a 	mov	r5,zero
  801ebc:	88000015 	stw	zero,0(r17)
  801ec0:	88000115 	stw	zero,4(r17)
  801ec4:	88000215 	stw	zero,8(r17)
  801ec8:	88001915 	stw	zero,100(r17)
  801ecc:	8880038d 	sth	r2,14(r17)
  801ed0:	88000415 	stw	zero,16(r17)
  801ed4:	88000515 	stw	zero,20(r17)
  801ed8:	88000615 	stw	zero,24(r17)
  801edc:	08028b80 	call	8028b8 <memset>
  801ee0:	94000317 	ldw	r16,12(r18)
  801ee4:	00800484 	movi	r2,18
  801ee8:	8c400715 	stw	r17,28(r17)
  801eec:	8d800815 	stw	r22,32(r17)
  801ef0:	8d400915 	stw	r21,36(r17)
  801ef4:	8d000a15 	stw	r20,40(r17)
  801ef8:	8cc00b15 	stw	r19,44(r17)
  801efc:	8080030d 	sth	r2,12(r16)
  801f00:	00800084 	movi	r2,2
  801f04:	80000015 	stw	zero,0(r16)
  801f08:	80000115 	stw	zero,4(r16)
  801f0c:	80000215 	stw	zero,8(r16)
  801f10:	80001915 	stw	zero,100(r16)
  801f14:	8080038d 	sth	r2,14(r16)
  801f18:	80000415 	stw	zero,16(r16)
  801f1c:	80000515 	stw	zero,20(r16)
  801f20:	80000615 	stw	zero,24(r16)
  801f24:	81001704 	addi	r4,r16,92
  801f28:	000b883a 	mov	r5,zero
  801f2c:	b80d883a 	mov	r6,r23
  801f30:	08028b80 	call	8028b8 <memset>
  801f34:	00800044 	movi	r2,1
  801f38:	84000715 	stw	r16,28(r16)
  801f3c:	85800815 	stw	r22,32(r16)
  801f40:	85400915 	stw	r21,36(r16)
  801f44:	85000a15 	stw	r20,40(r16)
  801f48:	84c00b15 	stw	r19,44(r16)
  801f4c:	90800e15 	stw	r2,56(r18)
  801f50:	dfc00817 	ldw	ra,32(sp)
  801f54:	ddc00717 	ldw	r23,28(sp)
  801f58:	dd800617 	ldw	r22,24(sp)
  801f5c:	dd400517 	ldw	r21,20(sp)
  801f60:	dd000417 	ldw	r20,16(sp)
  801f64:	dcc00317 	ldw	r19,12(sp)
  801f68:	dc800217 	ldw	r18,8(sp)
  801f6c:	dc400117 	ldw	r17,4(sp)
  801f70:	dc000017 	ldw	r16,0(sp)
  801f74:	dec00904 	addi	sp,sp,36
  801f78:	f800283a 	ret

00801f7c <__sfmoreglue>:
  801f7c:	defffc04 	addi	sp,sp,-16
  801f80:	dc400115 	stw	r17,4(sp)
  801f84:	2c7fffc4 	addi	r17,r5,-1
  801f88:	8c401a24 	muli	r17,r17,104
  801f8c:	dc800215 	stw	r18,8(sp)
  801f90:	2825883a 	mov	r18,r5
  801f94:	89401d04 	addi	r5,r17,116
  801f98:	dc000015 	stw	r16,0(sp)
  801f9c:	dfc00315 	stw	ra,12(sp)
  801fa0:	08008fc0 	call	8008fc <_malloc_r>
  801fa4:	1021883a 	mov	r16,r2
  801fa8:	10000726 	beq	r2,zero,801fc8 <__sfmoreglue+0x4c>
  801fac:	11000304 	addi	r4,r2,12
  801fb0:	10000015 	stw	zero,0(r2)
  801fb4:	14800115 	stw	r18,4(r2)
  801fb8:	11000215 	stw	r4,8(r2)
  801fbc:	000b883a 	mov	r5,zero
  801fc0:	89801a04 	addi	r6,r17,104
  801fc4:	08028b80 	call	8028b8 <memset>
  801fc8:	8005883a 	mov	r2,r16
  801fcc:	dfc00317 	ldw	ra,12(sp)
  801fd0:	dc800217 	ldw	r18,8(sp)
  801fd4:	dc400117 	ldw	r17,4(sp)
  801fd8:	dc000017 	ldw	r16,0(sp)
  801fdc:	dec00404 	addi	sp,sp,16
  801fe0:	f800283a 	ret

00801fe4 <__sfp>:
  801fe4:	00802034 	movhi	r2,128
  801fe8:	defffb04 	addi	sp,sp,-20
  801fec:	109d9904 	addi	r2,r2,30308
  801ff0:	dc800215 	stw	r18,8(sp)
  801ff4:	14800017 	ldw	r18,0(r2)
  801ff8:	dcc00315 	stw	r19,12(sp)
  801ffc:	dfc00415 	stw	ra,16(sp)
  802000:	90800e17 	ldw	r2,56(r18)
  802004:	dc400115 	stw	r17,4(sp)
  802008:	dc000015 	stw	r16,0(sp)
  80200c:	2027883a 	mov	r19,r4
  802010:	1000021e 	bne	r2,zero,80201c <__sfp+0x38>
  802014:	9009883a 	mov	r4,r18
  802018:	0801de00 	call	801de0 <__sinit.part.1>
  80201c:	9480b804 	addi	r18,r18,736
  802020:	047fffc4 	movi	r17,-1
  802024:	91400117 	ldw	r5,4(r18)
  802028:	94000217 	ldw	r16,8(r18)
  80202c:	297fffc4 	addi	r5,r5,-1
  802030:	28000a16 	blt	r5,zero,80205c <__sfp+0x78>
  802034:	8080030f 	ldh	r2,12(r16)
  802038:	10000c26 	beq	r2,zero,80206c <__sfp+0x88>
  80203c:	80c01d04 	addi	r3,r16,116
  802040:	00000206 	br	80204c <__sfp+0x68>
  802044:	18bfe60f 	ldh	r2,-104(r3)
  802048:	10000826 	beq	r2,zero,80206c <__sfp+0x88>
  80204c:	297fffc4 	addi	r5,r5,-1
  802050:	1c3ffd04 	addi	r16,r3,-12
  802054:	18c01a04 	addi	r3,r3,104
  802058:	2c7ffa1e 	bne	r5,r17,802044 <__alt_data_end+0xff802044>
  80205c:	90800017 	ldw	r2,0(r18)
  802060:	10001d26 	beq	r2,zero,8020d8 <__sfp+0xf4>
  802064:	1025883a 	mov	r18,r2
  802068:	003fee06 	br	802024 <__alt_data_end+0xff802024>
  80206c:	00bfffc4 	movi	r2,-1
  802070:	8080038d 	sth	r2,14(r16)
  802074:	00800044 	movi	r2,1
  802078:	8080030d 	sth	r2,12(r16)
  80207c:	80001915 	stw	zero,100(r16)
  802080:	80000015 	stw	zero,0(r16)
  802084:	80000215 	stw	zero,8(r16)
  802088:	80000115 	stw	zero,4(r16)
  80208c:	80000415 	stw	zero,16(r16)
  802090:	80000515 	stw	zero,20(r16)
  802094:	80000615 	stw	zero,24(r16)
  802098:	81001704 	addi	r4,r16,92
  80209c:	000b883a 	mov	r5,zero
  8020a0:	01800204 	movi	r6,8
  8020a4:	08028b80 	call	8028b8 <memset>
  8020a8:	8005883a 	mov	r2,r16
  8020ac:	80000c15 	stw	zero,48(r16)
  8020b0:	80000d15 	stw	zero,52(r16)
  8020b4:	80001115 	stw	zero,68(r16)
  8020b8:	80001215 	stw	zero,72(r16)
  8020bc:	dfc00417 	ldw	ra,16(sp)
  8020c0:	dcc00317 	ldw	r19,12(sp)
  8020c4:	dc800217 	ldw	r18,8(sp)
  8020c8:	dc400117 	ldw	r17,4(sp)
  8020cc:	dc000017 	ldw	r16,0(sp)
  8020d0:	dec00504 	addi	sp,sp,20
  8020d4:	f800283a 	ret
  8020d8:	9809883a 	mov	r4,r19
  8020dc:	01400104 	movi	r5,4
  8020e0:	0801f7c0 	call	801f7c <__sfmoreglue>
  8020e4:	90800015 	stw	r2,0(r18)
  8020e8:	103fde1e 	bne	r2,zero,802064 <__alt_data_end+0xff802064>
  8020ec:	00800304 	movi	r2,12
  8020f0:	98800015 	stw	r2,0(r19)
  8020f4:	0005883a 	mov	r2,zero
  8020f8:	003ff006 	br	8020bc <__alt_data_end+0xff8020bc>

008020fc <_cleanup>:
  8020fc:	00802034 	movhi	r2,128
  802100:	109d9904 	addi	r2,r2,30308
  802104:	11000017 	ldw	r4,0(r2)
  802108:	01402034 	movhi	r5,128
  80210c:	294af204 	addi	r5,r5,11208
  802110:	080263c1 	jmpi	80263c <_fwalk_reent>

00802114 <__sinit>:
  802114:	20800e17 	ldw	r2,56(r4)
  802118:	10000126 	beq	r2,zero,802120 <__sinit+0xc>
  80211c:	f800283a 	ret
  802120:	0801de01 	jmpi	801de0 <__sinit.part.1>

00802124 <__sfp_lock_acquire>:
  802124:	f800283a 	ret

00802128 <__sfp_lock_release>:
  802128:	f800283a 	ret

0080212c <__sinit_lock_acquire>:
  80212c:	f800283a 	ret

00802130 <__sinit_lock_release>:
  802130:	f800283a 	ret

00802134 <__fp_lock_all>:
  802134:	00802034 	movhi	r2,128
  802138:	109d9a04 	addi	r2,r2,30312
  80213c:	11000017 	ldw	r4,0(r2)
  802140:	01402034 	movhi	r5,128
  802144:	29477104 	addi	r5,r5,7620
  802148:	08025781 	jmpi	802578 <_fwalk>

0080214c <__fp_unlock_all>:
  80214c:	00802034 	movhi	r2,128
  802150:	109d9a04 	addi	r2,r2,30312
  802154:	11000017 	ldw	r4,0(r2)
  802158:	01402034 	movhi	r5,128
  80215c:	29477304 	addi	r5,r5,7628
  802160:	08025781 	jmpi	802578 <_fwalk>

00802164 <_malloc_trim_r>:
  802164:	defffb04 	addi	sp,sp,-20
  802168:	dcc00315 	stw	r19,12(sp)
  80216c:	04c02034 	movhi	r19,128
  802170:	dc800215 	stw	r18,8(sp)
  802174:	dc400115 	stw	r17,4(sp)
  802178:	dc000015 	stw	r16,0(sp)
  80217c:	dfc00415 	stw	ra,16(sp)
  802180:	2821883a 	mov	r16,r5
  802184:	9cdb9104 	addi	r19,r19,28228
  802188:	2025883a 	mov	r18,r4
  80218c:	080351c0 	call	80351c <__malloc_lock>
  802190:	98800217 	ldw	r2,8(r19)
  802194:	14400117 	ldw	r17,4(r2)
  802198:	00bfff04 	movi	r2,-4
  80219c:	88a2703a 	and	r17,r17,r2
  8021a0:	8c21c83a 	sub	r16,r17,r16
  8021a4:	8403fbc4 	addi	r16,r16,4079
  8021a8:	8020d33a 	srli	r16,r16,12
  8021ac:	0083ffc4 	movi	r2,4095
  8021b0:	843fffc4 	addi	r16,r16,-1
  8021b4:	8020933a 	slli	r16,r16,12
  8021b8:	1400060e 	bge	r2,r16,8021d4 <_malloc_trim_r+0x70>
  8021bc:	9009883a 	mov	r4,r18
  8021c0:	000b883a 	mov	r5,zero
  8021c4:	08019880 	call	801988 <_sbrk_r>
  8021c8:	98c00217 	ldw	r3,8(r19)
  8021cc:	1c47883a 	add	r3,r3,r17
  8021d0:	10c00a26 	beq	r2,r3,8021fc <_malloc_trim_r+0x98>
  8021d4:	9009883a 	mov	r4,r18
  8021d8:	080353c0 	call	80353c <__malloc_unlock>
  8021dc:	0005883a 	mov	r2,zero
  8021e0:	dfc00417 	ldw	ra,16(sp)
  8021e4:	dcc00317 	ldw	r19,12(sp)
  8021e8:	dc800217 	ldw	r18,8(sp)
  8021ec:	dc400117 	ldw	r17,4(sp)
  8021f0:	dc000017 	ldw	r16,0(sp)
  8021f4:	dec00504 	addi	sp,sp,20
  8021f8:	f800283a 	ret
  8021fc:	9009883a 	mov	r4,r18
  802200:	040bc83a 	sub	r5,zero,r16
  802204:	08019880 	call	801988 <_sbrk_r>
  802208:	00ffffc4 	movi	r3,-1
  80220c:	10c00d26 	beq	r2,r3,802244 <_malloc_trim_r+0xe0>
  802210:	00c02074 	movhi	r3,129
  802214:	18e0d504 	addi	r3,r3,-31916
  802218:	18800017 	ldw	r2,0(r3)
  80221c:	99000217 	ldw	r4,8(r19)
  802220:	8c23c83a 	sub	r17,r17,r16
  802224:	8c400054 	ori	r17,r17,1
  802228:	1421c83a 	sub	r16,r2,r16
  80222c:	24400115 	stw	r17,4(r4)
  802230:	9009883a 	mov	r4,r18
  802234:	1c000015 	stw	r16,0(r3)
  802238:	080353c0 	call	80353c <__malloc_unlock>
  80223c:	00800044 	movi	r2,1
  802240:	003fe706 	br	8021e0 <__alt_data_end+0xff8021e0>
  802244:	9009883a 	mov	r4,r18
  802248:	000b883a 	mov	r5,zero
  80224c:	08019880 	call	801988 <_sbrk_r>
  802250:	99000217 	ldw	r4,8(r19)
  802254:	014003c4 	movi	r5,15
  802258:	1107c83a 	sub	r3,r2,r4
  80225c:	28ffdd0e 	bge	r5,r3,8021d4 <__alt_data_end+0xff8021d4>
  802260:	01402034 	movhi	r5,128
  802264:	295d9b04 	addi	r5,r5,30316
  802268:	29400017 	ldw	r5,0(r5)
  80226c:	18c00054 	ori	r3,r3,1
  802270:	20c00115 	stw	r3,4(r4)
  802274:	00c02074 	movhi	r3,129
  802278:	1145c83a 	sub	r2,r2,r5
  80227c:	18e0d504 	addi	r3,r3,-31916
  802280:	18800015 	stw	r2,0(r3)
  802284:	003fd306 	br	8021d4 <__alt_data_end+0xff8021d4>

00802288 <_free_r>:
  802288:	28004c26 	beq	r5,zero,8023bc <_free_r+0x134>
  80228c:	defffd04 	addi	sp,sp,-12
  802290:	dc400115 	stw	r17,4(sp)
  802294:	dc000015 	stw	r16,0(sp)
  802298:	2023883a 	mov	r17,r4
  80229c:	2821883a 	mov	r16,r5
  8022a0:	dfc00215 	stw	ra,8(sp)
  8022a4:	080351c0 	call	80351c <__malloc_lock>
  8022a8:	813fff17 	ldw	r4,-4(r16)
  8022ac:	00bfff84 	movi	r2,-2
  8022b0:	02402034 	movhi	r9,128
  8022b4:	81bffe04 	addi	r6,r16,-8
  8022b8:	2084703a 	and	r2,r4,r2
  8022bc:	4a5b9104 	addi	r9,r9,28228
  8022c0:	308b883a 	add	r5,r6,r2
  8022c4:	2a000117 	ldw	r8,4(r5)
  8022c8:	49c00217 	ldw	r7,8(r9)
  8022cc:	00ffff04 	movi	r3,-4
  8022d0:	40c6703a 	and	r3,r8,r3
  8022d4:	39405326 	beq	r7,r5,802424 <_free_r+0x19c>
  8022d8:	28c00115 	stw	r3,4(r5)
  8022dc:	2100004c 	andi	r4,r4,1
  8022e0:	2000091e 	bne	r4,zero,802308 <_free_r+0x80>
  8022e4:	81fffe17 	ldw	r7,-8(r16)
  8022e8:	4a000204 	addi	r8,r9,8
  8022ec:	31cdc83a 	sub	r6,r6,r7
  8022f0:	31000217 	ldw	r4,8(r6)
  8022f4:	11c5883a 	add	r2,r2,r7
  8022f8:	22006126 	beq	r4,r8,802480 <_free_r+0x1f8>
  8022fc:	31c00317 	ldw	r7,12(r6)
  802300:	21c00315 	stw	r7,12(r4)
  802304:	39000215 	stw	r4,8(r7)
  802308:	28c9883a 	add	r4,r5,r3
  80230c:	21c00117 	ldw	r7,4(r4)
  802310:	39c0004c 	andi	r7,r7,1
  802314:	38000d1e 	bne	r7,zero,80234c <_free_r+0xc4>
  802318:	29000217 	ldw	r4,8(r5)
  80231c:	10c5883a 	add	r2,r2,r3
  802320:	00c02034 	movhi	r3,128
  802324:	18db9304 	addi	r3,r3,28236
  802328:	20c07526 	beq	r4,r3,802500 <_free_r+0x278>
  80232c:	29c00317 	ldw	r7,12(r5)
  802330:	11400054 	ori	r5,r2,1
  802334:	3087883a 	add	r3,r6,r2
  802338:	21c00315 	stw	r7,12(r4)
  80233c:	39000215 	stw	r4,8(r7)
  802340:	31400115 	stw	r5,4(r6)
  802344:	18800015 	stw	r2,0(r3)
  802348:	00000406 	br	80235c <_free_r+0xd4>
  80234c:	10c00054 	ori	r3,r2,1
  802350:	30c00115 	stw	r3,4(r6)
  802354:	3087883a 	add	r3,r6,r2
  802358:	18800015 	stw	r2,0(r3)
  80235c:	00c07fc4 	movi	r3,511
  802360:	18801736 	bltu	r3,r2,8023c0 <_free_r+0x138>
  802364:	1004d0fa 	srli	r2,r2,3
  802368:	01400044 	movi	r5,1
  80236c:	49000117 	ldw	r4,4(r9)
  802370:	1087883a 	add	r3,r2,r2
  802374:	18c7883a 	add	r3,r3,r3
  802378:	1005d0ba 	srai	r2,r2,2
  80237c:	18c7883a 	add	r3,r3,r3
  802380:	1a47883a 	add	r3,r3,r9
  802384:	19c00217 	ldw	r7,8(r3)
  802388:	2884983a 	sll	r2,r5,r2
  80238c:	30c00315 	stw	r3,12(r6)
  802390:	31c00215 	stw	r7,8(r6)
  802394:	1104b03a 	or	r2,r2,r4
  802398:	19800215 	stw	r6,8(r3)
  80239c:	48800115 	stw	r2,4(r9)
  8023a0:	39800315 	stw	r6,12(r7)
  8023a4:	8809883a 	mov	r4,r17
  8023a8:	dfc00217 	ldw	ra,8(sp)
  8023ac:	dc400117 	ldw	r17,4(sp)
  8023b0:	dc000017 	ldw	r16,0(sp)
  8023b4:	dec00304 	addi	sp,sp,12
  8023b8:	080353c1 	jmpi	80353c <__malloc_unlock>
  8023bc:	f800283a 	ret
  8023c0:	1006d27a 	srli	r3,r2,9
  8023c4:	01000104 	movi	r4,4
  8023c8:	20c04036 	bltu	r4,r3,8024cc <_free_r+0x244>
  8023cc:	1006d1ba 	srli	r3,r2,6
  8023d0:	19400e04 	addi	r5,r3,56
  8023d4:	2947883a 	add	r3,r5,r5
  8023d8:	18c7883a 	add	r3,r3,r3
  8023dc:	18c7883a 	add	r3,r3,r3
  8023e0:	1a49883a 	add	r4,r3,r9
  8023e4:	20c00217 	ldw	r3,8(r4)
  8023e8:	01c02034 	movhi	r7,128
  8023ec:	39db9104 	addi	r7,r7,28228
  8023f0:	19003b26 	beq	r3,r4,8024e0 <_free_r+0x258>
  8023f4:	01ffff04 	movi	r7,-4
  8023f8:	19400117 	ldw	r5,4(r3)
  8023fc:	29ca703a 	and	r5,r5,r7
  802400:	1140022e 	bgeu	r2,r5,80240c <_free_r+0x184>
  802404:	18c00217 	ldw	r3,8(r3)
  802408:	20fffb1e 	bne	r4,r3,8023f8 <__alt_data_end+0xff8023f8>
  80240c:	18800317 	ldw	r2,12(r3)
  802410:	30800315 	stw	r2,12(r6)
  802414:	30c00215 	stw	r3,8(r6)
  802418:	11800215 	stw	r6,8(r2)
  80241c:	19800315 	stw	r6,12(r3)
  802420:	003fe006 	br	8023a4 <__alt_data_end+0xff8023a4>
  802424:	2100004c 	andi	r4,r4,1
  802428:	1885883a 	add	r2,r3,r2
  80242c:	2000071e 	bne	r4,zero,80244c <_free_r+0x1c4>
  802430:	817ffe17 	ldw	r5,-8(r16)
  802434:	314dc83a 	sub	r6,r6,r5
  802438:	30c00317 	ldw	r3,12(r6)
  80243c:	31000217 	ldw	r4,8(r6)
  802440:	1145883a 	add	r2,r2,r5
  802444:	20c00315 	stw	r3,12(r4)
  802448:	19000215 	stw	r4,8(r3)
  80244c:	10c00054 	ori	r3,r2,1
  802450:	30c00115 	stw	r3,4(r6)
  802454:	00c02034 	movhi	r3,128
  802458:	18dd9c04 	addi	r3,r3,30320
  80245c:	18c00017 	ldw	r3,0(r3)
  802460:	49800215 	stw	r6,8(r9)
  802464:	10ffcf36 	bltu	r2,r3,8023a4 <__alt_data_end+0xff8023a4>
  802468:	00802074 	movhi	r2,129
  80246c:	10a0cc04 	addi	r2,r2,-31952
  802470:	11400017 	ldw	r5,0(r2)
  802474:	8809883a 	mov	r4,r17
  802478:	08021640 	call	802164 <_malloc_trim_r>
  80247c:	003fc906 	br	8023a4 <__alt_data_end+0xff8023a4>
  802480:	28c9883a 	add	r4,r5,r3
  802484:	21000117 	ldw	r4,4(r4)
  802488:	2100004c 	andi	r4,r4,1
  80248c:	20000a1e 	bne	r4,zero,8024b8 <_free_r+0x230>
  802490:	29000317 	ldw	r4,12(r5)
  802494:	29400217 	ldw	r5,8(r5)
  802498:	10c5883a 	add	r2,r2,r3
  80249c:	10c00054 	ori	r3,r2,1
  8024a0:	29000315 	stw	r4,12(r5)
  8024a4:	21400215 	stw	r5,8(r4)
  8024a8:	30c00115 	stw	r3,4(r6)
  8024ac:	308d883a 	add	r6,r6,r2
  8024b0:	30800015 	stw	r2,0(r6)
  8024b4:	003fbb06 	br	8023a4 <__alt_data_end+0xff8023a4>
  8024b8:	10c00054 	ori	r3,r2,1
  8024bc:	30c00115 	stw	r3,4(r6)
  8024c0:	308d883a 	add	r6,r6,r2
  8024c4:	30800015 	stw	r2,0(r6)
  8024c8:	003fb606 	br	8023a4 <__alt_data_end+0xff8023a4>
  8024cc:	01000504 	movi	r4,20
  8024d0:	20c01436 	bltu	r4,r3,802524 <_free_r+0x29c>
  8024d4:	194016c4 	addi	r5,r3,91
  8024d8:	2947883a 	add	r3,r5,r5
  8024dc:	003fbe06 	br	8023d8 <__alt_data_end+0xff8023d8>
  8024e0:	280bd0ba 	srai	r5,r5,2
  8024e4:	00800044 	movi	r2,1
  8024e8:	39000117 	ldw	r4,4(r7)
  8024ec:	114a983a 	sll	r5,r2,r5
  8024f0:	1805883a 	mov	r2,r3
  8024f4:	2908b03a 	or	r4,r5,r4
  8024f8:	39000115 	stw	r4,4(r7)
  8024fc:	003fc406 	br	802410 <__alt_data_end+0xff802410>
  802500:	49800515 	stw	r6,20(r9)
  802504:	49800415 	stw	r6,16(r9)
  802508:	10c00054 	ori	r3,r2,1
  80250c:	31000315 	stw	r4,12(r6)
  802510:	31000215 	stw	r4,8(r6)
  802514:	30c00115 	stw	r3,4(r6)
  802518:	308d883a 	add	r6,r6,r2
  80251c:	30800015 	stw	r2,0(r6)
  802520:	003fa006 	br	8023a4 <__alt_data_end+0xff8023a4>
  802524:	01001504 	movi	r4,84
  802528:	20c00436 	bltu	r4,r3,80253c <_free_r+0x2b4>
  80252c:	1006d33a 	srli	r3,r2,12
  802530:	19401b84 	addi	r5,r3,110
  802534:	2947883a 	add	r3,r5,r5
  802538:	003fa706 	br	8023d8 <__alt_data_end+0xff8023d8>
  80253c:	01005504 	movi	r4,340
  802540:	20c00436 	bltu	r4,r3,802554 <_free_r+0x2cc>
  802544:	1006d3fa 	srli	r3,r2,15
  802548:	19401dc4 	addi	r5,r3,119
  80254c:	2947883a 	add	r3,r5,r5
  802550:	003fa106 	br	8023d8 <__alt_data_end+0xff8023d8>
  802554:	01015504 	movi	r4,1364
  802558:	20c00436 	bltu	r4,r3,80256c <_free_r+0x2e4>
  80255c:	1006d4ba 	srli	r3,r2,18
  802560:	19401f04 	addi	r5,r3,124
  802564:	2947883a 	add	r3,r5,r5
  802568:	003f9b06 	br	8023d8 <__alt_data_end+0xff8023d8>
  80256c:	00c03f04 	movi	r3,252
  802570:	01401f84 	movi	r5,126
  802574:	003f9806 	br	8023d8 <__alt_data_end+0xff8023d8>

00802578 <_fwalk>:
  802578:	defff704 	addi	sp,sp,-36
  80257c:	dd000415 	stw	r20,16(sp)
  802580:	dfc00815 	stw	ra,32(sp)
  802584:	ddc00715 	stw	r23,28(sp)
  802588:	dd800615 	stw	r22,24(sp)
  80258c:	dd400515 	stw	r21,20(sp)
  802590:	dcc00315 	stw	r19,12(sp)
  802594:	dc800215 	stw	r18,8(sp)
  802598:	dc400115 	stw	r17,4(sp)
  80259c:	dc000015 	stw	r16,0(sp)
  8025a0:	2500b804 	addi	r20,r4,736
  8025a4:	a0002326 	beq	r20,zero,802634 <_fwalk+0xbc>
  8025a8:	282b883a 	mov	r21,r5
  8025ac:	002f883a 	mov	r23,zero
  8025b0:	05800044 	movi	r22,1
  8025b4:	04ffffc4 	movi	r19,-1
  8025b8:	a4400117 	ldw	r17,4(r20)
  8025bc:	a4800217 	ldw	r18,8(r20)
  8025c0:	8c7fffc4 	addi	r17,r17,-1
  8025c4:	88000d16 	blt	r17,zero,8025fc <_fwalk+0x84>
  8025c8:	94000304 	addi	r16,r18,12
  8025cc:	94800384 	addi	r18,r18,14
  8025d0:	80c0000b 	ldhu	r3,0(r16)
  8025d4:	8c7fffc4 	addi	r17,r17,-1
  8025d8:	813ffd04 	addi	r4,r16,-12
  8025dc:	b0c0042e 	bgeu	r22,r3,8025f0 <_fwalk+0x78>
  8025e0:	90c0000f 	ldh	r3,0(r18)
  8025e4:	1cc00226 	beq	r3,r19,8025f0 <_fwalk+0x78>
  8025e8:	a83ee83a 	callr	r21
  8025ec:	b8aeb03a 	or	r23,r23,r2
  8025f0:	84001a04 	addi	r16,r16,104
  8025f4:	94801a04 	addi	r18,r18,104
  8025f8:	8cfff51e 	bne	r17,r19,8025d0 <__alt_data_end+0xff8025d0>
  8025fc:	a5000017 	ldw	r20,0(r20)
  802600:	a03fed1e 	bne	r20,zero,8025b8 <__alt_data_end+0xff8025b8>
  802604:	b805883a 	mov	r2,r23
  802608:	dfc00817 	ldw	ra,32(sp)
  80260c:	ddc00717 	ldw	r23,28(sp)
  802610:	dd800617 	ldw	r22,24(sp)
  802614:	dd400517 	ldw	r21,20(sp)
  802618:	dd000417 	ldw	r20,16(sp)
  80261c:	dcc00317 	ldw	r19,12(sp)
  802620:	dc800217 	ldw	r18,8(sp)
  802624:	dc400117 	ldw	r17,4(sp)
  802628:	dc000017 	ldw	r16,0(sp)
  80262c:	dec00904 	addi	sp,sp,36
  802630:	f800283a 	ret
  802634:	002f883a 	mov	r23,zero
  802638:	003ff206 	br	802604 <__alt_data_end+0xff802604>

0080263c <_fwalk_reent>:
  80263c:	defff704 	addi	sp,sp,-36
  802640:	dd400515 	stw	r21,20(sp)
  802644:	dfc00815 	stw	ra,32(sp)
  802648:	ddc00715 	stw	r23,28(sp)
  80264c:	dd800615 	stw	r22,24(sp)
  802650:	dd000415 	stw	r20,16(sp)
  802654:	dcc00315 	stw	r19,12(sp)
  802658:	dc800215 	stw	r18,8(sp)
  80265c:	dc400115 	stw	r17,4(sp)
  802660:	dc000015 	stw	r16,0(sp)
  802664:	2540b804 	addi	r21,r4,736
  802668:	a8002326 	beq	r21,zero,8026f8 <_fwalk_reent+0xbc>
  80266c:	2829883a 	mov	r20,r5
  802670:	202d883a 	mov	r22,r4
  802674:	002f883a 	mov	r23,zero
  802678:	04c00044 	movi	r19,1
  80267c:	04bfffc4 	movi	r18,-1
  802680:	ac400117 	ldw	r17,4(r21)
  802684:	ac000217 	ldw	r16,8(r21)
  802688:	8c7fffc4 	addi	r17,r17,-1
  80268c:	88000c16 	blt	r17,zero,8026c0 <_fwalk_reent+0x84>
  802690:	84000304 	addi	r16,r16,12
  802694:	80c0000b 	ldhu	r3,0(r16)
  802698:	8c7fffc4 	addi	r17,r17,-1
  80269c:	817ffd04 	addi	r5,r16,-12
  8026a0:	98c0052e 	bgeu	r19,r3,8026b8 <_fwalk_reent+0x7c>
  8026a4:	80c0008f 	ldh	r3,2(r16)
  8026a8:	b009883a 	mov	r4,r22
  8026ac:	1c800226 	beq	r3,r18,8026b8 <_fwalk_reent+0x7c>
  8026b0:	a03ee83a 	callr	r20
  8026b4:	b8aeb03a 	or	r23,r23,r2
  8026b8:	84001a04 	addi	r16,r16,104
  8026bc:	8cbff51e 	bne	r17,r18,802694 <__alt_data_end+0xff802694>
  8026c0:	ad400017 	ldw	r21,0(r21)
  8026c4:	a83fee1e 	bne	r21,zero,802680 <__alt_data_end+0xff802680>
  8026c8:	b805883a 	mov	r2,r23
  8026cc:	dfc00817 	ldw	ra,32(sp)
  8026d0:	ddc00717 	ldw	r23,28(sp)
  8026d4:	dd800617 	ldw	r22,24(sp)
  8026d8:	dd400517 	ldw	r21,20(sp)
  8026dc:	dd000417 	ldw	r20,16(sp)
  8026e0:	dcc00317 	ldw	r19,12(sp)
  8026e4:	dc800217 	ldw	r18,8(sp)
  8026e8:	dc400117 	ldw	r17,4(sp)
  8026ec:	dc000017 	ldw	r16,0(sp)
  8026f0:	dec00904 	addi	sp,sp,36
  8026f4:	f800283a 	ret
  8026f8:	002f883a 	mov	r23,zero
  8026fc:	003ff206 	br	8026c8 <__alt_data_end+0xff8026c8>

00802700 <__smakebuf_r>:
  802700:	2880030b 	ldhu	r2,12(r5)
  802704:	10c0008c 	andi	r3,r2,2
  802708:	1800401e 	bne	r3,zero,80280c <__smakebuf_r+0x10c>
  80270c:	deffec04 	addi	sp,sp,-80
  802710:	dc000f15 	stw	r16,60(sp)
  802714:	2821883a 	mov	r16,r5
  802718:	2940038f 	ldh	r5,14(r5)
  80271c:	dc401015 	stw	r17,64(sp)
  802720:	dfc01315 	stw	ra,76(sp)
  802724:	dcc01215 	stw	r19,72(sp)
  802728:	dc801115 	stw	r18,68(sp)
  80272c:	2023883a 	mov	r17,r4
  802730:	28001b16 	blt	r5,zero,8027a0 <__smakebuf_r+0xa0>
  802734:	d80d883a 	mov	r6,sp
  802738:	0802ccc0 	call	802ccc <_fstat_r>
  80273c:	10001716 	blt	r2,zero,80279c <__smakebuf_r+0x9c>
  802740:	d8800117 	ldw	r2,4(sp)
  802744:	00e00014 	movui	r3,32768
  802748:	10bc000c 	andi	r2,r2,61440
  80274c:	10c03726 	beq	r2,r3,80282c <__smakebuf_r+0x12c>
  802750:	80c0030b 	ldhu	r3,12(r16)
  802754:	18c20014 	ori	r3,r3,2048
  802758:	80c0030d 	sth	r3,12(r16)
  80275c:	00c80004 	movi	r3,8192
  802760:	10c03c1e 	bne	r2,r3,802854 <__smakebuf_r+0x154>
  802764:	8140038f 	ldh	r5,14(r16)
  802768:	8809883a 	mov	r4,r17
  80276c:	0802d240 	call	802d24 <_isatty_r>
  802770:	10004e26 	beq	r2,zero,8028ac <__smakebuf_r+0x1ac>
  802774:	8080030b 	ldhu	r2,12(r16)
  802778:	04c00044 	movi	r19,1
  80277c:	80c010c4 	addi	r3,r16,67
  802780:	14c4b03a 	or	r2,r2,r19
  802784:	8080030d 	sth	r2,12(r16)
  802788:	80c00015 	stw	r3,0(r16)
  80278c:	80c00415 	stw	r3,16(r16)
  802790:	84c00515 	stw	r19,20(r16)
  802794:	04810004 	movi	r18,1024
  802798:	00000706 	br	8027b8 <__smakebuf_r+0xb8>
  80279c:	8080030b 	ldhu	r2,12(r16)
  8027a0:	10c0200c 	andi	r3,r2,128
  8027a4:	18001f1e 	bne	r3,zero,802824 <__smakebuf_r+0x124>
  8027a8:	04810004 	movi	r18,1024
  8027ac:	10820014 	ori	r2,r2,2048
  8027b0:	8080030d 	sth	r2,12(r16)
  8027b4:	0027883a 	mov	r19,zero
  8027b8:	8809883a 	mov	r4,r17
  8027bc:	900b883a 	mov	r5,r18
  8027c0:	08008fc0 	call	8008fc <_malloc_r>
  8027c4:	10002e26 	beq	r2,zero,802880 <__smakebuf_r+0x180>
  8027c8:	80c0030b 	ldhu	r3,12(r16)
  8027cc:	01002034 	movhi	r4,128
  8027d0:	21077504 	addi	r4,r4,7636
  8027d4:	89000f15 	stw	r4,60(r17)
  8027d8:	18c02014 	ori	r3,r3,128
  8027dc:	80c0030d 	sth	r3,12(r16)
  8027e0:	80800015 	stw	r2,0(r16)
  8027e4:	80800415 	stw	r2,16(r16)
  8027e8:	84800515 	stw	r18,20(r16)
  8027ec:	98001c1e 	bne	r19,zero,802860 <__smakebuf_r+0x160>
  8027f0:	dfc01317 	ldw	ra,76(sp)
  8027f4:	dcc01217 	ldw	r19,72(sp)
  8027f8:	dc801117 	ldw	r18,68(sp)
  8027fc:	dc401017 	ldw	r17,64(sp)
  802800:	dc000f17 	ldw	r16,60(sp)
  802804:	dec01404 	addi	sp,sp,80
  802808:	f800283a 	ret
  80280c:	288010c4 	addi	r2,r5,67
  802810:	28800015 	stw	r2,0(r5)
  802814:	28800415 	stw	r2,16(r5)
  802818:	00800044 	movi	r2,1
  80281c:	28800515 	stw	r2,20(r5)
  802820:	f800283a 	ret
  802824:	04801004 	movi	r18,64
  802828:	003fe006 	br	8027ac <__alt_data_end+0xff8027ac>
  80282c:	81000a17 	ldw	r4,40(r16)
  802830:	00c02034 	movhi	r3,128
  802834:	18caad04 	addi	r3,r3,10932
  802838:	20ffc51e 	bne	r4,r3,802750 <__alt_data_end+0xff802750>
  80283c:	80c0030b 	ldhu	r3,12(r16)
  802840:	01010004 	movi	r4,1024
  802844:	81001315 	stw	r4,76(r16)
  802848:	1906b03a 	or	r3,r3,r4
  80284c:	80c0030d 	sth	r3,12(r16)
  802850:	003fc206 	br	80275c <__alt_data_end+0xff80275c>
  802854:	0027883a 	mov	r19,zero
  802858:	04810004 	movi	r18,1024
  80285c:	003fd606 	br	8027b8 <__alt_data_end+0xff8027b8>
  802860:	8140038f 	ldh	r5,14(r16)
  802864:	8809883a 	mov	r4,r17
  802868:	0802d240 	call	802d24 <_isatty_r>
  80286c:	103fe026 	beq	r2,zero,8027f0 <__alt_data_end+0xff8027f0>
  802870:	8080030b 	ldhu	r2,12(r16)
  802874:	10800054 	ori	r2,r2,1
  802878:	8080030d 	sth	r2,12(r16)
  80287c:	003fdc06 	br	8027f0 <__alt_data_end+0xff8027f0>
  802880:	8080030b 	ldhu	r2,12(r16)
  802884:	10c0800c 	andi	r3,r2,512
  802888:	183fd91e 	bne	r3,zero,8027f0 <__alt_data_end+0xff8027f0>
  80288c:	10800094 	ori	r2,r2,2
  802890:	80c010c4 	addi	r3,r16,67
  802894:	8080030d 	sth	r2,12(r16)
  802898:	00800044 	movi	r2,1
  80289c:	80c00015 	stw	r3,0(r16)
  8028a0:	80c00415 	stw	r3,16(r16)
  8028a4:	80800515 	stw	r2,20(r16)
  8028a8:	003fd106 	br	8027f0 <__alt_data_end+0xff8027f0>
  8028ac:	04c00044 	movi	r19,1
  8028b0:	04810004 	movi	r18,1024
  8028b4:	003fc006 	br	8027b8 <__alt_data_end+0xff8027b8>

008028b8 <memset>:
  8028b8:	20c000cc 	andi	r3,r4,3
  8028bc:	2005883a 	mov	r2,r4
  8028c0:	18004326 	beq	r3,zero,8029d0 <memset+0x118>
  8028c4:	31ffffc4 	addi	r7,r6,-1
  8028c8:	30004026 	beq	r6,zero,8029cc <memset+0x114>
  8028cc:	2813883a 	mov	r9,r5
  8028d0:	200d883a 	mov	r6,r4
  8028d4:	2007883a 	mov	r3,r4
  8028d8:	00000406 	br	8028ec <memset+0x34>
  8028dc:	3a3fffc4 	addi	r8,r7,-1
  8028e0:	31800044 	addi	r6,r6,1
  8028e4:	38003926 	beq	r7,zero,8029cc <memset+0x114>
  8028e8:	400f883a 	mov	r7,r8
  8028ec:	18c00044 	addi	r3,r3,1
  8028f0:	32400005 	stb	r9,0(r6)
  8028f4:	1a0000cc 	andi	r8,r3,3
  8028f8:	403ff81e 	bne	r8,zero,8028dc <__alt_data_end+0xff8028dc>
  8028fc:	010000c4 	movi	r4,3
  802900:	21c02d2e 	bgeu	r4,r7,8029b8 <memset+0x100>
  802904:	29803fcc 	andi	r6,r5,255
  802908:	3008923a 	slli	r4,r6,8
  80290c:	218cb03a 	or	r6,r4,r6
  802910:	3008943a 	slli	r4,r6,16
  802914:	218cb03a 	or	r6,r4,r6
  802918:	010003c4 	movi	r4,15
  80291c:	21c0182e 	bgeu	r4,r7,802980 <memset+0xc8>
  802920:	3b3ffc04 	addi	r12,r7,-16
  802924:	6018d13a 	srli	r12,r12,4
  802928:	1a000104 	addi	r8,r3,4
  80292c:	1ac00204 	addi	r11,r3,8
  802930:	6008913a 	slli	r4,r12,4
  802934:	1a800304 	addi	r10,r3,12
  802938:	1813883a 	mov	r9,r3
  80293c:	21000504 	addi	r4,r4,20
  802940:	1909883a 	add	r4,r3,r4
  802944:	49800015 	stw	r6,0(r9)
  802948:	41800015 	stw	r6,0(r8)
  80294c:	59800015 	stw	r6,0(r11)
  802950:	51800015 	stw	r6,0(r10)
  802954:	42000404 	addi	r8,r8,16
  802958:	4a400404 	addi	r9,r9,16
  80295c:	5ac00404 	addi	r11,r11,16
  802960:	52800404 	addi	r10,r10,16
  802964:	413ff71e 	bne	r8,r4,802944 <__alt_data_end+0xff802944>
  802968:	63000044 	addi	r12,r12,1
  80296c:	6018913a 	slli	r12,r12,4
  802970:	39c003cc 	andi	r7,r7,15
  802974:	010000c4 	movi	r4,3
  802978:	1b07883a 	add	r3,r3,r12
  80297c:	21c00e2e 	bgeu	r4,r7,8029b8 <memset+0x100>
  802980:	1813883a 	mov	r9,r3
  802984:	3811883a 	mov	r8,r7
  802988:	010000c4 	movi	r4,3
  80298c:	49800015 	stw	r6,0(r9)
  802990:	423fff04 	addi	r8,r8,-4
  802994:	4a400104 	addi	r9,r9,4
  802998:	223ffc36 	bltu	r4,r8,80298c <__alt_data_end+0xff80298c>
  80299c:	393fff04 	addi	r4,r7,-4
  8029a0:	2008d0ba 	srli	r4,r4,2
  8029a4:	39c000cc 	andi	r7,r7,3
  8029a8:	21000044 	addi	r4,r4,1
  8029ac:	2109883a 	add	r4,r4,r4
  8029b0:	2109883a 	add	r4,r4,r4
  8029b4:	1907883a 	add	r3,r3,r4
  8029b8:	38000426 	beq	r7,zero,8029cc <memset+0x114>
  8029bc:	19cf883a 	add	r7,r3,r7
  8029c0:	19400005 	stb	r5,0(r3)
  8029c4:	18c00044 	addi	r3,r3,1
  8029c8:	19fffd1e 	bne	r3,r7,8029c0 <__alt_data_end+0xff8029c0>
  8029cc:	f800283a 	ret
  8029d0:	2007883a 	mov	r3,r4
  8029d4:	300f883a 	mov	r7,r6
  8029d8:	003fc806 	br	8028fc <__alt_data_end+0xff8028fc>

008029dc <__sread>:
  8029dc:	defffe04 	addi	sp,sp,-8
  8029e0:	dc000015 	stw	r16,0(sp)
  8029e4:	2821883a 	mov	r16,r5
  8029e8:	2940038f 	ldh	r5,14(r5)
  8029ec:	dfc00115 	stw	ra,4(sp)
  8029f0:	0802dd40 	call	802dd4 <_read_r>
  8029f4:	10000716 	blt	r2,zero,802a14 <__sread+0x38>
  8029f8:	80c01417 	ldw	r3,80(r16)
  8029fc:	1887883a 	add	r3,r3,r2
  802a00:	80c01415 	stw	r3,80(r16)
  802a04:	dfc00117 	ldw	ra,4(sp)
  802a08:	dc000017 	ldw	r16,0(sp)
  802a0c:	dec00204 	addi	sp,sp,8
  802a10:	f800283a 	ret
  802a14:	80c0030b 	ldhu	r3,12(r16)
  802a18:	18fbffcc 	andi	r3,r3,61439
  802a1c:	80c0030d 	sth	r3,12(r16)
  802a20:	dfc00117 	ldw	ra,4(sp)
  802a24:	dc000017 	ldw	r16,0(sp)
  802a28:	dec00204 	addi	sp,sp,8
  802a2c:	f800283a 	ret

00802a30 <__seofread>:
  802a30:	0005883a 	mov	r2,zero
  802a34:	f800283a 	ret

00802a38 <__swrite>:
  802a38:	2880030b 	ldhu	r2,12(r5)
  802a3c:	defffb04 	addi	sp,sp,-20
  802a40:	dcc00315 	stw	r19,12(sp)
  802a44:	dc800215 	stw	r18,8(sp)
  802a48:	dc400115 	stw	r17,4(sp)
  802a4c:	dc000015 	stw	r16,0(sp)
  802a50:	dfc00415 	stw	ra,16(sp)
  802a54:	10c0400c 	andi	r3,r2,256
  802a58:	2821883a 	mov	r16,r5
  802a5c:	2027883a 	mov	r19,r4
  802a60:	3025883a 	mov	r18,r6
  802a64:	3823883a 	mov	r17,r7
  802a68:	18000526 	beq	r3,zero,802a80 <__swrite+0x48>
  802a6c:	2940038f 	ldh	r5,14(r5)
  802a70:	000d883a 	mov	r6,zero
  802a74:	01c00084 	movi	r7,2
  802a78:	0802d780 	call	802d78 <_lseek_r>
  802a7c:	8080030b 	ldhu	r2,12(r16)
  802a80:	8140038f 	ldh	r5,14(r16)
  802a84:	10bbffcc 	andi	r2,r2,61439
  802a88:	9809883a 	mov	r4,r19
  802a8c:	900d883a 	mov	r6,r18
  802a90:	880f883a 	mov	r7,r17
  802a94:	8080030d 	sth	r2,12(r16)
  802a98:	dfc00417 	ldw	ra,16(sp)
  802a9c:	dcc00317 	ldw	r19,12(sp)
  802aa0:	dc800217 	ldw	r18,8(sp)
  802aa4:	dc400117 	ldw	r17,4(sp)
  802aa8:	dc000017 	ldw	r16,0(sp)
  802aac:	dec00504 	addi	sp,sp,20
  802ab0:	0802b181 	jmpi	802b18 <_write_r>

00802ab4 <__sseek>:
  802ab4:	defffe04 	addi	sp,sp,-8
  802ab8:	dc000015 	stw	r16,0(sp)
  802abc:	2821883a 	mov	r16,r5
  802ac0:	2940038f 	ldh	r5,14(r5)
  802ac4:	dfc00115 	stw	ra,4(sp)
  802ac8:	0802d780 	call	802d78 <_lseek_r>
  802acc:	00ffffc4 	movi	r3,-1
  802ad0:	10c00826 	beq	r2,r3,802af4 <__sseek+0x40>
  802ad4:	80c0030b 	ldhu	r3,12(r16)
  802ad8:	80801415 	stw	r2,80(r16)
  802adc:	18c40014 	ori	r3,r3,4096
  802ae0:	80c0030d 	sth	r3,12(r16)
  802ae4:	dfc00117 	ldw	ra,4(sp)
  802ae8:	dc000017 	ldw	r16,0(sp)
  802aec:	dec00204 	addi	sp,sp,8
  802af0:	f800283a 	ret
  802af4:	80c0030b 	ldhu	r3,12(r16)
  802af8:	18fbffcc 	andi	r3,r3,61439
  802afc:	80c0030d 	sth	r3,12(r16)
  802b00:	dfc00117 	ldw	ra,4(sp)
  802b04:	dc000017 	ldw	r16,0(sp)
  802b08:	dec00204 	addi	sp,sp,8
  802b0c:	f800283a 	ret

00802b10 <__sclose>:
  802b10:	2940038f 	ldh	r5,14(r5)
  802b14:	0802b741 	jmpi	802b74 <_close_r>

00802b18 <_write_r>:
  802b18:	defffd04 	addi	sp,sp,-12
  802b1c:	dc000015 	stw	r16,0(sp)
  802b20:	04002074 	movhi	r16,129
  802b24:	dc400115 	stw	r17,4(sp)
  802b28:	8420cd04 	addi	r16,r16,-31948
  802b2c:	2023883a 	mov	r17,r4
  802b30:	2809883a 	mov	r4,r5
  802b34:	300b883a 	mov	r5,r6
  802b38:	380d883a 	mov	r6,r7
  802b3c:	dfc00215 	stw	ra,8(sp)
  802b40:	80000015 	stw	zero,0(r16)
  802b44:	08038080 	call	803808 <write>
  802b48:	00ffffc4 	movi	r3,-1
  802b4c:	10c00526 	beq	r2,r3,802b64 <_write_r+0x4c>
  802b50:	dfc00217 	ldw	ra,8(sp)
  802b54:	dc400117 	ldw	r17,4(sp)
  802b58:	dc000017 	ldw	r16,0(sp)
  802b5c:	dec00304 	addi	sp,sp,12
  802b60:	f800283a 	ret
  802b64:	80c00017 	ldw	r3,0(r16)
  802b68:	183ff926 	beq	r3,zero,802b50 <__alt_data_end+0xff802b50>
  802b6c:	88c00015 	stw	r3,0(r17)
  802b70:	003ff706 	br	802b50 <__alt_data_end+0xff802b50>

00802b74 <_close_r>:
  802b74:	defffd04 	addi	sp,sp,-12
  802b78:	dc000015 	stw	r16,0(sp)
  802b7c:	04002074 	movhi	r16,129
  802b80:	dc400115 	stw	r17,4(sp)
  802b84:	8420cd04 	addi	r16,r16,-31948
  802b88:	2023883a 	mov	r17,r4
  802b8c:	2809883a 	mov	r4,r5
  802b90:	dfc00215 	stw	ra,8(sp)
  802b94:	80000015 	stw	zero,0(r16)
  802b98:	0802fac0 	call	802fac <close>
  802b9c:	00ffffc4 	movi	r3,-1
  802ba0:	10c00526 	beq	r2,r3,802bb8 <_close_r+0x44>
  802ba4:	dfc00217 	ldw	ra,8(sp)
  802ba8:	dc400117 	ldw	r17,4(sp)
  802bac:	dc000017 	ldw	r16,0(sp)
  802bb0:	dec00304 	addi	sp,sp,12
  802bb4:	f800283a 	ret
  802bb8:	80c00017 	ldw	r3,0(r16)
  802bbc:	183ff926 	beq	r3,zero,802ba4 <__alt_data_end+0xff802ba4>
  802bc0:	88c00015 	stw	r3,0(r17)
  802bc4:	003ff706 	br	802ba4 <__alt_data_end+0xff802ba4>

00802bc8 <_fclose_r>:
  802bc8:	28003926 	beq	r5,zero,802cb0 <_fclose_r+0xe8>
  802bcc:	defffc04 	addi	sp,sp,-16
  802bd0:	dc400115 	stw	r17,4(sp)
  802bd4:	dc000015 	stw	r16,0(sp)
  802bd8:	dfc00315 	stw	ra,12(sp)
  802bdc:	dc800215 	stw	r18,8(sp)
  802be0:	2023883a 	mov	r17,r4
  802be4:	2821883a 	mov	r16,r5
  802be8:	20000226 	beq	r4,zero,802bf4 <_fclose_r+0x2c>
  802bec:	20800e17 	ldw	r2,56(r4)
  802bf0:	10002726 	beq	r2,zero,802c90 <_fclose_r+0xc8>
  802bf4:	8080030f 	ldh	r2,12(r16)
  802bf8:	1000071e 	bne	r2,zero,802c18 <_fclose_r+0x50>
  802bfc:	0005883a 	mov	r2,zero
  802c00:	dfc00317 	ldw	ra,12(sp)
  802c04:	dc800217 	ldw	r18,8(sp)
  802c08:	dc400117 	ldw	r17,4(sp)
  802c0c:	dc000017 	ldw	r16,0(sp)
  802c10:	dec00404 	addi	sp,sp,16
  802c14:	f800283a 	ret
  802c18:	8809883a 	mov	r4,r17
  802c1c:	800b883a 	mov	r5,r16
  802c20:	0801b300 	call	801b30 <__sflush_r>
  802c24:	1025883a 	mov	r18,r2
  802c28:	80800b17 	ldw	r2,44(r16)
  802c2c:	10000426 	beq	r2,zero,802c40 <_fclose_r+0x78>
  802c30:	81400717 	ldw	r5,28(r16)
  802c34:	8809883a 	mov	r4,r17
  802c38:	103ee83a 	callr	r2
  802c3c:	10001616 	blt	r2,zero,802c98 <_fclose_r+0xd0>
  802c40:	8080030b 	ldhu	r2,12(r16)
  802c44:	1080200c 	andi	r2,r2,128
  802c48:	1000151e 	bne	r2,zero,802ca0 <_fclose_r+0xd8>
  802c4c:	81400c17 	ldw	r5,48(r16)
  802c50:	28000526 	beq	r5,zero,802c68 <_fclose_r+0xa0>
  802c54:	80801004 	addi	r2,r16,64
  802c58:	28800226 	beq	r5,r2,802c64 <_fclose_r+0x9c>
  802c5c:	8809883a 	mov	r4,r17
  802c60:	08022880 	call	802288 <_free_r>
  802c64:	80000c15 	stw	zero,48(r16)
  802c68:	81401117 	ldw	r5,68(r16)
  802c6c:	28000326 	beq	r5,zero,802c7c <_fclose_r+0xb4>
  802c70:	8809883a 	mov	r4,r17
  802c74:	08022880 	call	802288 <_free_r>
  802c78:	80001115 	stw	zero,68(r16)
  802c7c:	08021240 	call	802124 <__sfp_lock_acquire>
  802c80:	8000030d 	sth	zero,12(r16)
  802c84:	08021280 	call	802128 <__sfp_lock_release>
  802c88:	9005883a 	mov	r2,r18
  802c8c:	003fdc06 	br	802c00 <__alt_data_end+0xff802c00>
  802c90:	08021140 	call	802114 <__sinit>
  802c94:	003fd706 	br	802bf4 <__alt_data_end+0xff802bf4>
  802c98:	04bfffc4 	movi	r18,-1
  802c9c:	003fe806 	br	802c40 <__alt_data_end+0xff802c40>
  802ca0:	81400417 	ldw	r5,16(r16)
  802ca4:	8809883a 	mov	r4,r17
  802ca8:	08022880 	call	802288 <_free_r>
  802cac:	003fe706 	br	802c4c <__alt_data_end+0xff802c4c>
  802cb0:	0005883a 	mov	r2,zero
  802cb4:	f800283a 	ret

00802cb8 <fclose>:
  802cb8:	00802034 	movhi	r2,128
  802cbc:	109d9a04 	addi	r2,r2,30312
  802cc0:	200b883a 	mov	r5,r4
  802cc4:	11000017 	ldw	r4,0(r2)
  802cc8:	0802bc81 	jmpi	802bc8 <_fclose_r>

00802ccc <_fstat_r>:
  802ccc:	defffd04 	addi	sp,sp,-12
  802cd0:	dc000015 	stw	r16,0(sp)
  802cd4:	04002074 	movhi	r16,129
  802cd8:	dc400115 	stw	r17,4(sp)
  802cdc:	8420cd04 	addi	r16,r16,-31948
  802ce0:	2023883a 	mov	r17,r4
  802ce4:	2809883a 	mov	r4,r5
  802ce8:	300b883a 	mov	r5,r6
  802cec:	dfc00215 	stw	ra,8(sp)
  802cf0:	80000015 	stw	zero,0(r16)
  802cf4:	08030f80 	call	8030f8 <fstat>
  802cf8:	00ffffc4 	movi	r3,-1
  802cfc:	10c00526 	beq	r2,r3,802d14 <_fstat_r+0x48>
  802d00:	dfc00217 	ldw	ra,8(sp)
  802d04:	dc400117 	ldw	r17,4(sp)
  802d08:	dc000017 	ldw	r16,0(sp)
  802d0c:	dec00304 	addi	sp,sp,12
  802d10:	f800283a 	ret
  802d14:	80c00017 	ldw	r3,0(r16)
  802d18:	183ff926 	beq	r3,zero,802d00 <__alt_data_end+0xff802d00>
  802d1c:	88c00015 	stw	r3,0(r17)
  802d20:	003ff706 	br	802d00 <__alt_data_end+0xff802d00>

00802d24 <_isatty_r>:
  802d24:	defffd04 	addi	sp,sp,-12
  802d28:	dc000015 	stw	r16,0(sp)
  802d2c:	04002074 	movhi	r16,129
  802d30:	dc400115 	stw	r17,4(sp)
  802d34:	8420cd04 	addi	r16,r16,-31948
  802d38:	2023883a 	mov	r17,r4
  802d3c:	2809883a 	mov	r4,r5
  802d40:	dfc00215 	stw	ra,8(sp)
  802d44:	80000015 	stw	zero,0(r16)
  802d48:	08031f80 	call	8031f8 <isatty>
  802d4c:	00ffffc4 	movi	r3,-1
  802d50:	10c00526 	beq	r2,r3,802d68 <_isatty_r+0x44>
  802d54:	dfc00217 	ldw	ra,8(sp)
  802d58:	dc400117 	ldw	r17,4(sp)
  802d5c:	dc000017 	ldw	r16,0(sp)
  802d60:	dec00304 	addi	sp,sp,12
  802d64:	f800283a 	ret
  802d68:	80c00017 	ldw	r3,0(r16)
  802d6c:	183ff926 	beq	r3,zero,802d54 <__alt_data_end+0xff802d54>
  802d70:	88c00015 	stw	r3,0(r17)
  802d74:	003ff706 	br	802d54 <__alt_data_end+0xff802d54>

00802d78 <_lseek_r>:
  802d78:	defffd04 	addi	sp,sp,-12
  802d7c:	dc000015 	stw	r16,0(sp)
  802d80:	04002074 	movhi	r16,129
  802d84:	dc400115 	stw	r17,4(sp)
  802d88:	8420cd04 	addi	r16,r16,-31948
  802d8c:	2023883a 	mov	r17,r4
  802d90:	2809883a 	mov	r4,r5
  802d94:	300b883a 	mov	r5,r6
  802d98:	380d883a 	mov	r6,r7
  802d9c:	dfc00215 	stw	ra,8(sp)
  802da0:	80000015 	stw	zero,0(r16)
  802da4:	08033d00 	call	8033d0 <lseek>
  802da8:	00ffffc4 	movi	r3,-1
  802dac:	10c00526 	beq	r2,r3,802dc4 <_lseek_r+0x4c>
  802db0:	dfc00217 	ldw	ra,8(sp)
  802db4:	dc400117 	ldw	r17,4(sp)
  802db8:	dc000017 	ldw	r16,0(sp)
  802dbc:	dec00304 	addi	sp,sp,12
  802dc0:	f800283a 	ret
  802dc4:	80c00017 	ldw	r3,0(r16)
  802dc8:	183ff926 	beq	r3,zero,802db0 <__alt_data_end+0xff802db0>
  802dcc:	88c00015 	stw	r3,0(r17)
  802dd0:	003ff706 	br	802db0 <__alt_data_end+0xff802db0>

00802dd4 <_read_r>:
  802dd4:	defffd04 	addi	sp,sp,-12
  802dd8:	dc000015 	stw	r16,0(sp)
  802ddc:	04002074 	movhi	r16,129
  802de0:	dc400115 	stw	r17,4(sp)
  802de4:	8420cd04 	addi	r16,r16,-31948
  802de8:	2023883a 	mov	r17,r4
  802dec:	2809883a 	mov	r4,r5
  802df0:	300b883a 	mov	r5,r6
  802df4:	380d883a 	mov	r6,r7
  802df8:	dfc00215 	stw	ra,8(sp)
  802dfc:	80000015 	stw	zero,0(r16)
  802e00:	08035ac0 	call	8035ac <read>
  802e04:	00ffffc4 	movi	r3,-1
  802e08:	10c00526 	beq	r2,r3,802e20 <_read_r+0x4c>
  802e0c:	dfc00217 	ldw	ra,8(sp)
  802e10:	dc400117 	ldw	r17,4(sp)
  802e14:	dc000017 	ldw	r16,0(sp)
  802e18:	dec00304 	addi	sp,sp,12
  802e1c:	f800283a 	ret
  802e20:	80c00017 	ldw	r3,0(r16)
  802e24:	183ff926 	beq	r3,zero,802e0c <__alt_data_end+0xff802e0c>
  802e28:	88c00015 	stw	r3,0(r17)
  802e2c:	003ff706 	br	802e0c <__alt_data_end+0xff802e0c>

00802e30 <udivmodsi4>:
  802e30:	2900182e 	bgeu	r5,r4,802e94 <udivmodsi4+0x64>
  802e34:	28001716 	blt	r5,zero,802e94 <udivmodsi4+0x64>
  802e38:	00800804 	movi	r2,32
  802e3c:	00c00044 	movi	r3,1
  802e40:	00000206 	br	802e4c <udivmodsi4+0x1c>
  802e44:	10001126 	beq	r2,zero,802e8c <udivmodsi4+0x5c>
  802e48:	28000516 	blt	r5,zero,802e60 <udivmodsi4+0x30>
  802e4c:	294b883a 	add	r5,r5,r5
  802e50:	10bfffc4 	addi	r2,r2,-1
  802e54:	18c7883a 	add	r3,r3,r3
  802e58:	293ffa36 	bltu	r5,r4,802e44 <__alt_data_end+0xff802e44>
  802e5c:	18000b26 	beq	r3,zero,802e8c <udivmodsi4+0x5c>
  802e60:	0005883a 	mov	r2,zero
  802e64:	21400236 	bltu	r4,r5,802e70 <udivmodsi4+0x40>
  802e68:	2149c83a 	sub	r4,r4,r5
  802e6c:	10c4b03a 	or	r2,r2,r3
  802e70:	1806d07a 	srli	r3,r3,1
  802e74:	280ad07a 	srli	r5,r5,1
  802e78:	183ffa1e 	bne	r3,zero,802e64 <__alt_data_end+0xff802e64>
  802e7c:	3000011e 	bne	r6,zero,802e84 <udivmodsi4+0x54>
  802e80:	f800283a 	ret
  802e84:	2005883a 	mov	r2,r4
  802e88:	f800283a 	ret
  802e8c:	0005883a 	mov	r2,zero
  802e90:	003ffa06 	br	802e7c <__alt_data_end+0xff802e7c>
  802e94:	00c00044 	movi	r3,1
  802e98:	003ff106 	br	802e60 <__alt_data_end+0xff802e60>

00802e9c <__divsi3>:
  802e9c:	defffe04 	addi	sp,sp,-8
  802ea0:	dfc00115 	stw	ra,4(sp)
  802ea4:	dc000015 	stw	r16,0(sp)
  802ea8:	20000b16 	blt	r4,zero,802ed8 <__divsi3+0x3c>
  802eac:	0021883a 	mov	r16,zero
  802eb0:	28000c16 	blt	r5,zero,802ee4 <__divsi3+0x48>
  802eb4:	000d883a 	mov	r6,zero
  802eb8:	0802e300 	call	802e30 <udivmodsi4>
  802ebc:	0407c83a 	sub	r3,zero,r16
  802ec0:	1884f03a 	xor	r2,r3,r2
  802ec4:	1405883a 	add	r2,r2,r16
  802ec8:	dfc00117 	ldw	ra,4(sp)
  802ecc:	dc000017 	ldw	r16,0(sp)
  802ed0:	dec00204 	addi	sp,sp,8
  802ed4:	f800283a 	ret
  802ed8:	0109c83a 	sub	r4,zero,r4
  802edc:	04000044 	movi	r16,1
  802ee0:	283ff40e 	bge	r5,zero,802eb4 <__alt_data_end+0xff802eb4>
  802ee4:	014bc83a 	sub	r5,zero,r5
  802ee8:	8400005c 	xori	r16,r16,1
  802eec:	003ff106 	br	802eb4 <__alt_data_end+0xff802eb4>

00802ef0 <__modsi3>:
  802ef0:	defffd04 	addi	sp,sp,-12
  802ef4:	dfc00215 	stw	ra,8(sp)
  802ef8:	dc400115 	stw	r17,4(sp)
  802efc:	dc000015 	stw	r16,0(sp)
  802f00:	20000c16 	blt	r4,zero,802f34 <__modsi3+0x44>
  802f04:	0023883a 	mov	r17,zero
  802f08:	0021883a 	mov	r16,zero
  802f0c:	28000d16 	blt	r5,zero,802f44 <__modsi3+0x54>
  802f10:	01800044 	movi	r6,1
  802f14:	0802e300 	call	802e30 <udivmodsi4>
  802f18:	1404f03a 	xor	r2,r2,r16
  802f1c:	8885883a 	add	r2,r17,r2
  802f20:	dfc00217 	ldw	ra,8(sp)
  802f24:	dc400117 	ldw	r17,4(sp)
  802f28:	dc000017 	ldw	r16,0(sp)
  802f2c:	dec00304 	addi	sp,sp,12
  802f30:	f800283a 	ret
  802f34:	0109c83a 	sub	r4,zero,r4
  802f38:	04400044 	movi	r17,1
  802f3c:	043fffc4 	movi	r16,-1
  802f40:	283ff30e 	bge	r5,zero,802f10 <__alt_data_end+0xff802f10>
  802f44:	014bc83a 	sub	r5,zero,r5
  802f48:	003ff106 	br	802f10 <__alt_data_end+0xff802f10>

00802f4c <__udivsi3>:
  802f4c:	000d883a 	mov	r6,zero
  802f50:	0802e301 	jmpi	802e30 <udivmodsi4>

00802f54 <__umodsi3>:
  802f54:	01800044 	movi	r6,1
  802f58:	0802e301 	jmpi	802e30 <udivmodsi4>

00802f5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802f5c:	defffe04 	addi	sp,sp,-8
  802f60:	dfc00115 	stw	ra,4(sp)
  802f64:	df000015 	stw	fp,0(sp)
  802f68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802f6c:	00802034 	movhi	r2,128
  802f70:	109da204 	addi	r2,r2,30344
  802f74:	10800017 	ldw	r2,0(r2)
  802f78:	10000526 	beq	r2,zero,802f90 <alt_get_errno+0x34>
  802f7c:	00802034 	movhi	r2,128
  802f80:	109da204 	addi	r2,r2,30344
  802f84:	10800017 	ldw	r2,0(r2)
  802f88:	103ee83a 	callr	r2
  802f8c:	00000206 	br	802f98 <alt_get_errno+0x3c>
  802f90:	00802074 	movhi	r2,129
  802f94:	10a0cd04 	addi	r2,r2,-31948
}
  802f98:	e037883a 	mov	sp,fp
  802f9c:	dfc00117 	ldw	ra,4(sp)
  802fa0:	df000017 	ldw	fp,0(sp)
  802fa4:	dec00204 	addi	sp,sp,8
  802fa8:	f800283a 	ret

00802fac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802fac:	defffb04 	addi	sp,sp,-20
  802fb0:	dfc00415 	stw	ra,16(sp)
  802fb4:	df000315 	stw	fp,12(sp)
  802fb8:	df000304 	addi	fp,sp,12
  802fbc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802fc0:	e0bfff17 	ldw	r2,-4(fp)
  802fc4:	10000616 	blt	r2,zero,802fe0 <close+0x34>
  802fc8:	e0bfff17 	ldw	r2,-4(fp)
  802fcc:	10c00324 	muli	r3,r2,12
  802fd0:	00802034 	movhi	r2,128
  802fd4:	109c9d04 	addi	r2,r2,29300
  802fd8:	1885883a 	add	r2,r3,r2
  802fdc:	00000106 	br	802fe4 <close+0x38>
  802fe0:	0005883a 	mov	r2,zero
  802fe4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802fe8:	e0bffd17 	ldw	r2,-12(fp)
  802fec:	10001926 	beq	r2,zero,803054 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802ff0:	e0bffd17 	ldw	r2,-12(fp)
  802ff4:	10800017 	ldw	r2,0(r2)
  802ff8:	10800417 	ldw	r2,16(r2)
  802ffc:	10000626 	beq	r2,zero,803018 <close+0x6c>
  803000:	e0bffd17 	ldw	r2,-12(fp)
  803004:	10800017 	ldw	r2,0(r2)
  803008:	10800417 	ldw	r2,16(r2)
  80300c:	e13ffd17 	ldw	r4,-12(fp)
  803010:	103ee83a 	callr	r2
  803014:	00000106 	br	80301c <close+0x70>
  803018:	0005883a 	mov	r2,zero
  80301c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803020:	e13fff17 	ldw	r4,-4(fp)
  803024:	08036a80 	call	8036a8 <alt_release_fd>
    if (rval < 0)
  803028:	e0bffe17 	ldw	r2,-8(fp)
  80302c:	1000070e 	bge	r2,zero,80304c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  803030:	0802f5c0 	call	802f5c <alt_get_errno>
  803034:	1007883a 	mov	r3,r2
  803038:	e0bffe17 	ldw	r2,-8(fp)
  80303c:	0085c83a 	sub	r2,zero,r2
  803040:	18800015 	stw	r2,0(r3)
      return -1;
  803044:	00bfffc4 	movi	r2,-1
  803048:	00000706 	br	803068 <close+0xbc>
    }
    return 0;
  80304c:	0005883a 	mov	r2,zero
  803050:	00000506 	br	803068 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803054:	0802f5c0 	call	802f5c <alt_get_errno>
  803058:	1007883a 	mov	r3,r2
  80305c:	00801444 	movi	r2,81
  803060:	18800015 	stw	r2,0(r3)
    return -1;
  803064:	00bfffc4 	movi	r2,-1
  }
}
  803068:	e037883a 	mov	sp,fp
  80306c:	dfc00117 	ldw	ra,4(sp)
  803070:	df000017 	ldw	fp,0(sp)
  803074:	dec00204 	addi	sp,sp,8
  803078:	f800283a 	ret

0080307c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80307c:	defffc04 	addi	sp,sp,-16
  803080:	df000315 	stw	fp,12(sp)
  803084:	df000304 	addi	fp,sp,12
  803088:	e13ffd15 	stw	r4,-12(fp)
  80308c:	e17ffe15 	stw	r5,-8(fp)
  803090:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803094:	e0bfff17 	ldw	r2,-4(fp)
}
  803098:	e037883a 	mov	sp,fp
  80309c:	df000017 	ldw	fp,0(sp)
  8030a0:	dec00104 	addi	sp,sp,4
  8030a4:	f800283a 	ret

008030a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030a8:	defffe04 	addi	sp,sp,-8
  8030ac:	dfc00115 	stw	ra,4(sp)
  8030b0:	df000015 	stw	fp,0(sp)
  8030b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8030b8:	00802034 	movhi	r2,128
  8030bc:	109da204 	addi	r2,r2,30344
  8030c0:	10800017 	ldw	r2,0(r2)
  8030c4:	10000526 	beq	r2,zero,8030dc <alt_get_errno+0x34>
  8030c8:	00802034 	movhi	r2,128
  8030cc:	109da204 	addi	r2,r2,30344
  8030d0:	10800017 	ldw	r2,0(r2)
  8030d4:	103ee83a 	callr	r2
  8030d8:	00000206 	br	8030e4 <alt_get_errno+0x3c>
  8030dc:	00802074 	movhi	r2,129
  8030e0:	10a0cd04 	addi	r2,r2,-31948
}
  8030e4:	e037883a 	mov	sp,fp
  8030e8:	dfc00117 	ldw	ra,4(sp)
  8030ec:	df000017 	ldw	fp,0(sp)
  8030f0:	dec00204 	addi	sp,sp,8
  8030f4:	f800283a 	ret

008030f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8030f8:	defffb04 	addi	sp,sp,-20
  8030fc:	dfc00415 	stw	ra,16(sp)
  803100:	df000315 	stw	fp,12(sp)
  803104:	df000304 	addi	fp,sp,12
  803108:	e13ffe15 	stw	r4,-8(fp)
  80310c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803110:	e0bffe17 	ldw	r2,-8(fp)
  803114:	10000616 	blt	r2,zero,803130 <fstat+0x38>
  803118:	e0bffe17 	ldw	r2,-8(fp)
  80311c:	10c00324 	muli	r3,r2,12
  803120:	00802034 	movhi	r2,128
  803124:	109c9d04 	addi	r2,r2,29300
  803128:	1885883a 	add	r2,r3,r2
  80312c:	00000106 	br	803134 <fstat+0x3c>
  803130:	0005883a 	mov	r2,zero
  803134:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  803138:	e0bffd17 	ldw	r2,-12(fp)
  80313c:	10001026 	beq	r2,zero,803180 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803140:	e0bffd17 	ldw	r2,-12(fp)
  803144:	10800017 	ldw	r2,0(r2)
  803148:	10800817 	ldw	r2,32(r2)
  80314c:	10000726 	beq	r2,zero,80316c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  803150:	e0bffd17 	ldw	r2,-12(fp)
  803154:	10800017 	ldw	r2,0(r2)
  803158:	10800817 	ldw	r2,32(r2)
  80315c:	e13ffd17 	ldw	r4,-12(fp)
  803160:	e17fff17 	ldw	r5,-4(fp)
  803164:	103ee83a 	callr	r2
  803168:	00000a06 	br	803194 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80316c:	e0bfff17 	ldw	r2,-4(fp)
  803170:	00c80004 	movi	r3,8192
  803174:	10c00115 	stw	r3,4(r2)
      return 0;
  803178:	0005883a 	mov	r2,zero
  80317c:	00000506 	br	803194 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803180:	08030a80 	call	8030a8 <alt_get_errno>
  803184:	1007883a 	mov	r3,r2
  803188:	00801444 	movi	r2,81
  80318c:	18800015 	stw	r2,0(r3)
    return -1;
  803190:	00bfffc4 	movi	r2,-1
  }
}
  803194:	e037883a 	mov	sp,fp
  803198:	dfc00117 	ldw	ra,4(sp)
  80319c:	df000017 	ldw	fp,0(sp)
  8031a0:	dec00204 	addi	sp,sp,8
  8031a4:	f800283a 	ret

008031a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8031a8:	defffe04 	addi	sp,sp,-8
  8031ac:	dfc00115 	stw	ra,4(sp)
  8031b0:	df000015 	stw	fp,0(sp)
  8031b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8031b8:	00802034 	movhi	r2,128
  8031bc:	109da204 	addi	r2,r2,30344
  8031c0:	10800017 	ldw	r2,0(r2)
  8031c4:	10000526 	beq	r2,zero,8031dc <alt_get_errno+0x34>
  8031c8:	00802034 	movhi	r2,128
  8031cc:	109da204 	addi	r2,r2,30344
  8031d0:	10800017 	ldw	r2,0(r2)
  8031d4:	103ee83a 	callr	r2
  8031d8:	00000206 	br	8031e4 <alt_get_errno+0x3c>
  8031dc:	00802074 	movhi	r2,129
  8031e0:	10a0cd04 	addi	r2,r2,-31948
}
  8031e4:	e037883a 	mov	sp,fp
  8031e8:	dfc00117 	ldw	ra,4(sp)
  8031ec:	df000017 	ldw	fp,0(sp)
  8031f0:	dec00204 	addi	sp,sp,8
  8031f4:	f800283a 	ret

008031f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8031f8:	deffed04 	addi	sp,sp,-76
  8031fc:	dfc01215 	stw	ra,72(sp)
  803200:	df001115 	stw	fp,68(sp)
  803204:	df001104 	addi	fp,sp,68
  803208:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80320c:	e0bfff17 	ldw	r2,-4(fp)
  803210:	10000616 	blt	r2,zero,80322c <isatty+0x34>
  803214:	e0bfff17 	ldw	r2,-4(fp)
  803218:	10c00324 	muli	r3,r2,12
  80321c:	00802034 	movhi	r2,128
  803220:	109c9d04 	addi	r2,r2,29300
  803224:	1885883a 	add	r2,r3,r2
  803228:	00000106 	br	803230 <isatty+0x38>
  80322c:	0005883a 	mov	r2,zero
  803230:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803234:	e0bfef17 	ldw	r2,-68(fp)
  803238:	10000e26 	beq	r2,zero,803274 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80323c:	e0bfef17 	ldw	r2,-68(fp)
  803240:	10800017 	ldw	r2,0(r2)
  803244:	10800817 	ldw	r2,32(r2)
  803248:	1000021e 	bne	r2,zero,803254 <isatty+0x5c>
    {
      return 1;
  80324c:	00800044 	movi	r2,1
  803250:	00000d06 	br	803288 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803254:	e0bff004 	addi	r2,fp,-64
  803258:	e13fff17 	ldw	r4,-4(fp)
  80325c:	100b883a 	mov	r5,r2
  803260:	08030f80 	call	8030f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803264:	e0bff117 	ldw	r2,-60(fp)
  803268:	10880020 	cmpeqi	r2,r2,8192
  80326c:	10803fcc 	andi	r2,r2,255
  803270:	00000506 	br	803288 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803274:	08031a80 	call	8031a8 <alt_get_errno>
  803278:	1007883a 	mov	r3,r2
  80327c:	00801444 	movi	r2,81
  803280:	18800015 	stw	r2,0(r3)
    return 0;
  803284:	0005883a 	mov	r2,zero
  }
}
  803288:	e037883a 	mov	sp,fp
  80328c:	dfc00117 	ldw	ra,4(sp)
  803290:	df000017 	ldw	fp,0(sp)
  803294:	dec00204 	addi	sp,sp,8
  803298:	f800283a 	ret

0080329c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80329c:	defffc04 	addi	sp,sp,-16
  8032a0:	df000315 	stw	fp,12(sp)
  8032a4:	df000304 	addi	fp,sp,12
  8032a8:	e13ffd15 	stw	r4,-12(fp)
  8032ac:	e17ffe15 	stw	r5,-8(fp)
  8032b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8032b4:	e0fffe17 	ldw	r3,-8(fp)
  8032b8:	e0bffd17 	ldw	r2,-12(fp)
  8032bc:	18800c26 	beq	r3,r2,8032f0 <alt_load_section+0x54>
  {
    while( to != end )
  8032c0:	00000806 	br	8032e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  8032c4:	e0bffe17 	ldw	r2,-8(fp)
  8032c8:	10c00104 	addi	r3,r2,4
  8032cc:	e0fffe15 	stw	r3,-8(fp)
  8032d0:	e0fffd17 	ldw	r3,-12(fp)
  8032d4:	19000104 	addi	r4,r3,4
  8032d8:	e13ffd15 	stw	r4,-12(fp)
  8032dc:	18c00017 	ldw	r3,0(r3)
  8032e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8032e4:	e0fffe17 	ldw	r3,-8(fp)
  8032e8:	e0bfff17 	ldw	r2,-4(fp)
  8032ec:	18bff51e 	bne	r3,r2,8032c4 <__alt_data_end+0xff8032c4>
    {
      *to++ = *from++;
    }
  }
}
  8032f0:	e037883a 	mov	sp,fp
  8032f4:	df000017 	ldw	fp,0(sp)
  8032f8:	dec00104 	addi	sp,sp,4
  8032fc:	f800283a 	ret

00803300 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803300:	defffe04 	addi	sp,sp,-8
  803304:	dfc00115 	stw	ra,4(sp)
  803308:	df000015 	stw	fp,0(sp)
  80330c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803310:	01002034 	movhi	r4,128
  803314:	211da904 	addi	r4,r4,30372
  803318:	01402034 	movhi	r5,128
  80331c:	295a8804 	addi	r5,r5,27168
  803320:	01802034 	movhi	r6,128
  803324:	319da904 	addi	r6,r6,30372
  803328:	080329c0 	call	80329c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80332c:	01002034 	movhi	r4,128
  803330:	21000804 	addi	r4,r4,32
  803334:	01402034 	movhi	r5,128
  803338:	29400804 	addi	r5,r5,32
  80333c:	01802034 	movhi	r6,128
  803340:	31809104 	addi	r6,r6,580
  803344:	080329c0 	call	80329c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  803348:	01002034 	movhi	r4,128
  80334c:	2119c204 	addi	r4,r4,26376
  803350:	01402034 	movhi	r5,128
  803354:	2959c204 	addi	r5,r5,26376
  803358:	01802034 	movhi	r6,128
  80335c:	319a8804 	addi	r6,r6,27168
  803360:	080329c0 	call	80329c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  803364:	08055240 	call	805524 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803368:	08057140 	call	805714 <alt_icache_flush_all>
}
  80336c:	e037883a 	mov	sp,fp
  803370:	dfc00117 	ldw	ra,4(sp)
  803374:	df000017 	ldw	fp,0(sp)
  803378:	dec00204 	addi	sp,sp,8
  80337c:	f800283a 	ret

00803380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803380:	defffe04 	addi	sp,sp,-8
  803384:	dfc00115 	stw	ra,4(sp)
  803388:	df000015 	stw	fp,0(sp)
  80338c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803390:	00802034 	movhi	r2,128
  803394:	109da204 	addi	r2,r2,30344
  803398:	10800017 	ldw	r2,0(r2)
  80339c:	10000526 	beq	r2,zero,8033b4 <alt_get_errno+0x34>
  8033a0:	00802034 	movhi	r2,128
  8033a4:	109da204 	addi	r2,r2,30344
  8033a8:	10800017 	ldw	r2,0(r2)
  8033ac:	103ee83a 	callr	r2
  8033b0:	00000206 	br	8033bc <alt_get_errno+0x3c>
  8033b4:	00802074 	movhi	r2,129
  8033b8:	10a0cd04 	addi	r2,r2,-31948
}
  8033bc:	e037883a 	mov	sp,fp
  8033c0:	dfc00117 	ldw	ra,4(sp)
  8033c4:	df000017 	ldw	fp,0(sp)
  8033c8:	dec00204 	addi	sp,sp,8
  8033cc:	f800283a 	ret

008033d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8033d0:	defff904 	addi	sp,sp,-28
  8033d4:	dfc00615 	stw	ra,24(sp)
  8033d8:	df000515 	stw	fp,20(sp)
  8033dc:	df000504 	addi	fp,sp,20
  8033e0:	e13ffd15 	stw	r4,-12(fp)
  8033e4:	e17ffe15 	stw	r5,-8(fp)
  8033e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8033ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8033f0:	e0bffd17 	ldw	r2,-12(fp)
  8033f4:	10000616 	blt	r2,zero,803410 <lseek+0x40>
  8033f8:	e0bffd17 	ldw	r2,-12(fp)
  8033fc:	10c00324 	muli	r3,r2,12
  803400:	00802034 	movhi	r2,128
  803404:	109c9d04 	addi	r2,r2,29300
  803408:	1885883a 	add	r2,r3,r2
  80340c:	00000106 	br	803414 <lseek+0x44>
  803410:	0005883a 	mov	r2,zero
  803414:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803418:	e0bffc17 	ldw	r2,-16(fp)
  80341c:	10001026 	beq	r2,zero,803460 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803420:	e0bffc17 	ldw	r2,-16(fp)
  803424:	10800017 	ldw	r2,0(r2)
  803428:	10800717 	ldw	r2,28(r2)
  80342c:	10000926 	beq	r2,zero,803454 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	10800017 	ldw	r2,0(r2)
  803438:	10800717 	ldw	r2,28(r2)
  80343c:	e13ffc17 	ldw	r4,-16(fp)
  803440:	e17ffe17 	ldw	r5,-8(fp)
  803444:	e1bfff17 	ldw	r6,-4(fp)
  803448:	103ee83a 	callr	r2
  80344c:	e0bffb15 	stw	r2,-20(fp)
  803450:	00000506 	br	803468 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803454:	00bfde84 	movi	r2,-134
  803458:	e0bffb15 	stw	r2,-20(fp)
  80345c:	00000206 	br	803468 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  803460:	00bfebc4 	movi	r2,-81
  803464:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  803468:	e0bffb17 	ldw	r2,-20(fp)
  80346c:	1000070e 	bge	r2,zero,80348c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  803470:	08033800 	call	803380 <alt_get_errno>
  803474:	1007883a 	mov	r3,r2
  803478:	e0bffb17 	ldw	r2,-20(fp)
  80347c:	0085c83a 	sub	r2,zero,r2
  803480:	18800015 	stw	r2,0(r3)
    rc = -1;
  803484:	00bfffc4 	movi	r2,-1
  803488:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80348c:	e0bffb17 	ldw	r2,-20(fp)
}
  803490:	e037883a 	mov	sp,fp
  803494:	dfc00117 	ldw	ra,4(sp)
  803498:	df000017 	ldw	fp,0(sp)
  80349c:	dec00204 	addi	sp,sp,8
  8034a0:	f800283a 	ret

008034a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8034a4:	defffd04 	addi	sp,sp,-12
  8034a8:	dfc00215 	stw	ra,8(sp)
  8034ac:	df000115 	stw	fp,4(sp)
  8034b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8034b4:	0009883a 	mov	r4,zero
  8034b8:	08039380 	call	803938 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8034bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8034c0:	080396c0 	call	80396c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8034c4:	01002034 	movhi	r4,128
  8034c8:	2119cc04 	addi	r4,r4,26416
  8034cc:	01402034 	movhi	r5,128
  8034d0:	2959cc04 	addi	r5,r5,26416
  8034d4:	01802034 	movhi	r6,128
  8034d8:	3199cc04 	addi	r6,r6,26416
  8034dc:	08058040 	call	805804 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8034e0:	080565c0 	call	80565c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8034e4:	01002034 	movhi	r4,128
  8034e8:	2115ae04 	addi	r4,r4,22200
  8034ec:	08063640 	call	806364 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8034f0:	d1233517 	ldw	r4,-29484(gp)
  8034f4:	d0e33617 	ldw	r3,-29480(gp)
  8034f8:	d0a33717 	ldw	r2,-29476(gp)
  8034fc:	180b883a 	mov	r5,r3
  803500:	100d883a 	mov	r6,r2
  803504:	08002900 	call	800290 <main>
  803508:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80350c:	01000044 	movi	r4,1
  803510:	0802fac0 	call	802fac <close>
  exit (result);
  803514:	e13fff17 	ldw	r4,-4(fp)
  803518:	08063780 	call	806378 <exit>

0080351c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80351c:	defffe04 	addi	sp,sp,-8
  803520:	df000115 	stw	fp,4(sp)
  803524:	df000104 	addi	fp,sp,4
  803528:	e13fff15 	stw	r4,-4(fp)
}
  80352c:	e037883a 	mov	sp,fp
  803530:	df000017 	ldw	fp,0(sp)
  803534:	dec00104 	addi	sp,sp,4
  803538:	f800283a 	ret

0080353c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80353c:	defffe04 	addi	sp,sp,-8
  803540:	df000115 	stw	fp,4(sp)
  803544:	df000104 	addi	fp,sp,4
  803548:	e13fff15 	stw	r4,-4(fp)
}
  80354c:	e037883a 	mov	sp,fp
  803550:	df000017 	ldw	fp,0(sp)
  803554:	dec00104 	addi	sp,sp,4
  803558:	f800283a 	ret

0080355c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80355c:	defffe04 	addi	sp,sp,-8
  803560:	dfc00115 	stw	ra,4(sp)
  803564:	df000015 	stw	fp,0(sp)
  803568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80356c:	00802034 	movhi	r2,128
  803570:	109da204 	addi	r2,r2,30344
  803574:	10800017 	ldw	r2,0(r2)
  803578:	10000526 	beq	r2,zero,803590 <alt_get_errno+0x34>
  80357c:	00802034 	movhi	r2,128
  803580:	109da204 	addi	r2,r2,30344
  803584:	10800017 	ldw	r2,0(r2)
  803588:	103ee83a 	callr	r2
  80358c:	00000206 	br	803598 <alt_get_errno+0x3c>
  803590:	00802074 	movhi	r2,129
  803594:	10a0cd04 	addi	r2,r2,-31948
}
  803598:	e037883a 	mov	sp,fp
  80359c:	dfc00117 	ldw	ra,4(sp)
  8035a0:	df000017 	ldw	fp,0(sp)
  8035a4:	dec00204 	addi	sp,sp,8
  8035a8:	f800283a 	ret

008035ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8035ac:	defff904 	addi	sp,sp,-28
  8035b0:	dfc00615 	stw	ra,24(sp)
  8035b4:	df000515 	stw	fp,20(sp)
  8035b8:	df000504 	addi	fp,sp,20
  8035bc:	e13ffd15 	stw	r4,-12(fp)
  8035c0:	e17ffe15 	stw	r5,-8(fp)
  8035c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8035c8:	e0bffd17 	ldw	r2,-12(fp)
  8035cc:	10000616 	blt	r2,zero,8035e8 <read+0x3c>
  8035d0:	e0bffd17 	ldw	r2,-12(fp)
  8035d4:	10c00324 	muli	r3,r2,12
  8035d8:	00802034 	movhi	r2,128
  8035dc:	109c9d04 	addi	r2,r2,29300
  8035e0:	1885883a 	add	r2,r3,r2
  8035e4:	00000106 	br	8035ec <read+0x40>
  8035e8:	0005883a 	mov	r2,zero
  8035ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8035f0:	e0bffb17 	ldw	r2,-20(fp)
  8035f4:	10002226 	beq	r2,zero,803680 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8035f8:	e0bffb17 	ldw	r2,-20(fp)
  8035fc:	10800217 	ldw	r2,8(r2)
  803600:	108000cc 	andi	r2,r2,3
  803604:	10800060 	cmpeqi	r2,r2,1
  803608:	1000181e 	bne	r2,zero,80366c <read+0xc0>
        (fd->dev->read))
  80360c:	e0bffb17 	ldw	r2,-20(fp)
  803610:	10800017 	ldw	r2,0(r2)
  803614:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803618:	10001426 	beq	r2,zero,80366c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80361c:	e0bffb17 	ldw	r2,-20(fp)
  803620:	10800017 	ldw	r2,0(r2)
  803624:	10800517 	ldw	r2,20(r2)
  803628:	e0ffff17 	ldw	r3,-4(fp)
  80362c:	e13ffb17 	ldw	r4,-20(fp)
  803630:	e17ffe17 	ldw	r5,-8(fp)
  803634:	180d883a 	mov	r6,r3
  803638:	103ee83a 	callr	r2
  80363c:	e0bffc15 	stw	r2,-16(fp)
  803640:	e0bffc17 	ldw	r2,-16(fp)
  803644:	1000070e 	bge	r2,zero,803664 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  803648:	080355c0 	call	80355c <alt_get_errno>
  80364c:	1007883a 	mov	r3,r2
  803650:	e0bffc17 	ldw	r2,-16(fp)
  803654:	0085c83a 	sub	r2,zero,r2
  803658:	18800015 	stw	r2,0(r3)
          return -1;
  80365c:	00bfffc4 	movi	r2,-1
  803660:	00000c06 	br	803694 <read+0xe8>
        }
        return rval;
  803664:	e0bffc17 	ldw	r2,-16(fp)
  803668:	00000a06 	br	803694 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80366c:	080355c0 	call	80355c <alt_get_errno>
  803670:	1007883a 	mov	r3,r2
  803674:	00800344 	movi	r2,13
  803678:	18800015 	stw	r2,0(r3)
  80367c:	00000406 	br	803690 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803680:	080355c0 	call	80355c <alt_get_errno>
  803684:	1007883a 	mov	r3,r2
  803688:	00801444 	movi	r2,81
  80368c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803690:	00bfffc4 	movi	r2,-1
}
  803694:	e037883a 	mov	sp,fp
  803698:	dfc00117 	ldw	ra,4(sp)
  80369c:	df000017 	ldw	fp,0(sp)
  8036a0:	dec00204 	addi	sp,sp,8
  8036a4:	f800283a 	ret

008036a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8036a8:	defffe04 	addi	sp,sp,-8
  8036ac:	df000115 	stw	fp,4(sp)
  8036b0:	df000104 	addi	fp,sp,4
  8036b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8036b8:	e0bfff17 	ldw	r2,-4(fp)
  8036bc:	108000d0 	cmplti	r2,r2,3
  8036c0:	10000d1e 	bne	r2,zero,8036f8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8036c4:	00802034 	movhi	r2,128
  8036c8:	109c9d04 	addi	r2,r2,29300
  8036cc:	e0ffff17 	ldw	r3,-4(fp)
  8036d0:	18c00324 	muli	r3,r3,12
  8036d4:	18c00204 	addi	r3,r3,8
  8036d8:	10c5883a 	add	r2,r2,r3
  8036dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8036e0:	00802034 	movhi	r2,128
  8036e4:	109c9d04 	addi	r2,r2,29300
  8036e8:	e0ffff17 	ldw	r3,-4(fp)
  8036ec:	18c00324 	muli	r3,r3,12
  8036f0:	10c5883a 	add	r2,r2,r3
  8036f4:	10000015 	stw	zero,0(r2)
  }
}
  8036f8:	e037883a 	mov	sp,fp
  8036fc:	df000017 	ldw	fp,0(sp)
  803700:	dec00104 	addi	sp,sp,4
  803704:	f800283a 	ret

00803708 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803708:	defff904 	addi	sp,sp,-28
  80370c:	df000615 	stw	fp,24(sp)
  803710:	df000604 	addi	fp,sp,24
  803714:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803718:	0005303a 	rdctl	r2,status
  80371c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803720:	e0fffc17 	ldw	r3,-16(fp)
  803724:	00bfff84 	movi	r2,-2
  803728:	1884703a 	and	r2,r3,r2
  80372c:	1001703a 	wrctl	status,r2
  
  return context;
  803730:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803734:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803738:	d0a00a17 	ldw	r2,-32728(gp)
  80373c:	10c000c4 	addi	r3,r2,3
  803740:	00bfff04 	movi	r2,-4
  803744:	1884703a 	and	r2,r3,r2
  803748:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80374c:	d0e00a17 	ldw	r3,-32728(gp)
  803750:	e0bfff17 	ldw	r2,-4(fp)
  803754:	1887883a 	add	r3,r3,r2
  803758:	00804034 	movhi	r2,256
  80375c:	10800004 	addi	r2,r2,0
  803760:	10c0062e 	bgeu	r2,r3,80377c <sbrk+0x74>
  803764:	e0bffa17 	ldw	r2,-24(fp)
  803768:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80376c:	e0bffd17 	ldw	r2,-12(fp)
  803770:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803774:	00bfffc4 	movi	r2,-1
  803778:	00000b06 	br	8037a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80377c:	d0a00a17 	ldw	r2,-32728(gp)
  803780:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  803784:	d0e00a17 	ldw	r3,-32728(gp)
  803788:	e0bfff17 	ldw	r2,-4(fp)
  80378c:	1885883a 	add	r2,r3,r2
  803790:	d0a00a15 	stw	r2,-32728(gp)
  803794:	e0bffa17 	ldw	r2,-24(fp)
  803798:	e0bffe15 	stw	r2,-8(fp)
  80379c:	e0bffe17 	ldw	r2,-8(fp)
  8037a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8037a4:	e0bffb17 	ldw	r2,-20(fp)
} 
  8037a8:	e037883a 	mov	sp,fp
  8037ac:	df000017 	ldw	fp,0(sp)
  8037b0:	dec00104 	addi	sp,sp,4
  8037b4:	f800283a 	ret

008037b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8037b8:	defffe04 	addi	sp,sp,-8
  8037bc:	dfc00115 	stw	ra,4(sp)
  8037c0:	df000015 	stw	fp,0(sp)
  8037c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8037c8:	00802034 	movhi	r2,128
  8037cc:	109da204 	addi	r2,r2,30344
  8037d0:	10800017 	ldw	r2,0(r2)
  8037d4:	10000526 	beq	r2,zero,8037ec <alt_get_errno+0x34>
  8037d8:	00802034 	movhi	r2,128
  8037dc:	109da204 	addi	r2,r2,30344
  8037e0:	10800017 	ldw	r2,0(r2)
  8037e4:	103ee83a 	callr	r2
  8037e8:	00000206 	br	8037f4 <alt_get_errno+0x3c>
  8037ec:	00802074 	movhi	r2,129
  8037f0:	10a0cd04 	addi	r2,r2,-31948
}
  8037f4:	e037883a 	mov	sp,fp
  8037f8:	dfc00117 	ldw	ra,4(sp)
  8037fc:	df000017 	ldw	fp,0(sp)
  803800:	dec00204 	addi	sp,sp,8
  803804:	f800283a 	ret

00803808 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803808:	defff904 	addi	sp,sp,-28
  80380c:	dfc00615 	stw	ra,24(sp)
  803810:	df000515 	stw	fp,20(sp)
  803814:	df000504 	addi	fp,sp,20
  803818:	e13ffd15 	stw	r4,-12(fp)
  80381c:	e17ffe15 	stw	r5,-8(fp)
  803820:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803824:	e0bffd17 	ldw	r2,-12(fp)
  803828:	10000616 	blt	r2,zero,803844 <write+0x3c>
  80382c:	e0bffd17 	ldw	r2,-12(fp)
  803830:	10c00324 	muli	r3,r2,12
  803834:	00802034 	movhi	r2,128
  803838:	109c9d04 	addi	r2,r2,29300
  80383c:	1885883a 	add	r2,r3,r2
  803840:	00000106 	br	803848 <write+0x40>
  803844:	0005883a 	mov	r2,zero
  803848:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80384c:	e0bffb17 	ldw	r2,-20(fp)
  803850:	10002126 	beq	r2,zero,8038d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803854:	e0bffb17 	ldw	r2,-20(fp)
  803858:	10800217 	ldw	r2,8(r2)
  80385c:	108000cc 	andi	r2,r2,3
  803860:	10001826 	beq	r2,zero,8038c4 <write+0xbc>
  803864:	e0bffb17 	ldw	r2,-20(fp)
  803868:	10800017 	ldw	r2,0(r2)
  80386c:	10800617 	ldw	r2,24(r2)
  803870:	10001426 	beq	r2,zero,8038c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803874:	e0bffb17 	ldw	r2,-20(fp)
  803878:	10800017 	ldw	r2,0(r2)
  80387c:	10800617 	ldw	r2,24(r2)
  803880:	e0ffff17 	ldw	r3,-4(fp)
  803884:	e13ffb17 	ldw	r4,-20(fp)
  803888:	e17ffe17 	ldw	r5,-8(fp)
  80388c:	180d883a 	mov	r6,r3
  803890:	103ee83a 	callr	r2
  803894:	e0bffc15 	stw	r2,-16(fp)
  803898:	e0bffc17 	ldw	r2,-16(fp)
  80389c:	1000070e 	bge	r2,zero,8038bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8038a0:	08037b80 	call	8037b8 <alt_get_errno>
  8038a4:	1007883a 	mov	r3,r2
  8038a8:	e0bffc17 	ldw	r2,-16(fp)
  8038ac:	0085c83a 	sub	r2,zero,r2
  8038b0:	18800015 	stw	r2,0(r3)
        return -1;
  8038b4:	00bfffc4 	movi	r2,-1
  8038b8:	00000c06 	br	8038ec <write+0xe4>
      }
      return rval;
  8038bc:	e0bffc17 	ldw	r2,-16(fp)
  8038c0:	00000a06 	br	8038ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8038c4:	08037b80 	call	8037b8 <alt_get_errno>
  8038c8:	1007883a 	mov	r3,r2
  8038cc:	00800344 	movi	r2,13
  8038d0:	18800015 	stw	r2,0(r3)
  8038d4:	00000406 	br	8038e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8038d8:	08037b80 	call	8037b8 <alt_get_errno>
  8038dc:	1007883a 	mov	r3,r2
  8038e0:	00801444 	movi	r2,81
  8038e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8038e8:	00bfffc4 	movi	r2,-1
}
  8038ec:	e037883a 	mov	sp,fp
  8038f0:	dfc00117 	ldw	ra,4(sp)
  8038f4:	df000017 	ldw	fp,0(sp)
  8038f8:	dec00204 	addi	sp,sp,8
  8038fc:	f800283a 	ret

00803900 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803900:	defffd04 	addi	sp,sp,-12
  803904:	dfc00215 	stw	ra,8(sp)
  803908:	df000115 	stw	fp,4(sp)
  80390c:	df000104 	addi	fp,sp,4
  803910:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803914:	e13fff17 	ldw	r4,-4(fp)
  803918:	01402034 	movhi	r5,128
  80391c:	295d9f04 	addi	r5,r5,30332
  803920:	08055b80 	call	8055b8 <alt_dev_llist_insert>
}
  803924:	e037883a 	mov	sp,fp
  803928:	dfc00117 	ldw	ra,4(sp)
  80392c:	df000017 	ldw	fp,0(sp)
  803930:	dec00204 	addi	sp,sp,8
  803934:	f800283a 	ret

00803938 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803938:	defffd04 	addi	sp,sp,-12
  80393c:	dfc00215 	stw	ra,8(sp)
  803940:	df000115 	stw	fp,4(sp)
  803944:	df000104 	addi	fp,sp,4
  803948:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80394c:	0805e6c0 	call	805e6c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803950:	00800044 	movi	r2,1
  803954:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  803958:	e037883a 	mov	sp,fp
  80395c:	dfc00117 	ldw	ra,4(sp)
  803960:	df000017 	ldw	fp,0(sp)
  803964:	dec00204 	addi	sp,sp,8
  803968:	f800283a 	ret

0080396c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80396c:	defffe04 	addi	sp,sp,-8
  803970:	dfc00115 	stw	ra,4(sp)
  803974:	df000015 	stw	fp,0(sp)
  803978:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80397c:	01002034 	movhi	r4,128
  803980:	211cfd04 	addi	r4,r4,29684
  803984:	08039000 	call	803900 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  803988:	01002034 	movhi	r4,128
  80398c:	211d1204 	addi	r4,r4,29768
  803990:	08049600 	call	804960 <altera_avalon_lcd_16207_init>
  803994:	01002034 	movhi	r4,128
  803998:	211d0804 	addi	r4,r4,29728
  80399c:	08039000 	call	803900 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  8039a0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8039a4:	01002034 	movhi	r4,128
  8039a8:	211d5a04 	addi	r4,r4,30056
  8039ac:	000b883a 	mov	r5,zero
  8039b0:	018000c4 	movi	r6,3
  8039b4:	0804c080 	call	804c08 <altera_avalon_uart_init>
  8039b8:	01002034 	movhi	r4,128
  8039bc:	211d5004 	addi	r4,r4,30016
  8039c0:	08039000 	call	803900 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  8039c4:	01002034 	movhi	r4,128
  8039c8:	211d8104 	addi	r4,r4,30212
  8039cc:	08039000 	call	803900 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  8039d0:	01002034 	movhi	r4,128
  8039d4:	211d8d04 	addi	r4,r4,30260
  8039d8:	08039000 	call	803900 <alt_dev_reg>
}
  8039dc:	e037883a 	mov	sp,fp
  8039e0:	dfc00117 	ldw	ra,4(sp)
  8039e4:	df000017 	ldw	fp,0(sp)
  8039e8:	dec00204 	addi	sp,sp,8
  8039ec:	f800283a 	ret

008039f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8039f0:	defffa04 	addi	sp,sp,-24
  8039f4:	dfc00515 	stw	ra,20(sp)
  8039f8:	df000415 	stw	fp,16(sp)
  8039fc:	df000404 	addi	fp,sp,16
  803a00:	e13ffd15 	stw	r4,-12(fp)
  803a04:	e17ffe15 	stw	r5,-8(fp)
  803a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803a0c:	e0bffd17 	ldw	r2,-12(fp)
  803a10:	10800017 	ldw	r2,0(r2)
  803a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803a18:	e0bffc17 	ldw	r2,-16(fp)
  803a1c:	10c00a04 	addi	r3,r2,40
  803a20:	e0bffd17 	ldw	r2,-12(fp)
  803a24:	10800217 	ldw	r2,8(r2)
  803a28:	1809883a 	mov	r4,r3
  803a2c:	e17ffe17 	ldw	r5,-8(fp)
  803a30:	e1bfff17 	ldw	r6,-4(fp)
  803a34:	100f883a 	mov	r7,r2
  803a38:	0803ab00 	call	803ab0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803a3c:	e037883a 	mov	sp,fp
  803a40:	dfc00117 	ldw	ra,4(sp)
  803a44:	df000017 	ldw	fp,0(sp)
  803a48:	dec00204 	addi	sp,sp,8
  803a4c:	f800283a 	ret

00803a50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803a50:	defffa04 	addi	sp,sp,-24
  803a54:	dfc00515 	stw	ra,20(sp)
  803a58:	df000415 	stw	fp,16(sp)
  803a5c:	df000404 	addi	fp,sp,16
  803a60:	e13ffd15 	stw	r4,-12(fp)
  803a64:	e17ffe15 	stw	r5,-8(fp)
  803a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803a6c:	e0bffd17 	ldw	r2,-12(fp)
  803a70:	10800017 	ldw	r2,0(r2)
  803a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803a78:	e0bffc17 	ldw	r2,-16(fp)
  803a7c:	10c00a04 	addi	r3,r2,40
  803a80:	e0bffd17 	ldw	r2,-12(fp)
  803a84:	10800217 	ldw	r2,8(r2)
  803a88:	1809883a 	mov	r4,r3
  803a8c:	e17ffe17 	ldw	r5,-8(fp)
  803a90:	e1bfff17 	ldw	r6,-4(fp)
  803a94:	100f883a 	mov	r7,r2
  803a98:	0803b940 	call	803b94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803a9c:	e037883a 	mov	sp,fp
  803aa0:	dfc00117 	ldw	ra,4(sp)
  803aa4:	df000017 	ldw	fp,0(sp)
  803aa8:	dec00204 	addi	sp,sp,8
  803aac:	f800283a 	ret

00803ab0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  803ab0:	defff704 	addi	sp,sp,-36
  803ab4:	df000815 	stw	fp,32(sp)
  803ab8:	df000804 	addi	fp,sp,32
  803abc:	e13ffc15 	stw	r4,-16(fp)
  803ac0:	e17ffd15 	stw	r5,-12(fp)
  803ac4:	e1bffe15 	stw	r6,-8(fp)
  803ac8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  803acc:	e0bffc17 	ldw	r2,-16(fp)
  803ad0:	10800017 	ldw	r2,0(r2)
  803ad4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  803ad8:	e0bffd17 	ldw	r2,-12(fp)
  803adc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  803ae0:	e0bffe17 	ldw	r2,-8(fp)
  803ae4:	e0fffd17 	ldw	r3,-12(fp)
  803ae8:	1885883a 	add	r2,r3,r2
  803aec:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  803af0:	00001406 	br	803b44 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803af4:	e0bff917 	ldw	r2,-28(fp)
  803af8:	10800037 	ldwio	r2,0(r2)
  803afc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  803b00:	e0bffb17 	ldw	r2,-20(fp)
  803b04:	10a0000c 	andi	r2,r2,32768
  803b08:	10000626 	beq	r2,zero,803b24 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803b0c:	e0bff817 	ldw	r2,-32(fp)
  803b10:	10c00044 	addi	r3,r2,1
  803b14:	e0fff815 	stw	r3,-32(fp)
  803b18:	e0fffb17 	ldw	r3,-20(fp)
  803b1c:	10c00005 	stb	r3,0(r2)
  803b20:	00000806 	br	803b44 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  803b24:	e0fff817 	ldw	r3,-32(fp)
  803b28:	e0bffd17 	ldw	r2,-12(fp)
  803b2c:	18800126 	beq	r3,r2,803b34 <altera_avalon_jtag_uart_read+0x84>
      break;
  803b30:	00000706 	br	803b50 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
  803b34:	e0bfff17 	ldw	r2,-4(fp)
  803b38:	1090000c 	andi	r2,r2,16384
  803b3c:	10000126 	beq	r2,zero,803b44 <altera_avalon_jtag_uart_read+0x94>
      break;   
  803b40:	00000306 	br	803b50 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  803b44:	e0fff817 	ldw	r3,-32(fp)
  803b48:	e0bffa17 	ldw	r2,-24(fp)
  803b4c:	18bfe936 	bltu	r3,r2,803af4 <__alt_data_end+0xff803af4>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  803b50:	e0fff817 	ldw	r3,-32(fp)
  803b54:	e0bffd17 	ldw	r2,-12(fp)
  803b58:	18800426 	beq	r3,r2,803b6c <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
  803b5c:	e0fff817 	ldw	r3,-32(fp)
  803b60:	e0bffd17 	ldw	r2,-12(fp)
  803b64:	1885c83a 	sub	r2,r3,r2
  803b68:	00000606 	br	803b84 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
  803b6c:	e0bfff17 	ldw	r2,-4(fp)
  803b70:	1090000c 	andi	r2,r2,16384
  803b74:	10000226 	beq	r2,zero,803b80 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
  803b78:	00bffd44 	movi	r2,-11
  803b7c:	00000106 	br	803b84 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
  803b80:	00bffec4 	movi	r2,-5
}
  803b84:	e037883a 	mov	sp,fp
  803b88:	df000017 	ldw	fp,0(sp)
  803b8c:	dec00104 	addi	sp,sp,4
  803b90:	f800283a 	ret

00803b94 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  803b94:	defff904 	addi	sp,sp,-28
  803b98:	df000615 	stw	fp,24(sp)
  803b9c:	df000604 	addi	fp,sp,24
  803ba0:	e13ffc15 	stw	r4,-16(fp)
  803ba4:	e17ffd15 	stw	r5,-12(fp)
  803ba8:	e1bffe15 	stw	r6,-8(fp)
  803bac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  803bb0:	e0bffc17 	ldw	r2,-16(fp)
  803bb4:	10800017 	ldw	r2,0(r2)
  803bb8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  803bbc:	e0bffe17 	ldw	r2,-8(fp)
  803bc0:	e0fffd17 	ldw	r3,-12(fp)
  803bc4:	1885883a 	add	r2,r3,r2
  803bc8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  803bcc:	00000e06 	br	803c08 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  803bd0:	e0bffa17 	ldw	r2,-24(fp)
  803bd4:	10800104 	addi	r2,r2,4
  803bd8:	10800037 	ldwio	r2,0(r2)
  803bdc:	10bfffec 	andhi	r2,r2,65535
  803be0:	10000926 	beq	r2,zero,803c08 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  803be4:	e0fffa17 	ldw	r3,-24(fp)
  803be8:	e0bffd17 	ldw	r2,-12(fp)
  803bec:	11000044 	addi	r4,r2,1
  803bf0:	e13ffd15 	stw	r4,-12(fp)
  803bf4:	10800003 	ldbu	r2,0(r2)
  803bf8:	10803fcc 	andi	r2,r2,255
  803bfc:	1080201c 	xori	r2,r2,128
  803c00:	10bfe004 	addi	r2,r2,-128
  803c04:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  803c08:	e0fffd17 	ldw	r3,-12(fp)
  803c0c:	e0bffb17 	ldw	r2,-20(fp)
  803c10:	18bfef36 	bltu	r3,r2,803bd0 <__alt_data_end+0xff803bd0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  803c14:	e0bffe17 	ldw	r2,-8(fp)
}
  803c18:	e037883a 	mov	sp,fp
  803c1c:	df000017 	ldw	fp,0(sp)
  803c20:	dec00104 	addi	sp,sp,4
  803c24:	f800283a 	ret

00803c28 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  803c28:	defffa04 	addi	sp,sp,-24
  803c2c:	dfc00515 	stw	ra,20(sp)
  803c30:	df000415 	stw	fp,16(sp)
  803c34:	df000404 	addi	fp,sp,16
  803c38:	e13ffe15 	stw	r4,-8(fp)
  803c3c:	2805883a 	mov	r2,r5
  803c40:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  803c44:	e0bffe17 	ldw	r2,-8(fp)
  803c48:	10800017 	ldw	r2,0(r2)
  803c4c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  803c50:	008003f4 	movhi	r2,15
  803c54:	10909004 	addi	r2,r2,16960
  803c58:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  803c5c:	e0bffe17 	ldw	r2,-8(fp)
  803c60:	10800803 	ldbu	r2,32(r2)
  803c64:	10803fcc 	andi	r2,r2,255
  803c68:	1080201c 	xori	r2,r2,128
  803c6c:	10bfe004 	addi	r2,r2,-128
  803c70:	10000126 	beq	r2,zero,803c78 <lcd_write_command+0x50>
    return;
  803c74:	00001406 	br	803cc8 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803c78:	00000906 	br	803ca0 <lcd_write_command+0x78>
    if (--i == 0)
  803c7c:	e0bffc17 	ldw	r2,-16(fp)
  803c80:	10bfffc4 	addi	r2,r2,-1
  803c84:	e0bffc15 	stw	r2,-16(fp)
  803c88:	e0bffc17 	ldw	r2,-16(fp)
  803c8c:	1000041e 	bne	r2,zero,803ca0 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  803c90:	e0bffe17 	ldw	r2,-8(fp)
  803c94:	00c00044 	movi	r3,1
  803c98:	10c00805 	stb	r3,32(r2)
      return;
  803c9c:	00000a06 	br	803cc8 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803ca0:	e0bffd17 	ldw	r2,-12(fp)
  803ca4:	10800104 	addi	r2,r2,4
  803ca8:	10800037 	ldwio	r2,0(r2)
  803cac:	1080200c 	andi	r2,r2,128
  803cb0:	103ff21e 	bne	r2,zero,803c7c <__alt_data_end+0xff803c7c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  803cb4:	01001904 	movi	r4,100
  803cb8:	0805e3c0 	call	805e3c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  803cbc:	e0bffd17 	ldw	r2,-12(fp)
  803cc0:	e0ffff03 	ldbu	r3,-4(fp)
  803cc4:	10c00035 	stwio	r3,0(r2)
}
  803cc8:	e037883a 	mov	sp,fp
  803ccc:	dfc00117 	ldw	ra,4(sp)
  803cd0:	df000017 	ldw	fp,0(sp)
  803cd4:	dec00204 	addi	sp,sp,8
  803cd8:	f800283a 	ret

00803cdc <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  803cdc:	defffa04 	addi	sp,sp,-24
  803ce0:	dfc00515 	stw	ra,20(sp)
  803ce4:	df000415 	stw	fp,16(sp)
  803ce8:	df000404 	addi	fp,sp,16
  803cec:	e13ffe15 	stw	r4,-8(fp)
  803cf0:	2805883a 	mov	r2,r5
  803cf4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  803cf8:	e0bffe17 	ldw	r2,-8(fp)
  803cfc:	10800017 	ldw	r2,0(r2)
  803d00:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  803d04:	008003f4 	movhi	r2,15
  803d08:	10909004 	addi	r2,r2,16960
  803d0c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  803d10:	e0bffe17 	ldw	r2,-8(fp)
  803d14:	10800803 	ldbu	r2,32(r2)
  803d18:	10803fcc 	andi	r2,r2,255
  803d1c:	1080201c 	xori	r2,r2,128
  803d20:	10bfe004 	addi	r2,r2,-128
  803d24:	10000126 	beq	r2,zero,803d2c <lcd_write_data+0x50>
    return;
  803d28:	00001c06 	br	803d9c <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803d2c:	00000906 	br	803d54 <lcd_write_data+0x78>
    if (--i == 0)
  803d30:	e0bffc17 	ldw	r2,-16(fp)
  803d34:	10bfffc4 	addi	r2,r2,-1
  803d38:	e0bffc15 	stw	r2,-16(fp)
  803d3c:	e0bffc17 	ldw	r2,-16(fp)
  803d40:	1000041e 	bne	r2,zero,803d54 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  803d44:	e0bffe17 	ldw	r2,-8(fp)
  803d48:	00c00044 	movi	r3,1
  803d4c:	10c00805 	stb	r3,32(r2)
      return;
  803d50:	00001206 	br	803d9c <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803d54:	e0bffd17 	ldw	r2,-12(fp)
  803d58:	10800104 	addi	r2,r2,4
  803d5c:	10800037 	ldwio	r2,0(r2)
  803d60:	1080200c 	andi	r2,r2,128
  803d64:	103ff21e 	bne	r2,zero,803d30 <__alt_data_end+0xff803d30>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  803d68:	01001904 	movi	r4,100
  803d6c:	0805e3c0 	call	805e3c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  803d70:	e0bffd17 	ldw	r2,-12(fp)
  803d74:	10800204 	addi	r2,r2,8
  803d78:	1007883a 	mov	r3,r2
  803d7c:	e0bfff03 	ldbu	r2,-4(fp)
  803d80:	18800035 	stwio	r2,0(r3)

  sp->address++;
  803d84:	e0bffe17 	ldw	r2,-8(fp)
  803d88:	108008c3 	ldbu	r2,35(r2)
  803d8c:	10800044 	addi	r2,r2,1
  803d90:	1007883a 	mov	r3,r2
  803d94:	e0bffe17 	ldw	r2,-8(fp)
  803d98:	10c008c5 	stb	r3,35(r2)
}
  803d9c:	e037883a 	mov	sp,fp
  803da0:	dfc00117 	ldw	ra,4(sp)
  803da4:	df000017 	ldw	fp,0(sp)
  803da8:	dec00204 	addi	sp,sp,8
  803dac:	f800283a 	ret

00803db0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  803db0:	defffc04 	addi	sp,sp,-16
  803db4:	dfc00315 	stw	ra,12(sp)
  803db8:	df000215 	stw	fp,8(sp)
  803dbc:	df000204 	addi	fp,sp,8
  803dc0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  803dc4:	e13fff17 	ldw	r4,-4(fp)
  803dc8:	01400044 	movi	r5,1
  803dcc:	0803c280 	call	803c28 <lcd_write_command>

  sp->x = 0;
  803dd0:	e0bfff17 	ldw	r2,-4(fp)
  803dd4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  803dd8:	e0bfff17 	ldw	r2,-4(fp)
  803ddc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  803de0:	e0bfff17 	ldw	r2,-4(fp)
  803de4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803de8:	e03ffe15 	stw	zero,-8(fp)
  803dec:	00001b06 	br	803e5c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  803df0:	e0bffe17 	ldw	r2,-8(fp)
  803df4:	108018e4 	muli	r2,r2,99
  803df8:	10801004 	addi	r2,r2,64
  803dfc:	e0ffff17 	ldw	r3,-4(fp)
  803e00:	1885883a 	add	r2,r3,r2
  803e04:	1009883a 	mov	r4,r2
  803e08:	01400804 	movi	r5,32
  803e0c:	01801444 	movi	r6,81
  803e10:	08028b80 	call	8028b8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  803e14:	e0bffe17 	ldw	r2,-8(fp)
  803e18:	108018e4 	muli	r2,r2,99
  803e1c:	10800c04 	addi	r2,r2,48
  803e20:	e0ffff17 	ldw	r3,-4(fp)
  803e24:	1885883a 	add	r2,r3,r2
  803e28:	1009883a 	mov	r4,r2
  803e2c:	01400804 	movi	r5,32
  803e30:	01800404 	movi	r6,16
  803e34:	08028b80 	call	8028b8 <memset>
    sp->line[y].width = 0;
  803e38:	e0ffff17 	ldw	r3,-4(fp)
  803e3c:	e0bffe17 	ldw	r2,-8(fp)
  803e40:	108018e4 	muli	r2,r2,99
  803e44:	10802404 	addi	r2,r2,144
  803e48:	1885883a 	add	r2,r3,r2
  803e4c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803e50:	e0bffe17 	ldw	r2,-8(fp)
  803e54:	10800044 	addi	r2,r2,1
  803e58:	e0bffe15 	stw	r2,-8(fp)
  803e5c:	e0bffe17 	ldw	r2,-8(fp)
  803e60:	10800090 	cmplti	r2,r2,2
  803e64:	103fe21e 	bne	r2,zero,803df0 <__alt_data_end+0xff803df0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  803e68:	e037883a 	mov	sp,fp
  803e6c:	dfc00117 	ldw	ra,4(sp)
  803e70:	df000017 	ldw	fp,0(sp)
  803e74:	dec00204 	addi	sp,sp,8
  803e78:	f800283a 	ret

00803e7c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  803e7c:	defff704 	addi	sp,sp,-36
  803e80:	dfc00815 	stw	ra,32(sp)
  803e84:	df000715 	stw	fp,28(sp)
  803e88:	df000704 	addi	fp,sp,28
  803e8c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  803e90:	e0bfff17 	ldw	r2,-4(fp)
  803e94:	10800943 	ldbu	r2,37(r2)
  803e98:	10803fcc 	andi	r2,r2,255
  803e9c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803ea0:	e03ff915 	stw	zero,-28(fp)
  803ea4:	00006706 	br	804044 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  803ea8:	e0ffff17 	ldw	r3,-4(fp)
  803eac:	e0bff917 	ldw	r2,-28(fp)
  803eb0:	108018e4 	muli	r2,r2,99
  803eb4:	10802404 	addi	r2,r2,144
  803eb8:	1885883a 	add	r2,r3,r2
  803ebc:	10800043 	ldbu	r2,1(r2)
  803ec0:	10803fcc 	andi	r2,r2,255
  803ec4:	1080201c 	xori	r2,r2,128
  803ec8:	10bfe004 	addi	r2,r2,-128
  803ecc:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  803ed0:	e0ffff17 	ldw	r3,-4(fp)
  803ed4:	e0bff917 	ldw	r2,-28(fp)
  803ed8:	108018e4 	muli	r2,r2,99
  803edc:	10802404 	addi	r2,r2,144
  803ee0:	1885883a 	add	r2,r3,r2
  803ee4:	10800083 	ldbu	r2,2(r2)
  803ee8:	10c03fcc 	andi	r3,r2,255
  803eec:	e0bffc17 	ldw	r2,-16(fp)
  803ef0:	1885383a 	mul	r2,r3,r2
  803ef4:	1005d23a 	srai	r2,r2,8
  803ef8:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  803efc:	e0fffb17 	ldw	r3,-20(fp)
  803f00:	e0bffd17 	ldw	r2,-12(fp)
  803f04:	18800116 	blt	r3,r2,803f0c <lcd_repaint_screen+0x90>
      offset = 0;
  803f08:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  803f0c:	e03ffa15 	stw	zero,-24(fp)
  803f10:	00004606 	br	80402c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  803f14:	e0fffa17 	ldw	r3,-24(fp)
  803f18:	e0bffb17 	ldw	r2,-20(fp)
  803f1c:	1885883a 	add	r2,r3,r2
  803f20:	1009883a 	mov	r4,r2
  803f24:	e17ffd17 	ldw	r5,-12(fp)
  803f28:	0802ef00 	call	802ef0 <__modsi3>
  803f2c:	1009883a 	mov	r4,r2
  803f30:	e0ffff17 	ldw	r3,-4(fp)
  803f34:	e0bff917 	ldw	r2,-28(fp)
  803f38:	108018e4 	muli	r2,r2,99
  803f3c:	1885883a 	add	r2,r3,r2
  803f40:	1105883a 	add	r2,r2,r4
  803f44:	10801004 	addi	r2,r2,64
  803f48:	10800003 	ldbu	r2,0(r2)
  803f4c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  803f50:	e0ffff17 	ldw	r3,-4(fp)
  803f54:	e0bff917 	ldw	r2,-28(fp)
  803f58:	108018e4 	muli	r2,r2,99
  803f5c:	1887883a 	add	r3,r3,r2
  803f60:	e0bffa17 	ldw	r2,-24(fp)
  803f64:	1885883a 	add	r2,r3,r2
  803f68:	10800c04 	addi	r2,r2,48
  803f6c:	10800003 	ldbu	r2,0(r2)
  803f70:	10c03fcc 	andi	r3,r2,255
  803f74:	18c0201c 	xori	r3,r3,128
  803f78:	18ffe004 	addi	r3,r3,-128
  803f7c:	e0bffe07 	ldb	r2,-8(fp)
  803f80:	18802726 	beq	r3,r2,804020 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  803f84:	e0fff917 	ldw	r3,-28(fp)
  803f88:	d0a00b04 	addi	r2,gp,-32724
  803f8c:	1885883a 	add	r2,r3,r2
  803f90:	10800003 	ldbu	r2,0(r2)
  803f94:	1007883a 	mov	r3,r2
  803f98:	e0bffa17 	ldw	r2,-24(fp)
  803f9c:	1885883a 	add	r2,r3,r2
  803fa0:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  803fa4:	e0fffe43 	ldbu	r3,-7(fp)
  803fa8:	e0bfff17 	ldw	r2,-4(fp)
  803fac:	108008c3 	ldbu	r2,35(r2)
  803fb0:	10803fcc 	andi	r2,r2,255
  803fb4:	1080201c 	xori	r2,r2,128
  803fb8:	10bfe004 	addi	r2,r2,-128
  803fbc:	18800a26 	beq	r3,r2,803fe8 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  803fc0:	e0fffe43 	ldbu	r3,-7(fp)
  803fc4:	00bfe004 	movi	r2,-128
  803fc8:	1884b03a 	or	r2,r3,r2
  803fcc:	10803fcc 	andi	r2,r2,255
  803fd0:	e13fff17 	ldw	r4,-4(fp)
  803fd4:	100b883a 	mov	r5,r2
  803fd8:	0803c280 	call	803c28 <lcd_write_command>
          sp->address = address;
  803fdc:	e0fffe43 	ldbu	r3,-7(fp)
  803fe0:	e0bfff17 	ldw	r2,-4(fp)
  803fe4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  803fe8:	e0bffe03 	ldbu	r2,-8(fp)
  803fec:	10803fcc 	andi	r2,r2,255
  803ff0:	e13fff17 	ldw	r4,-4(fp)
  803ff4:	100b883a 	mov	r5,r2
  803ff8:	0803cdc0 	call	803cdc <lcd_write_data>
        sp->line[y].visible[x] = c;
  803ffc:	e0ffff17 	ldw	r3,-4(fp)
  804000:	e0bff917 	ldw	r2,-28(fp)
  804004:	108018e4 	muli	r2,r2,99
  804008:	1887883a 	add	r3,r3,r2
  80400c:	e0bffa17 	ldw	r2,-24(fp)
  804010:	1885883a 	add	r2,r3,r2
  804014:	10800c04 	addi	r2,r2,48
  804018:	e0fffe03 	ldbu	r3,-8(fp)
  80401c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  804020:	e0bffa17 	ldw	r2,-24(fp)
  804024:	10800044 	addi	r2,r2,1
  804028:	e0bffa15 	stw	r2,-24(fp)
  80402c:	e0bffa17 	ldw	r2,-24(fp)
  804030:	10800410 	cmplti	r2,r2,16
  804034:	103fb71e 	bne	r2,zero,803f14 <__alt_data_end+0xff803f14>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804038:	e0bff917 	ldw	r2,-28(fp)
  80403c:	10800044 	addi	r2,r2,1
  804040:	e0bff915 	stw	r2,-28(fp)
  804044:	e0bff917 	ldw	r2,-28(fp)
  804048:	10800090 	cmplti	r2,r2,2
  80404c:	103f961e 	bne	r2,zero,803ea8 <__alt_data_end+0xff803ea8>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  804050:	e037883a 	mov	sp,fp
  804054:	dfc00117 	ldw	ra,4(sp)
  804058:	df000017 	ldw	fp,0(sp)
  80405c:	dec00204 	addi	sp,sp,8
  804060:	f800283a 	ret

00804064 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  804064:	defffc04 	addi	sp,sp,-16
  804068:	dfc00315 	stw	ra,12(sp)
  80406c:	df000215 	stw	fp,8(sp)
  804070:	df000204 	addi	fp,sp,8
  804074:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804078:	e03ffe15 	stw	zero,-8(fp)
  80407c:	00001d06 	br	8040f4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  804080:	e0bffe17 	ldw	r2,-8(fp)
  804084:	00800f16 	blt	zero,r2,8040c4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  804088:	e0bffe17 	ldw	r2,-8(fp)
  80408c:	108018e4 	muli	r2,r2,99
  804090:	10801004 	addi	r2,r2,64
  804094:	e0ffff17 	ldw	r3,-4(fp)
  804098:	1889883a 	add	r4,r3,r2
  80409c:	e0bffe17 	ldw	r2,-8(fp)
  8040a0:	10800044 	addi	r2,r2,1
  8040a4:	108018e4 	muli	r2,r2,99
  8040a8:	10801004 	addi	r2,r2,64
  8040ac:	e0ffff17 	ldw	r3,-4(fp)
  8040b0:	1885883a 	add	r2,r3,r2
  8040b4:	100b883a 	mov	r5,r2
  8040b8:	01801404 	movi	r6,80
  8040bc:	080118c0 	call	80118c <memcpy>
  8040c0:	00000906 	br	8040e8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8040c4:	e0bffe17 	ldw	r2,-8(fp)
  8040c8:	108018e4 	muli	r2,r2,99
  8040cc:	10801004 	addi	r2,r2,64
  8040d0:	e0ffff17 	ldw	r3,-4(fp)
  8040d4:	1885883a 	add	r2,r3,r2
  8040d8:	1009883a 	mov	r4,r2
  8040dc:	01400804 	movi	r5,32
  8040e0:	01801404 	movi	r6,80
  8040e4:	08028b80 	call	8028b8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8040e8:	e0bffe17 	ldw	r2,-8(fp)
  8040ec:	10800044 	addi	r2,r2,1
  8040f0:	e0bffe15 	stw	r2,-8(fp)
  8040f4:	e0bffe17 	ldw	r2,-8(fp)
  8040f8:	10800090 	cmplti	r2,r2,2
  8040fc:	103fe01e 	bne	r2,zero,804080 <__alt_data_end+0xff804080>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  804100:	e0bfff17 	ldw	r2,-4(fp)
  804104:	10800883 	ldbu	r2,34(r2)
  804108:	10bfffc4 	addi	r2,r2,-1
  80410c:	1007883a 	mov	r3,r2
  804110:	e0bfff17 	ldw	r2,-4(fp)
  804114:	10c00885 	stb	r3,34(r2)
}
  804118:	e037883a 	mov	sp,fp
  80411c:	dfc00117 	ldw	ra,4(sp)
  804120:	df000017 	ldw	fp,0(sp)
  804124:	dec00204 	addi	sp,sp,8
  804128:	f800283a 	ret

0080412c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80412c:	defff904 	addi	sp,sp,-28
  804130:	dfc00615 	stw	ra,24(sp)
  804134:	df000515 	stw	fp,20(sp)
  804138:	df000504 	addi	fp,sp,20
  80413c:	e13ffe15 	stw	r4,-8(fp)
  804140:	2805883a 	mov	r2,r5
  804144:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  804148:	e03ffb15 	stw	zero,-20(fp)
  80414c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  804150:	e0bffe17 	ldw	r2,-8(fp)
  804154:	10800a03 	ldbu	r2,40(r2)
  804158:	10803fcc 	andi	r2,r2,255
  80415c:	1080201c 	xori	r2,r2,128
  804160:	10bfe004 	addi	r2,r2,-128
  804164:	108016d8 	cmpnei	r2,r2,91
  804168:	1000441e 	bne	r2,zero,80427c <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  80416c:	e0bffe17 	ldw	r2,-8(fp)
  804170:	10800a44 	addi	r2,r2,41
  804174:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  804178:	00000c06 	br	8041ac <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80417c:	e0bffb17 	ldw	r2,-20(fp)
  804180:	10c002a4 	muli	r3,r2,10
  804184:	e0bffd17 	ldw	r2,-12(fp)
  804188:	11000044 	addi	r4,r2,1
  80418c:	e13ffd15 	stw	r4,-12(fp)
  804190:	10800003 	ldbu	r2,0(r2)
  804194:	10803fcc 	andi	r2,r2,255
  804198:	1080201c 	xori	r2,r2,128
  80419c:	10bfe004 	addi	r2,r2,-128
  8041a0:	10bff404 	addi	r2,r2,-48
  8041a4:	1885883a 	add	r2,r3,r2
  8041a8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8041ac:	00802034 	movhi	r2,128
  8041b0:	109da804 	addi	r2,r2,30368
  8041b4:	10c00017 	ldw	r3,0(r2)
  8041b8:	e0bffd17 	ldw	r2,-12(fp)
  8041bc:	10800003 	ldbu	r2,0(r2)
  8041c0:	10803fcc 	andi	r2,r2,255
  8041c4:	1080201c 	xori	r2,r2,128
  8041c8:	10bfe004 	addi	r2,r2,-128
  8041cc:	10800044 	addi	r2,r2,1
  8041d0:	1885883a 	add	r2,r3,r2
  8041d4:	10800003 	ldbu	r2,0(r2)
  8041d8:	10803fcc 	andi	r2,r2,255
  8041dc:	1080010c 	andi	r2,r2,4
  8041e0:	103fe61e 	bne	r2,zero,80417c <__alt_data_end+0xff80417c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8041e4:	e0bffd17 	ldw	r2,-12(fp)
  8041e8:	10800003 	ldbu	r2,0(r2)
  8041ec:	10803fcc 	andi	r2,r2,255
  8041f0:	1080201c 	xori	r2,r2,128
  8041f4:	10bfe004 	addi	r2,r2,-128
  8041f8:	10800ed8 	cmpnei	r2,r2,59
  8041fc:	10001e1e 	bne	r2,zero,804278 <lcd_handle_escape+0x14c>
    {
      ptr++;
  804200:	e0bffd17 	ldw	r2,-12(fp)
  804204:	10800044 	addi	r2,r2,1
  804208:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80420c:	00000c06 	br	804240 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  804210:	e0bffc17 	ldw	r2,-16(fp)
  804214:	10c002a4 	muli	r3,r2,10
  804218:	e0bffd17 	ldw	r2,-12(fp)
  80421c:	11000044 	addi	r4,r2,1
  804220:	e13ffd15 	stw	r4,-12(fp)
  804224:	10800003 	ldbu	r2,0(r2)
  804228:	10803fcc 	andi	r2,r2,255
  80422c:	1080201c 	xori	r2,r2,128
  804230:	10bfe004 	addi	r2,r2,-128
  804234:	10bff404 	addi	r2,r2,-48
  804238:	1885883a 	add	r2,r3,r2
  80423c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  804240:	00802034 	movhi	r2,128
  804244:	109da804 	addi	r2,r2,30368
  804248:	10c00017 	ldw	r3,0(r2)
  80424c:	e0bffd17 	ldw	r2,-12(fp)
  804250:	10800003 	ldbu	r2,0(r2)
  804254:	10803fcc 	andi	r2,r2,255
  804258:	1080201c 	xori	r2,r2,128
  80425c:	10bfe004 	addi	r2,r2,-128
  804260:	10800044 	addi	r2,r2,1
  804264:	1885883a 	add	r2,r3,r2
  804268:	10800003 	ldbu	r2,0(r2)
  80426c:	10803fcc 	andi	r2,r2,255
  804270:	1080010c 	andi	r2,r2,4
  804274:	103fe61e 	bne	r2,zero,804210 <__alt_data_end+0xff804210>
  804278:	00000206 	br	804284 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80427c:	00bfffc4 	movi	r2,-1
  804280:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  804284:	e0bfff07 	ldb	r2,-4(fp)
  804288:	10c012a0 	cmpeqi	r3,r2,74
  80428c:	1800281e 	bne	r3,zero,804330 <lcd_handle_escape+0x204>
  804290:	10c012c8 	cmpgei	r3,r2,75
  804294:	1800031e 	bne	r3,zero,8042a4 <lcd_handle_escape+0x178>
  804298:	10801220 	cmpeqi	r2,r2,72
  80429c:	1000051e 	bne	r2,zero,8042b4 <lcd_handle_escape+0x188>
  8042a0:	00004506 	br	8043b8 <lcd_handle_escape+0x28c>
  8042a4:	10c012e0 	cmpeqi	r3,r2,75
  8042a8:	1800281e 	bne	r3,zero,80434c <lcd_handle_escape+0x220>
  8042ac:	108019a0 	cmpeqi	r2,r2,102
  8042b0:	10004126 	beq	r2,zero,8043b8 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8042b4:	e0bffc17 	ldw	r2,-16(fp)
  8042b8:	0080050e 	bge	zero,r2,8042d0 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  8042bc:	e0bffc17 	ldw	r2,-16(fp)
  8042c0:	10bfffc4 	addi	r2,r2,-1
  8042c4:	1007883a 	mov	r3,r2
  8042c8:	e0bffe17 	ldw	r2,-8(fp)
  8042cc:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8042d0:	e0bffb17 	ldw	r2,-20(fp)
  8042d4:	0080150e 	bge	zero,r2,80432c <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  8042d8:	e0bffb17 	ldw	r2,-20(fp)
  8042dc:	10bfffc4 	addi	r2,r2,-1
  8042e0:	1007883a 	mov	r3,r2
  8042e4:	e0bffe17 	ldw	r2,-8(fp)
  8042e8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8042ec:	e0bffe17 	ldw	r2,-8(fp)
  8042f0:	10800883 	ldbu	r2,34(r2)
  8042f4:	10803fcc 	andi	r2,r2,255
  8042f8:	10800170 	cmpltui	r2,r2,5
  8042fc:	1000031e 	bne	r2,zero,80430c <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  804300:	e0bffe17 	ldw	r2,-8(fp)
  804304:	00c00104 	movi	r3,4
  804308:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80430c:	00000206 	br	804318 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  804310:	e13ffe17 	ldw	r4,-8(fp)
  804314:	08040640 	call	804064 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  804318:	e0bffe17 	ldw	r2,-8(fp)
  80431c:	10800883 	ldbu	r2,34(r2)
  804320:	10803fcc 	andi	r2,r2,255
  804324:	108000e8 	cmpgeui	r2,r2,3
  804328:	103ff91e 	bne	r2,zero,804310 <__alt_data_end+0xff804310>
        lcd_scroll_up(sp);
    }
    break;
  80432c:	00002206 	br	8043b8 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  804330:	e0bffb17 	ldw	r2,-20(fp)
  804334:	10800098 	cmpnei	r2,r2,2
  804338:	1000031e 	bne	r2,zero,804348 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  80433c:	e13ffe17 	ldw	r4,-8(fp)
  804340:	0803db00 	call	803db0 <lcd_clear_screen>
    break;
  804344:	00001c06 	br	8043b8 <lcd_handle_escape+0x28c>
  804348:	00001b06 	br	8043b8 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80434c:	e0bffb17 	ldw	r2,-20(fp)
  804350:	00801816 	blt	zero,r2,8043b4 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  804354:	e0bffe17 	ldw	r2,-8(fp)
  804358:	10800843 	ldbu	r2,33(r2)
  80435c:	10803fcc 	andi	r2,r2,255
  804360:	10801428 	cmpgeui	r2,r2,80
  804364:	1000131e 	bne	r2,zero,8043b4 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  804368:	e0bffe17 	ldw	r2,-8(fp)
  80436c:	10800883 	ldbu	r2,34(r2)
  804370:	10803fcc 	andi	r2,r2,255
  804374:	108018e4 	muli	r2,r2,99
  804378:	10801004 	addi	r2,r2,64
  80437c:	e0fffe17 	ldw	r3,-8(fp)
  804380:	1887883a 	add	r3,r3,r2
  804384:	e0bffe17 	ldw	r2,-8(fp)
  804388:	10800843 	ldbu	r2,33(r2)
  80438c:	10803fcc 	andi	r2,r2,255
  804390:	1889883a 	add	r4,r3,r2
  804394:	e0bffe17 	ldw	r2,-8(fp)
  804398:	10800843 	ldbu	r2,33(r2)
  80439c:	10803fcc 	andi	r2,r2,255
  8043a0:	00c01404 	movi	r3,80
  8043a4:	1885c83a 	sub	r2,r3,r2
  8043a8:	01400804 	movi	r5,32
  8043ac:	100d883a 	mov	r6,r2
  8043b0:	08028b80 	call	8028b8 <memset>
    }
    break;
  8043b4:	0001883a 	nop
  }
}
  8043b8:	e037883a 	mov	sp,fp
  8043bc:	dfc00117 	ldw	ra,4(sp)
  8043c0:	df000017 	ldw	fp,0(sp)
  8043c4:	dec00204 	addi	sp,sp,8
  8043c8:	f800283a 	ret

008043cc <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8043cc:	defff304 	addi	sp,sp,-52
  8043d0:	dfc00c15 	stw	ra,48(sp)
  8043d4:	df000b15 	stw	fp,44(sp)
  8043d8:	df000b04 	addi	fp,sp,44
  8043dc:	e13ffc15 	stw	r4,-16(fp)
  8043e0:	e17ffd15 	stw	r5,-12(fp)
  8043e4:	e1bffe15 	stw	r6,-8(fp)
  8043e8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8043ec:	e0bffe17 	ldw	r2,-8(fp)
  8043f0:	e0fffd17 	ldw	r3,-12(fp)
  8043f4:	1885883a 	add	r2,r3,r2
  8043f8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8043fc:	e0bffc17 	ldw	r2,-16(fp)
  804400:	00c00044 	movi	r3,1
  804404:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  804408:	00009e06 	br	804684 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  80440c:	e0bffd17 	ldw	r2,-12(fp)
  804410:	10800003 	ldbu	r2,0(r2)
  804414:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10800903 	ldbu	r2,36(r2)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	1080201c 	xori	r2,r2,128
  804428:	10bfe004 	addi	r2,r2,-128
  80442c:	10003a16 	blt	r2,zero,804518 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  804430:	e0bffc17 	ldw	r2,-16(fp)
  804434:	10800903 	ldbu	r2,36(r2)
  804438:	10803fcc 	andi	r2,r2,255
  80443c:	1080201c 	xori	r2,r2,128
  804440:	10bfe004 	addi	r2,r2,-128
  804444:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  804448:	e0bffa17 	ldw	r2,-24(fp)
  80444c:	1000031e 	bne	r2,zero,80445c <altera_avalon_lcd_16207_write+0x90>
  804450:	e0bff907 	ldb	r2,-28(fp)
  804454:	108016d8 	cmpnei	r2,r2,91
  804458:	10000f1e 	bne	r2,zero,804498 <altera_avalon_lcd_16207_write+0xcc>
  80445c:	e0bffa17 	ldw	r2,-24(fp)
  804460:	10001a26 	beq	r2,zero,8044cc <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  804464:	00802034 	movhi	r2,128
  804468:	109da804 	addi	r2,r2,30368
  80446c:	10c00017 	ldw	r3,0(r2)
  804470:	e0bff907 	ldb	r2,-28(fp)
  804474:	10800044 	addi	r2,r2,1
  804478:	1885883a 	add	r2,r3,r2
  80447c:	10800003 	ldbu	r2,0(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1080010c 	andi	r2,r2,4
  804488:	1000101e 	bne	r2,zero,8044cc <altera_avalon_lcd_16207_write+0x100>
  80448c:	e0bff907 	ldb	r2,-28(fp)
  804490:	10800ee0 	cmpeqi	r2,r2,59
  804494:	10000d1e 	bne	r2,zero,8044cc <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  804498:	e0fffc17 	ldw	r3,-16(fp)
  80449c:	e0bffa17 	ldw	r2,-24(fp)
  8044a0:	1885883a 	add	r2,r3,r2
  8044a4:	10800a04 	addi	r2,r2,40
  8044a8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8044ac:	e0bff907 	ldb	r2,-28(fp)
  8044b0:	e13ffc17 	ldw	r4,-16(fp)
  8044b4:	100b883a 	mov	r5,r2
  8044b8:	080412c0 	call	80412c <lcd_handle_escape>

        sp->esccount = -1;
  8044bc:	e0bffc17 	ldw	r2,-16(fp)
  8044c0:	00ffffc4 	movi	r3,-1
  8044c4:	10c00905 	stb	r3,36(r2)
  8044c8:	00001206 	br	804514 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  8044cc:	e0bffc17 	ldw	r2,-16(fp)
  8044d0:	10800903 	ldbu	r2,36(r2)
  8044d4:	10803fcc 	andi	r2,r2,255
  8044d8:	108001e8 	cmpgeui	r2,r2,7
  8044dc:	10000d1e 	bne	r2,zero,804514 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  8044e0:	e0fffc17 	ldw	r3,-16(fp)
  8044e4:	e0bffa17 	ldw	r2,-24(fp)
  8044e8:	1885883a 	add	r2,r3,r2
  8044ec:	10800a04 	addi	r2,r2,40
  8044f0:	e0fff903 	ldbu	r3,-28(fp)
  8044f4:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  8044f8:	e0bffc17 	ldw	r2,-16(fp)
  8044fc:	10800903 	ldbu	r2,36(r2)
  804500:	10800044 	addi	r2,r2,1
  804504:	1007883a 	mov	r3,r2
  804508:	e0bffc17 	ldw	r2,-16(fp)
  80450c:	10c00905 	stb	r3,36(r2)
  804510:	00005906 	br	804678 <altera_avalon_lcd_16207_write+0x2ac>
  804514:	00005806 	br	804678 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  804518:	e0bff907 	ldb	r2,-28(fp)
  80451c:	108006d8 	cmpnei	r2,r2,27
  804520:	1000031e 	bne	r2,zero,804530 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  804524:	e0bffc17 	ldw	r2,-16(fp)
  804528:	10000905 	stb	zero,36(r2)
  80452c:	00005206 	br	804678 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  804530:	e0bff907 	ldb	r2,-28(fp)
  804534:	10800358 	cmpnei	r2,r2,13
  804538:	1000031e 	bne	r2,zero,804548 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  80453c:	e0bffc17 	ldw	r2,-16(fp)
  804540:	10000845 	stb	zero,33(r2)
  804544:	00004c06 	br	804678 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  804548:	e0bff907 	ldb	r2,-28(fp)
  80454c:	10800298 	cmpnei	r2,r2,10
  804550:	1000101e 	bne	r2,zero,804594 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  804554:	e0bffc17 	ldw	r2,-16(fp)
  804558:	10000845 	stb	zero,33(r2)
      sp->y++;
  80455c:	e0bffc17 	ldw	r2,-16(fp)
  804560:	10800883 	ldbu	r2,34(r2)
  804564:	10800044 	addi	r2,r2,1
  804568:	1007883a 	mov	r3,r2
  80456c:	e0bffc17 	ldw	r2,-16(fp)
  804570:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  804574:	e0bffc17 	ldw	r2,-16(fp)
  804578:	10800883 	ldbu	r2,34(r2)
  80457c:	10803fcc 	andi	r2,r2,255
  804580:	108000f0 	cmpltui	r2,r2,3
  804584:	10003c1e 	bne	r2,zero,804678 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  804588:	e13ffc17 	ldw	r4,-16(fp)
  80458c:	08040640 	call	804064 <lcd_scroll_up>
  804590:	00003906 	br	804678 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  804594:	e0bff907 	ldb	r2,-28(fp)
  804598:	10800218 	cmpnei	r2,r2,8
  80459c:	10000b1e 	bne	r2,zero,8045cc <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  8045a0:	e0bffc17 	ldw	r2,-16(fp)
  8045a4:	10800843 	ldbu	r2,33(r2)
  8045a8:	10803fcc 	andi	r2,r2,255
  8045ac:	10003226 	beq	r2,zero,804678 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  8045b0:	e0bffc17 	ldw	r2,-16(fp)
  8045b4:	10800843 	ldbu	r2,33(r2)
  8045b8:	10bfffc4 	addi	r2,r2,-1
  8045bc:	1007883a 	mov	r3,r2
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	10c00845 	stb	r3,33(r2)
  8045c8:	00002b06 	br	804678 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  8045cc:	00802034 	movhi	r2,128
  8045d0:	109da804 	addi	r2,r2,30368
  8045d4:	10c00017 	ldw	r3,0(r2)
  8045d8:	e0bff907 	ldb	r2,-28(fp)
  8045dc:	10800044 	addi	r2,r2,1
  8045e0:	1885883a 	add	r2,r3,r2
  8045e4:	10800003 	ldbu	r2,0(r2)
  8045e8:	10803fcc 	andi	r2,r2,255
  8045ec:	1080201c 	xori	r2,r2,128
  8045f0:	10bfe004 	addi	r2,r2,-128
  8045f4:	108025cc 	andi	r2,r2,151
  8045f8:	10001f26 	beq	r2,zero,804678 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  8045fc:	e0bffc17 	ldw	r2,-16(fp)
  804600:	10800883 	ldbu	r2,34(r2)
  804604:	10803fcc 	andi	r2,r2,255
  804608:	108000b0 	cmpltui	r2,r2,2
  80460c:	1000021e 	bne	r2,zero,804618 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  804610:	e13ffc17 	ldw	r4,-16(fp)
  804614:	08040640 	call	804064 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  804618:	e0bffc17 	ldw	r2,-16(fp)
  80461c:	10800843 	ldbu	r2,33(r2)
  804620:	10803fcc 	andi	r2,r2,255
  804624:	10801428 	cmpgeui	r2,r2,80
  804628:	10000d1e 	bne	r2,zero,804660 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  80462c:	e0bffc17 	ldw	r2,-16(fp)
  804630:	10800883 	ldbu	r2,34(r2)
  804634:	10c03fcc 	andi	r3,r2,255
  804638:	e0bffc17 	ldw	r2,-16(fp)
  80463c:	10800843 	ldbu	r2,33(r2)
  804640:	10803fcc 	andi	r2,r2,255
  804644:	e13ffc17 	ldw	r4,-16(fp)
  804648:	18c018e4 	muli	r3,r3,99
  80464c:	20c7883a 	add	r3,r4,r3
  804650:	1885883a 	add	r2,r3,r2
  804654:	10801004 	addi	r2,r2,64
  804658:	e0fff903 	ldbu	r3,-28(fp)
  80465c:	10c00005 	stb	r3,0(r2)

      sp->x++;
  804660:	e0bffc17 	ldw	r2,-16(fp)
  804664:	10800843 	ldbu	r2,33(r2)
  804668:	10800044 	addi	r2,r2,1
  80466c:	1007883a 	mov	r3,r2
  804670:	e0bffc17 	ldw	r2,-16(fp)
  804674:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  804678:	e0bffd17 	ldw	r2,-12(fp)
  80467c:	10800044 	addi	r2,r2,1
  804680:	e0bffd15 	stw	r2,-12(fp)
  804684:	e0fffd17 	ldw	r3,-12(fp)
  804688:	e0bff817 	ldw	r2,-32(fp)
  80468c:	18bf5f36 	bltu	r3,r2,80440c <__alt_data_end+0xff80440c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  804690:	00800404 	movi	r2,16
  804694:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804698:	e03ff515 	stw	zero,-44(fp)
  80469c:	00003606 	br	804778 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8046a0:	00801404 	movi	r2,80
  8046a4:	e0bff715 	stw	r2,-36(fp)
  8046a8:	00001206 	br	8046f4 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  8046ac:	e0bff717 	ldw	r2,-36(fp)
  8046b0:	10bfffc4 	addi	r2,r2,-1
  8046b4:	e13ffc17 	ldw	r4,-16(fp)
  8046b8:	e0fff517 	ldw	r3,-44(fp)
  8046bc:	18c018e4 	muli	r3,r3,99
  8046c0:	20c7883a 	add	r3,r4,r3
  8046c4:	1885883a 	add	r2,r3,r2
  8046c8:	10801004 	addi	r2,r2,64
  8046cc:	10800003 	ldbu	r2,0(r2)
  8046d0:	10803fcc 	andi	r2,r2,255
  8046d4:	1080201c 	xori	r2,r2,128
  8046d8:	10bfe004 	addi	r2,r2,-128
  8046dc:	10800820 	cmpeqi	r2,r2,32
  8046e0:	1000011e 	bne	r2,zero,8046e8 <altera_avalon_lcd_16207_write+0x31c>
        break;
  8046e4:	00000506 	br	8046fc <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8046e8:	e0bff717 	ldw	r2,-36(fp)
  8046ec:	10bfffc4 	addi	r2,r2,-1
  8046f0:	e0bff715 	stw	r2,-36(fp)
  8046f4:	e0bff717 	ldw	r2,-36(fp)
  8046f8:	00bfec16 	blt	zero,r2,8046ac <__alt_data_end+0xff8046ac>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  8046fc:	e0bff717 	ldw	r2,-36(fp)
  804700:	10800448 	cmpgei	r2,r2,17
  804704:	1000031e 	bne	r2,zero,804714 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  804708:	00800404 	movi	r2,16
  80470c:	e0bff715 	stw	r2,-36(fp)
  804710:	00000306 	br	804720 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  804714:	e0bff717 	ldw	r2,-36(fp)
  804718:	10800044 	addi	r2,r2,1
  80471c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  804720:	e0bff717 	ldw	r2,-36(fp)
  804724:	1009883a 	mov	r4,r2
  804728:	e0fffc17 	ldw	r3,-16(fp)
  80472c:	e0bff517 	ldw	r2,-44(fp)
  804730:	108018e4 	muli	r2,r2,99
  804734:	10802404 	addi	r2,r2,144
  804738:	1885883a 	add	r2,r3,r2
  80473c:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  804740:	e0fff617 	ldw	r3,-40(fp)
  804744:	e0bff717 	ldw	r2,-36(fp)
  804748:	1880020e 	bge	r3,r2,804754 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  80474c:	e0bff717 	ldw	r2,-36(fp)
  804750:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  804754:	e0fffc17 	ldw	r3,-16(fp)
  804758:	e0bff517 	ldw	r2,-44(fp)
  80475c:	108018e4 	muli	r2,r2,99
  804760:	10802404 	addi	r2,r2,144
  804764:	1885883a 	add	r2,r3,r2
  804768:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80476c:	e0bff517 	ldw	r2,-44(fp)
  804770:	10800044 	addi	r2,r2,1
  804774:	e0bff515 	stw	r2,-44(fp)
  804778:	e0bff517 	ldw	r2,-44(fp)
  80477c:	10800090 	cmplti	r2,r2,2
  804780:	103fc71e 	bne	r2,zero,8046a0 <__alt_data_end+0xff8046a0>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  804784:	e0bff617 	ldw	r2,-40(fp)
  804788:	10800448 	cmpgei	r2,r2,17
  80478c:	1000031e 	bne	r2,zero,80479c <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  804790:	e0bffc17 	ldw	r2,-16(fp)
  804794:	10000985 	stb	zero,38(r2)
  804798:	00002e06 	br	804854 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  80479c:	e0bff617 	ldw	r2,-40(fp)
  8047a0:	1085883a 	add	r2,r2,r2
  8047a4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8047a8:	e0bff617 	ldw	r2,-40(fp)
  8047ac:	1007883a 	mov	r3,r2
  8047b0:	e0bffc17 	ldw	r2,-16(fp)
  8047b4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8047b8:	e03ff515 	stw	zero,-44(fp)
  8047bc:	00002206 	br	804848 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8047c0:	e0fffc17 	ldw	r3,-16(fp)
  8047c4:	e0bff517 	ldw	r2,-44(fp)
  8047c8:	108018e4 	muli	r2,r2,99
  8047cc:	10802404 	addi	r2,r2,144
  8047d0:	1885883a 	add	r2,r3,r2
  8047d4:	10800043 	ldbu	r2,1(r2)
  8047d8:	10803fcc 	andi	r2,r2,255
  8047dc:	1080201c 	xori	r2,r2,128
  8047e0:	10bfe004 	addi	r2,r2,-128
  8047e4:	10800450 	cmplti	r2,r2,17
  8047e8:	1000141e 	bne	r2,zero,80483c <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8047ec:	e0fffc17 	ldw	r3,-16(fp)
  8047f0:	e0bff517 	ldw	r2,-44(fp)
  8047f4:	108018e4 	muli	r2,r2,99
  8047f8:	10802404 	addi	r2,r2,144
  8047fc:	1885883a 	add	r2,r3,r2
  804800:	10800043 	ldbu	r2,1(r2)
  804804:	10803fcc 	andi	r2,r2,255
  804808:	1080201c 	xori	r2,r2,128
  80480c:	10bfe004 	addi	r2,r2,-128
  804810:	1004923a 	slli	r2,r2,8
  804814:	1009883a 	mov	r4,r2
  804818:	e17ff617 	ldw	r5,-40(fp)
  80481c:	0802e9c0 	call	802e9c <__divsi3>
  804820:	1009883a 	mov	r4,r2
  804824:	e0fffc17 	ldw	r3,-16(fp)
  804828:	e0bff517 	ldw	r2,-44(fp)
  80482c:	108018e4 	muli	r2,r2,99
  804830:	10802404 	addi	r2,r2,144
  804834:	1885883a 	add	r2,r3,r2
  804838:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80483c:	e0bff517 	ldw	r2,-44(fp)
  804840:	10800044 	addi	r2,r2,1
  804844:	e0bff515 	stw	r2,-44(fp)
  804848:	e0bff517 	ldw	r2,-44(fp)
  80484c:	10800090 	cmplti	r2,r2,2
  804850:	103fdb1e 	bne	r2,zero,8047c0 <__alt_data_end+0xff8047c0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  804854:	e0bffc17 	ldw	r2,-16(fp)
  804858:	10800943 	ldbu	r2,37(r2)
  80485c:	10803fcc 	andi	r2,r2,255
  804860:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  804864:	e13ffc17 	ldw	r4,-16(fp)
  804868:	0803e7c0 	call	803e7c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  804874:	e0bffc17 	ldw	r2,-16(fp)
  804878:	10800943 	ldbu	r2,37(r2)
  80487c:	10c03fcc 	andi	r3,r2,255
  804880:	e0bffb17 	ldw	r2,-20(fp)
  804884:	1880011e 	bne	r3,r2,80488c <altera_avalon_lcd_16207_write+0x4c0>
      break;
  804888:	00000406 	br	80489c <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80488c:	e0bffc17 	ldw	r2,-16(fp)
  804890:	00c00044 	movi	r3,1
  804894:	10c009c5 	stb	r3,39(r2)
  }
  804898:	003fee06 	br	804854 <__alt_data_end+0xff804854>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80489c:	e0bffe17 	ldw	r2,-8(fp)
}
  8048a0:	e037883a 	mov	sp,fp
  8048a4:	dfc00117 	ldw	ra,4(sp)
  8048a8:	df000017 	ldw	fp,0(sp)
  8048ac:	dec00204 	addi	sp,sp,8
  8048b0:	f800283a 	ret

008048b4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8048b4:	defffc04 	addi	sp,sp,-16
  8048b8:	dfc00315 	stw	ra,12(sp)
  8048bc:	df000215 	stw	fp,8(sp)
  8048c0:	df000204 	addi	fp,sp,8
  8048c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8048c8:	e0bfff17 	ldw	r2,-4(fp)
  8048cc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8048d0:	e0bffe17 	ldw	r2,-8(fp)
  8048d4:	10800943 	ldbu	r2,37(r2)
  8048d8:	10803fcc 	andi	r2,r2,255
  8048dc:	10c00044 	addi	r3,r2,1
  8048e0:	e0bffe17 	ldw	r2,-8(fp)
  8048e4:	10800983 	ldbu	r2,38(r2)
  8048e8:	10803fcc 	andi	r2,r2,255
  8048ec:	18800316 	blt	r3,r2,8048fc <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8048f0:	e0bffe17 	ldw	r2,-8(fp)
  8048f4:	10000945 	stb	zero,37(r2)
  8048f8:	00000606 	br	804914 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8048fc:	e0bffe17 	ldw	r2,-8(fp)
  804900:	10800943 	ldbu	r2,37(r2)
  804904:	10800044 	addi	r2,r2,1
  804908:	1007883a 	mov	r3,r2
  80490c:	e0bffe17 	ldw	r2,-8(fp)
  804910:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  804914:	e0bffe17 	ldw	r2,-8(fp)
  804918:	10800983 	ldbu	r2,38(r2)
  80491c:	10803fcc 	andi	r2,r2,255
  804920:	10000826 	beq	r2,zero,804944 <alt_lcd_16207_timeout+0x90>
  804924:	e0bffe17 	ldw	r2,-8(fp)
  804928:	108009c3 	ldbu	r2,39(r2)
  80492c:	10803fcc 	andi	r2,r2,255
  804930:	1080201c 	xori	r2,r2,128
  804934:	10bfe004 	addi	r2,r2,-128
  804938:	1000021e 	bne	r2,zero,804944 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80493c:	e13ffe17 	ldw	r4,-8(fp)
  804940:	0803e7c0 	call	803e7c <lcd_repaint_screen>

  return sp->period;
  804944:	e0bffe17 	ldw	r2,-8(fp)
  804948:	10800717 	ldw	r2,28(r2)
}
  80494c:	e037883a 	mov	sp,fp
  804950:	dfc00117 	ldw	ra,4(sp)
  804954:	df000017 	ldw	fp,0(sp)
  804958:	dec00204 	addi	sp,sp,8
  80495c:	f800283a 	ret

00804960 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  804960:	defffc04 	addi	sp,sp,-16
  804964:	dfc00315 	stw	ra,12(sp)
  804968:	df000215 	stw	fp,8(sp)
  80496c:	df000204 	addi	fp,sp,8
  804970:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  804974:	e0bfff17 	ldw	r2,-4(fp)
  804978:	10800017 	ldw	r2,0(r2)
  80497c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  804980:	e0bfff17 	ldw	r2,-4(fp)
  804984:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  804988:	010ea604 	movi	r4,15000
  80498c:	0805e3c0 	call	805e3c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  804990:	e0bffe17 	ldw	r2,-8(fp)
  804994:	00c00c04 	movi	r3,48
  804998:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80499c:	01040104 	movi	r4,4100
  8049a0:	0805e3c0 	call	805e3c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8049a4:	e0bffe17 	ldw	r2,-8(fp)
  8049a8:	00c00c04 	movi	r3,48
  8049ac:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8049b0:	0100fa04 	movi	r4,1000
  8049b4:	0805e3c0 	call	805e3c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8049b8:	e0bffe17 	ldw	r2,-8(fp)
  8049bc:	00c00c04 	movi	r3,48
  8049c0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8049c4:	e13fff17 	ldw	r4,-4(fp)
  8049c8:	01400e04 	movi	r5,56
  8049cc:	0803c280 	call	803c28 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8049d0:	e13fff17 	ldw	r4,-4(fp)
  8049d4:	01400204 	movi	r5,8
  8049d8:	0803c280 	call	803c28 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8049dc:	e13fff17 	ldw	r4,-4(fp)
  8049e0:	0803db00 	call	803db0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8049e4:	e13fff17 	ldw	r4,-4(fp)
  8049e8:	01400184 	movi	r5,6
  8049ec:	0803c280 	call	803c28 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8049f0:	e13fff17 	ldw	r4,-4(fp)
  8049f4:	01400304 	movi	r5,12
  8049f8:	0803c280 	call	803c28 <lcd_write_command>

  sp->esccount = -1;
  8049fc:	e0bfff17 	ldw	r2,-4(fp)
  804a00:	00ffffc4 	movi	r3,-1
  804a04:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  804a08:	e0bfff17 	ldw	r2,-4(fp)
  804a0c:	10800a04 	addi	r2,r2,40
  804a10:	1009883a 	mov	r4,r2
  804a14:	000b883a 	mov	r5,zero
  804a18:	01800204 	movi	r6,8
  804a1c:	08028b80 	call	8028b8 <memset>

  sp->scrollpos = 0;
  804a20:	e0bfff17 	ldw	r2,-4(fp)
  804a24:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  804a28:	e0bfff17 	ldw	r2,-4(fp)
  804a2c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  804a30:	e0bfff17 	ldw	r2,-4(fp)
  804a34:	100009c5 	stb	zero,39(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804a38:	00802074 	movhi	r2,129
  804a3c:	10a0d204 	addi	r2,r2,-31928
  804a40:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  804a44:	1009883a 	mov	r4,r2
  804a48:	01400284 	movi	r5,10
  804a4c:	0802f4c0 	call	802f4c <__udivsi3>
  804a50:	1007883a 	mov	r3,r2
  804a54:	e0bfff17 	ldw	r2,-4(fp)
  804a58:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  804a5c:	e0bfff17 	ldw	r2,-4(fp)
  804a60:	10c00104 	addi	r3,r2,4
  804a64:	e0bfff17 	ldw	r2,-4(fp)
  804a68:	10800717 	ldw	r2,28(r2)
  804a6c:	1809883a 	mov	r4,r3
  804a70:	100b883a 	mov	r5,r2
  804a74:	01802034 	movhi	r6,128
  804a78:	31922d04 	addi	r6,r6,18612
  804a7c:	e1ffff17 	ldw	r7,-4(fp)
  804a80:	08053e40 	call	8053e4 <alt_alarm_start>
}
  804a84:	e037883a 	mov	sp,fp
  804a88:	dfc00117 	ldw	ra,4(sp)
  804a8c:	df000017 	ldw	fp,0(sp)
  804a90:	dec00204 	addi	sp,sp,8
  804a94:	f800283a 	ret

00804a98 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804a98:	defffa04 	addi	sp,sp,-24
  804a9c:	dfc00515 	stw	ra,20(sp)
  804aa0:	df000415 	stw	fp,16(sp)
  804aa4:	df000404 	addi	fp,sp,16
  804aa8:	e13ffd15 	stw	r4,-12(fp)
  804aac:	e17ffe15 	stw	r5,-8(fp)
  804ab0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  804ab4:	e0bffd17 	ldw	r2,-12(fp)
  804ab8:	10800017 	ldw	r2,0(r2)
  804abc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  804ac0:	e0bffc17 	ldw	r2,-16(fp)
  804ac4:	10c00a04 	addi	r3,r2,40
  804ac8:	e0bffd17 	ldw	r2,-12(fp)
  804acc:	10800217 	ldw	r2,8(r2)
  804ad0:	1809883a 	mov	r4,r3
  804ad4:	e17ffe17 	ldw	r5,-8(fp)
  804ad8:	e1bfff17 	ldw	r6,-4(fp)
  804adc:	100f883a 	mov	r7,r2
  804ae0:	08043cc0 	call	8043cc <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  804ae4:	e037883a 	mov	sp,fp
  804ae8:	dfc00117 	ldw	ra,4(sp)
  804aec:	df000017 	ldw	fp,0(sp)
  804af0:	dec00204 	addi	sp,sp,8
  804af4:	f800283a 	ret

00804af8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  804af8:	defffa04 	addi	sp,sp,-24
  804afc:	dfc00515 	stw	ra,20(sp)
  804b00:	df000415 	stw	fp,16(sp)
  804b04:	df000404 	addi	fp,sp,16
  804b08:	e13ffd15 	stw	r4,-12(fp)
  804b0c:	e17ffe15 	stw	r5,-8(fp)
  804b10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804b14:	e0bffd17 	ldw	r2,-12(fp)
  804b18:	10800017 	ldw	r2,0(r2)
  804b1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  804b20:	e0bffc17 	ldw	r2,-16(fp)
  804b24:	10c00a04 	addi	r3,r2,40
  804b28:	e0bffd17 	ldw	r2,-12(fp)
  804b2c:	10800217 	ldw	r2,8(r2)
  804b30:	1809883a 	mov	r4,r3
  804b34:	e17ffe17 	ldw	r5,-8(fp)
  804b38:	e1bfff17 	ldw	r6,-4(fp)
  804b3c:	100f883a 	mov	r7,r2
  804b40:	080500c0 	call	80500c <altera_avalon_uart_read>
      fd->fd_flags);
}
  804b44:	e037883a 	mov	sp,fp
  804b48:	dfc00117 	ldw	ra,4(sp)
  804b4c:	df000017 	ldw	fp,0(sp)
  804b50:	dec00204 	addi	sp,sp,8
  804b54:	f800283a 	ret

00804b58 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804b58:	defffa04 	addi	sp,sp,-24
  804b5c:	dfc00515 	stw	ra,20(sp)
  804b60:	df000415 	stw	fp,16(sp)
  804b64:	df000404 	addi	fp,sp,16
  804b68:	e13ffd15 	stw	r4,-12(fp)
  804b6c:	e17ffe15 	stw	r5,-8(fp)
  804b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804b74:	e0bffd17 	ldw	r2,-12(fp)
  804b78:	10800017 	ldw	r2,0(r2)
  804b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  804b80:	e0bffc17 	ldw	r2,-16(fp)
  804b84:	10c00a04 	addi	r3,r2,40
  804b88:	e0bffd17 	ldw	r2,-12(fp)
  804b8c:	10800217 	ldw	r2,8(r2)
  804b90:	1809883a 	mov	r4,r3
  804b94:	e17ffe17 	ldw	r5,-8(fp)
  804b98:	e1bfff17 	ldw	r6,-4(fp)
  804b9c:	100f883a 	mov	r7,r2
  804ba0:	08052380 	call	805238 <altera_avalon_uart_write>
      fd->fd_flags);
}
  804ba4:	e037883a 	mov	sp,fp
  804ba8:	dfc00117 	ldw	ra,4(sp)
  804bac:	df000017 	ldw	fp,0(sp)
  804bb0:	dec00204 	addi	sp,sp,8
  804bb4:	f800283a 	ret

00804bb8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  804bb8:	defffc04 	addi	sp,sp,-16
  804bbc:	dfc00315 	stw	ra,12(sp)
  804bc0:	df000215 	stw	fp,8(sp)
  804bc4:	df000204 	addi	fp,sp,8
  804bc8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804bcc:	e0bfff17 	ldw	r2,-4(fp)
  804bd0:	10800017 	ldw	r2,0(r2)
  804bd4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  804bd8:	e0bffe17 	ldw	r2,-8(fp)
  804bdc:	10c00a04 	addi	r3,r2,40
  804be0:	e0bfff17 	ldw	r2,-4(fp)
  804be4:	10800217 	ldw	r2,8(r2)
  804be8:	1809883a 	mov	r4,r3
  804bec:	100b883a 	mov	r5,r2
  804bf0:	0804f680 	call	804f68 <altera_avalon_uart_close>
}
  804bf4:	e037883a 	mov	sp,fp
  804bf8:	dfc00117 	ldw	ra,4(sp)
  804bfc:	df000017 	ldw	fp,0(sp)
  804c00:	dec00204 	addi	sp,sp,8
  804c04:	f800283a 	ret

00804c08 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  804c08:	defff904 	addi	sp,sp,-28
  804c0c:	dfc00615 	stw	ra,24(sp)
  804c10:	df000515 	stw	fp,20(sp)
  804c14:	df000504 	addi	fp,sp,20
  804c18:	e13ffd15 	stw	r4,-12(fp)
  804c1c:	e17ffe15 	stw	r5,-8(fp)
  804c20:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  804c24:	e0bffd17 	ldw	r2,-12(fp)
  804c28:	10800017 	ldw	r2,0(r2)
  804c2c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  804c30:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  804c34:	1000041e 	bne	r2,zero,804c48 <altera_avalon_uart_init+0x40>
  804c38:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  804c3c:	1000021e 	bne	r2,zero,804c48 <altera_avalon_uart_init+0x40>
  804c40:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  804c44:	10000226 	beq	r2,zero,804c50 <altera_avalon_uart_init+0x48>
  804c48:	00800044 	movi	r2,1
  804c4c:	00000106 	br	804c54 <altera_avalon_uart_init+0x4c>
  804c50:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  804c54:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  804c58:	e0bffc17 	ldw	r2,-16(fp)
  804c5c:	10000d1e 	bne	r2,zero,804c94 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  804c60:	e0bffd17 	ldw	r2,-12(fp)
  804c64:	00c32004 	movi	r3,3200
  804c68:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  804c6c:	e0bffb17 	ldw	r2,-20(fp)
  804c70:	10800304 	addi	r2,r2,12
  804c74:	e0fffd17 	ldw	r3,-12(fp)
  804c78:	18c00117 	ldw	r3,4(r3)
  804c7c:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  804c80:	e13fff17 	ldw	r4,-4(fp)
  804c84:	e17ffd17 	ldw	r5,-12(fp)
  804c88:	01802034 	movhi	r6,128
  804c8c:	31932a04 	addi	r6,r6,19624
  804c90:	080587c0 	call	80587c <alt_irq_register>
#endif  
  }
}
  804c94:	e037883a 	mov	sp,fp
  804c98:	dfc00117 	ldw	ra,4(sp)
  804c9c:	df000017 	ldw	fp,0(sp)
  804ca0:	dec00204 	addi	sp,sp,8
  804ca4:	f800283a 	ret

00804ca8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  804ca8:	defff904 	addi	sp,sp,-28
  804cac:	dfc00615 	stw	ra,24(sp)
  804cb0:	df000515 	stw	fp,20(sp)
  804cb4:	df000504 	addi	fp,sp,20
  804cb8:	e13ffe15 	stw	r4,-8(fp)
  804cbc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  804cc0:	e0bffe17 	ldw	r2,-8(fp)
  804cc4:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  804cc8:	e0bffb17 	ldw	r2,-20(fp)
  804ccc:	10800017 	ldw	r2,0(r2)
  804cd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  804cd4:	e0bffc17 	ldw	r2,-16(fp)
  804cd8:	10800204 	addi	r2,r2,8
  804cdc:	10800037 	ldwio	r2,0(r2)
  804ce0:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  804ce4:	e0bffc17 	ldw	r2,-16(fp)
  804ce8:	10800204 	addi	r2,r2,8
  804cec:	0007883a 	mov	r3,zero
  804cf0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  804cf4:	e0bffc17 	ldw	r2,-16(fp)
  804cf8:	10800204 	addi	r2,r2,8
  804cfc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  804d00:	e0bffd17 	ldw	r2,-12(fp)
  804d04:	1080200c 	andi	r2,r2,128
  804d08:	10000326 	beq	r2,zero,804d18 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  804d0c:	e13ffb17 	ldw	r4,-20(fp)
  804d10:	e17ffd17 	ldw	r5,-12(fp)
  804d14:	0804d440 	call	804d44 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  804d18:	e0bffd17 	ldw	r2,-12(fp)
  804d1c:	1081100c 	andi	r2,r2,1088
  804d20:	10000326 	beq	r2,zero,804d30 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  804d24:	e13ffb17 	ldw	r4,-20(fp)
  804d28:	e17ffd17 	ldw	r5,-12(fp)
  804d2c:	0804e240 	call	804e24 <altera_avalon_uart_txirq>
  }
  

}
  804d30:	e037883a 	mov	sp,fp
  804d34:	dfc00117 	ldw	ra,4(sp)
  804d38:	df000017 	ldw	fp,0(sp)
  804d3c:	dec00204 	addi	sp,sp,8
  804d40:	f800283a 	ret

00804d44 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  804d44:	defffc04 	addi	sp,sp,-16
  804d48:	df000315 	stw	fp,12(sp)
  804d4c:	df000304 	addi	fp,sp,12
  804d50:	e13ffe15 	stw	r4,-8(fp)
  804d54:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  804d58:	e0bfff17 	ldw	r2,-4(fp)
  804d5c:	108000cc 	andi	r2,r2,3
  804d60:	10000126 	beq	r2,zero,804d68 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  804d64:	00002b06 	br	804e14 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  804d68:	e0bffe17 	ldw	r2,-8(fp)
  804d6c:	10800317 	ldw	r2,12(r2)
  804d70:	e0bffe17 	ldw	r2,-8(fp)
  804d74:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  804d78:	e0bffe17 	ldw	r2,-8(fp)
  804d7c:	10800317 	ldw	r2,12(r2)
  804d80:	10800044 	addi	r2,r2,1
  804d84:	10800fcc 	andi	r2,r2,63
  804d88:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  804d8c:	e0bffe17 	ldw	r2,-8(fp)
  804d90:	10800317 	ldw	r2,12(r2)
  804d94:	e0fffe17 	ldw	r3,-8(fp)
  804d98:	18c00017 	ldw	r3,0(r3)
  804d9c:	18c00037 	ldwio	r3,0(r3)
  804da0:	1809883a 	mov	r4,r3
  804da4:	e0fffe17 	ldw	r3,-8(fp)
  804da8:	1885883a 	add	r2,r3,r2
  804dac:	10800704 	addi	r2,r2,28
  804db0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  804db4:	e0bffe17 	ldw	r2,-8(fp)
  804db8:	e0fffd17 	ldw	r3,-12(fp)
  804dbc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  804dc0:	e0bffe17 	ldw	r2,-8(fp)
  804dc4:	10800317 	ldw	r2,12(r2)
  804dc8:	10800044 	addi	r2,r2,1
  804dcc:	10800fcc 	andi	r2,r2,63
  804dd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  804dd4:	e0bffe17 	ldw	r2,-8(fp)
  804dd8:	10c00217 	ldw	r3,8(r2)
  804ddc:	e0bffd17 	ldw	r2,-12(fp)
  804de0:	18800c1e 	bne	r3,r2,804e14 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  804de4:	e0bffe17 	ldw	r2,-8(fp)
  804de8:	10c00117 	ldw	r3,4(r2)
  804dec:	00bfdfc4 	movi	r2,-129
  804df0:	1886703a 	and	r3,r3,r2
  804df4:	e0bffe17 	ldw	r2,-8(fp)
  804df8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  804dfc:	e0bffe17 	ldw	r2,-8(fp)
  804e00:	10800017 	ldw	r2,0(r2)
  804e04:	10800304 	addi	r2,r2,12
  804e08:	e0fffe17 	ldw	r3,-8(fp)
  804e0c:	18c00117 	ldw	r3,4(r3)
  804e10:	10c00035 	stwio	r3,0(r2)
  }   
}
  804e14:	e037883a 	mov	sp,fp
  804e18:	df000017 	ldw	fp,0(sp)
  804e1c:	dec00104 	addi	sp,sp,4
  804e20:	f800283a 	ret

00804e24 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  804e24:	defffb04 	addi	sp,sp,-20
  804e28:	df000415 	stw	fp,16(sp)
  804e2c:	df000404 	addi	fp,sp,16
  804e30:	e13ffc15 	stw	r4,-16(fp)
  804e34:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	10c00417 	ldw	r3,16(r2)
  804e40:	e0bffc17 	ldw	r2,-16(fp)
  804e44:	10800517 	ldw	r2,20(r2)
  804e48:	18803226 	beq	r3,r2,804f14 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  804e4c:	e0bffc17 	ldw	r2,-16(fp)
  804e50:	10800617 	ldw	r2,24(r2)
  804e54:	1080008c 	andi	r2,r2,2
  804e58:	10000326 	beq	r2,zero,804e68 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  804e5c:	e0bffd17 	ldw	r2,-12(fp)
  804e60:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  804e64:	10001d26 	beq	r2,zero,804edc <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10800417 	ldw	r2,16(r2)
  804e70:	e0bffc17 	ldw	r2,-16(fp)
  804e74:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  804e78:	e0bffc17 	ldw	r2,-16(fp)
  804e7c:	10800017 	ldw	r2,0(r2)
  804e80:	10800104 	addi	r2,r2,4
  804e84:	e0fffc17 	ldw	r3,-16(fp)
  804e88:	18c00417 	ldw	r3,16(r3)
  804e8c:	e13ffc17 	ldw	r4,-16(fp)
  804e90:	20c7883a 	add	r3,r4,r3
  804e94:	18c01704 	addi	r3,r3,92
  804e98:	18c00003 	ldbu	r3,0(r3)
  804e9c:	18c03fcc 	andi	r3,r3,255
  804ea0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  804ea4:	e0bffc17 	ldw	r2,-16(fp)
  804ea8:	10800417 	ldw	r2,16(r2)
  804eac:	10800044 	addi	r2,r2,1
  804eb0:	e0fffc17 	ldw	r3,-16(fp)
  804eb4:	18800415 	stw	r2,16(r3)
  804eb8:	10c00fcc 	andi	r3,r2,63
  804ebc:	e0bffc17 	ldw	r2,-16(fp)
  804ec0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  804ec4:	e0bffc17 	ldw	r2,-16(fp)
  804ec8:	10800117 	ldw	r2,4(r2)
  804ecc:	10c01014 	ori	r3,r2,64
  804ed0:	e0bffc17 	ldw	r2,-16(fp)
  804ed4:	10c00115 	stw	r3,4(r2)
  804ed8:	00000e06 	br	804f14 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  804edc:	e0bffc17 	ldw	r2,-16(fp)
  804ee0:	10800017 	ldw	r2,0(r2)
  804ee4:	10800204 	addi	r2,r2,8
  804ee8:	10800037 	ldwio	r2,0(r2)
  804eec:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  804ef0:	e0bffd17 	ldw	r2,-12(fp)
  804ef4:	1082000c 	andi	r2,r2,2048
  804ef8:	1000061e 	bne	r2,zero,804f14 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  804efc:	e0bffc17 	ldw	r2,-16(fp)
  804f00:	10c00117 	ldw	r3,4(r2)
  804f04:	00bfefc4 	movi	r2,-65
  804f08:	1886703a 	and	r3,r3,r2
  804f0c:	e0bffc17 	ldw	r2,-16(fp)
  804f10:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  804f14:	e0bffc17 	ldw	r2,-16(fp)
  804f18:	10c00417 	ldw	r3,16(r2)
  804f1c:	e0bffc17 	ldw	r2,-16(fp)
  804f20:	10800517 	ldw	r2,20(r2)
  804f24:	1880061e 	bne	r3,r2,804f40 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	10c00117 	ldw	r3,4(r2)
  804f30:	00beefc4 	movi	r2,-1089
  804f34:	1886703a 	and	r3,r3,r2
  804f38:	e0bffc17 	ldw	r2,-16(fp)
  804f3c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804f40:	e0bffc17 	ldw	r2,-16(fp)
  804f44:	10800017 	ldw	r2,0(r2)
  804f48:	10800304 	addi	r2,r2,12
  804f4c:	e0fffc17 	ldw	r3,-16(fp)
  804f50:	18c00117 	ldw	r3,4(r3)
  804f54:	10c00035 	stwio	r3,0(r2)
}
  804f58:	e037883a 	mov	sp,fp
  804f5c:	df000017 	ldw	fp,0(sp)
  804f60:	dec00104 	addi	sp,sp,4
  804f64:	f800283a 	ret

00804f68 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  804f68:	defffd04 	addi	sp,sp,-12
  804f6c:	df000215 	stw	fp,8(sp)
  804f70:	df000204 	addi	fp,sp,8
  804f74:	e13ffe15 	stw	r4,-8(fp)
  804f78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  804f7c:	00000506 	br	804f94 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  804f80:	e0bfff17 	ldw	r2,-4(fp)
  804f84:	1090000c 	andi	r2,r2,16384
  804f88:	10000226 	beq	r2,zero,804f94 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  804f8c:	00bffd44 	movi	r2,-11
  804f90:	00000606 	br	804fac <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  804f94:	e0bffe17 	ldw	r2,-8(fp)
  804f98:	10c00417 	ldw	r3,16(r2)
  804f9c:	e0bffe17 	ldw	r2,-8(fp)
  804fa0:	10800517 	ldw	r2,20(r2)
  804fa4:	18bff61e 	bne	r3,r2,804f80 <__alt_data_end+0xff804f80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804fa8:	0005883a 	mov	r2,zero
}
  804fac:	e037883a 	mov	sp,fp
  804fb0:	df000017 	ldw	fp,0(sp)
  804fb4:	dec00104 	addi	sp,sp,4
  804fb8:	f800283a 	ret

00804fbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804fbc:	defffe04 	addi	sp,sp,-8
  804fc0:	dfc00115 	stw	ra,4(sp)
  804fc4:	df000015 	stw	fp,0(sp)
  804fc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804fcc:	00802034 	movhi	r2,128
  804fd0:	109da204 	addi	r2,r2,30344
  804fd4:	10800017 	ldw	r2,0(r2)
  804fd8:	10000526 	beq	r2,zero,804ff0 <alt_get_errno+0x34>
  804fdc:	00802034 	movhi	r2,128
  804fe0:	109da204 	addi	r2,r2,30344
  804fe4:	10800017 	ldw	r2,0(r2)
  804fe8:	103ee83a 	callr	r2
  804fec:	00000206 	br	804ff8 <alt_get_errno+0x3c>
  804ff0:	00802074 	movhi	r2,129
  804ff4:	10a0cd04 	addi	r2,r2,-31948
}
  804ff8:	e037883a 	mov	sp,fp
  804ffc:	dfc00117 	ldw	ra,4(sp)
  805000:	df000017 	ldw	fp,0(sp)
  805004:	dec00204 	addi	sp,sp,8
  805008:	f800283a 	ret

0080500c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80500c:	defff204 	addi	sp,sp,-56
  805010:	dfc00d15 	stw	ra,52(sp)
  805014:	df000c15 	stw	fp,48(sp)
  805018:	df000c04 	addi	fp,sp,48
  80501c:	e13ffc15 	stw	r4,-16(fp)
  805020:	e17ffd15 	stw	r5,-12(fp)
  805024:	e1bffe15 	stw	r6,-8(fp)
  805028:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80502c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  805030:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  805034:	e0bfff17 	ldw	r2,-4(fp)
  805038:	1090000c 	andi	r2,r2,16384
  80503c:	1005003a 	cmpeq	r2,r2,zero
  805040:	10803fcc 	andi	r2,r2,255
  805044:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  805048:	00001306 	br	805098 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80504c:	e0bff517 	ldw	r2,-44(fp)
  805050:	10800044 	addi	r2,r2,1
  805054:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  805058:	e0bffd17 	ldw	r2,-12(fp)
  80505c:	10c00044 	addi	r3,r2,1
  805060:	e0fffd15 	stw	r3,-12(fp)
  805064:	e0fffc17 	ldw	r3,-16(fp)
  805068:	18c00217 	ldw	r3,8(r3)
  80506c:	e13ffc17 	ldw	r4,-16(fp)
  805070:	20c7883a 	add	r3,r4,r3
  805074:	18c00704 	addi	r3,r3,28
  805078:	18c00003 	ldbu	r3,0(r3)
  80507c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10800217 	ldw	r2,8(r2)
  805088:	10800044 	addi	r2,r2,1
  80508c:	10c00fcc 	andi	r3,r2,63
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  805098:	e0fff517 	ldw	r3,-44(fp)
  80509c:	e0bffe17 	ldw	r2,-8(fp)
  8050a0:	1880050e 	bge	r3,r2,8050b8 <altera_avalon_uart_read+0xac>
  8050a4:	e0bffc17 	ldw	r2,-16(fp)
  8050a8:	10c00217 	ldw	r3,8(r2)
  8050ac:	e0bffc17 	ldw	r2,-16(fp)
  8050b0:	10800317 	ldw	r2,12(r2)
  8050b4:	18bfe51e 	bne	r3,r2,80504c <__alt_data_end+0xff80504c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8050b8:	e0bff517 	ldw	r2,-44(fp)
  8050bc:	1000251e 	bne	r2,zero,805154 <altera_avalon_uart_read+0x148>
  8050c0:	e0bffc17 	ldw	r2,-16(fp)
  8050c4:	10c00217 	ldw	r3,8(r2)
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10800317 	ldw	r2,12(r2)
  8050d0:	1880201e 	bne	r3,r2,805154 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8050d4:	e0bff617 	ldw	r2,-40(fp)
  8050d8:	1000071e 	bne	r2,zero,8050f8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8050dc:	0804fbc0 	call	804fbc <alt_get_errno>
  8050e0:	1007883a 	mov	r3,r2
  8050e4:	008002c4 	movi	r2,11
  8050e8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8050ec:	00800044 	movi	r2,1
  8050f0:	e0bff405 	stb	r2,-48(fp)
        break;
  8050f4:	00001b06 	br	805164 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8050f8:	0005303a 	rdctl	r2,status
  8050fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805100:	e0fff817 	ldw	r3,-32(fp)
  805104:	00bfff84 	movi	r2,-2
  805108:	1884703a 	and	r2,r3,r2
  80510c:	1001703a 	wrctl	status,r2
  
  return context;
  805110:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  805114:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805118:	e0bffc17 	ldw	r2,-16(fp)
  80511c:	10800117 	ldw	r2,4(r2)
  805120:	10c02014 	ori	r3,r2,128
  805124:	e0bffc17 	ldw	r2,-16(fp)
  805128:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80512c:	e0bffc17 	ldw	r2,-16(fp)
  805130:	10800017 	ldw	r2,0(r2)
  805134:	10800304 	addi	r2,r2,12
  805138:	e0fffc17 	ldw	r3,-16(fp)
  80513c:	18c00117 	ldw	r3,4(r3)
  805140:	10c00035 	stwio	r3,0(r2)
  805144:	e0bff717 	ldw	r2,-36(fp)
  805148:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80514c:	e0bff917 	ldw	r2,-28(fp)
  805150:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  805154:	e0bff517 	ldw	r2,-44(fp)
  805158:	1000021e 	bne	r2,zero,805164 <altera_avalon_uart_read+0x158>
  80515c:	e0bffe17 	ldw	r2,-8(fp)
  805160:	103fb91e 	bne	r2,zero,805048 <__alt_data_end+0xff805048>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805164:	0005303a 	rdctl	r2,status
  805168:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80516c:	e0fffa17 	ldw	r3,-24(fp)
  805170:	00bfff84 	movi	r2,-2
  805174:	1884703a 	and	r2,r3,r2
  805178:	1001703a 	wrctl	status,r2
  
  return context;
  80517c:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  805180:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805184:	e0bffc17 	ldw	r2,-16(fp)
  805188:	10800117 	ldw	r2,4(r2)
  80518c:	10c02014 	ori	r3,r2,128
  805190:	e0bffc17 	ldw	r2,-16(fp)
  805194:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805198:	e0bffc17 	ldw	r2,-16(fp)
  80519c:	10800017 	ldw	r2,0(r2)
  8051a0:	10800304 	addi	r2,r2,12
  8051a4:	e0fffc17 	ldw	r3,-16(fp)
  8051a8:	18c00117 	ldw	r3,4(r3)
  8051ac:	10c00035 	stwio	r3,0(r2)
  8051b0:	e0bff717 	ldw	r2,-36(fp)
  8051b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8051b8:	e0bffb17 	ldw	r2,-20(fp)
  8051bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8051c0:	e0bff403 	ldbu	r2,-48(fp)
  8051c4:	10000226 	beq	r2,zero,8051d0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  8051c8:	00bffd44 	movi	r2,-11
  8051cc:	00000106 	br	8051d4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  8051d0:	e0bff517 	ldw	r2,-44(fp)
  }
}
  8051d4:	e037883a 	mov	sp,fp
  8051d8:	dfc00117 	ldw	ra,4(sp)
  8051dc:	df000017 	ldw	fp,0(sp)
  8051e0:	dec00204 	addi	sp,sp,8
  8051e4:	f800283a 	ret

008051e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8051e8:	defffe04 	addi	sp,sp,-8
  8051ec:	dfc00115 	stw	ra,4(sp)
  8051f0:	df000015 	stw	fp,0(sp)
  8051f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8051f8:	00802034 	movhi	r2,128
  8051fc:	109da204 	addi	r2,r2,30344
  805200:	10800017 	ldw	r2,0(r2)
  805204:	10000526 	beq	r2,zero,80521c <alt_get_errno+0x34>
  805208:	00802034 	movhi	r2,128
  80520c:	109da204 	addi	r2,r2,30344
  805210:	10800017 	ldw	r2,0(r2)
  805214:	103ee83a 	callr	r2
  805218:	00000206 	br	805224 <alt_get_errno+0x3c>
  80521c:	00802074 	movhi	r2,129
  805220:	10a0cd04 	addi	r2,r2,-31948
}
  805224:	e037883a 	mov	sp,fp
  805228:	dfc00117 	ldw	ra,4(sp)
  80522c:	df000017 	ldw	fp,0(sp)
  805230:	dec00204 	addi	sp,sp,8
  805234:	f800283a 	ret

00805238 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  805238:	defff204 	addi	sp,sp,-56
  80523c:	dfc00d15 	stw	ra,52(sp)
  805240:	df000c15 	stw	fp,48(sp)
  805244:	df000c04 	addi	fp,sp,48
  805248:	e13ffc15 	stw	r4,-16(fp)
  80524c:	e17ffd15 	stw	r5,-12(fp)
  805250:	e1bffe15 	stw	r6,-8(fp)
  805254:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  805258:	e0bffe17 	ldw	r2,-8(fp)
  80525c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  805260:	e0bfff17 	ldw	r2,-4(fp)
  805264:	1090000c 	andi	r2,r2,16384
  805268:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80526c:	00003c06 	br	805360 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  805270:	e0bffc17 	ldw	r2,-16(fp)
  805274:	10800517 	ldw	r2,20(r2)
  805278:	10800044 	addi	r2,r2,1
  80527c:	10800fcc 	andi	r2,r2,63
  805280:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  805284:	e0bffc17 	ldw	r2,-16(fp)
  805288:	10c00417 	ldw	r3,16(r2)
  80528c:	e0bff617 	ldw	r2,-40(fp)
  805290:	1880221e 	bne	r3,r2,80531c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  805294:	e0bff517 	ldw	r2,-44(fp)
  805298:	10000526 	beq	r2,zero,8052b0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80529c:	08051e80 	call	8051e8 <alt_get_errno>
  8052a0:	1007883a 	mov	r3,r2
  8052a4:	008002c4 	movi	r2,11
  8052a8:	18800015 	stw	r2,0(r3)
        break;
  8052ac:	00002e06 	br	805368 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8052b0:	0005303a 	rdctl	r2,status
  8052b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8052b8:	e0fff817 	ldw	r3,-32(fp)
  8052bc:	00bfff84 	movi	r2,-2
  8052c0:	1884703a 	and	r2,r3,r2
  8052c4:	1001703a 	wrctl	status,r2
  
  return context;
  8052c8:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8052cc:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8052d0:	e0bffc17 	ldw	r2,-16(fp)
  8052d4:	10800117 	ldw	r2,4(r2)
  8052d8:	10c11014 	ori	r3,r2,1088
  8052dc:	e0bffc17 	ldw	r2,-16(fp)
  8052e0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8052e4:	e0bffc17 	ldw	r2,-16(fp)
  8052e8:	10800017 	ldw	r2,0(r2)
  8052ec:	10800304 	addi	r2,r2,12
  8052f0:	e0fffc17 	ldw	r3,-16(fp)
  8052f4:	18c00117 	ldw	r3,4(r3)
  8052f8:	10c00035 	stwio	r3,0(r2)
  8052fc:	e0bff717 	ldw	r2,-36(fp)
  805300:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805304:	e0bff917 	ldw	r2,-28(fp)
  805308:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80530c:	e0bffc17 	ldw	r2,-16(fp)
  805310:	10c00417 	ldw	r3,16(r2)
  805314:	e0bff617 	ldw	r2,-40(fp)
  805318:	18bffc26 	beq	r3,r2,80530c <__alt_data_end+0xff80530c>
      }
    }

    count--;
  80531c:	e0bff417 	ldw	r2,-48(fp)
  805320:	10bfffc4 	addi	r2,r2,-1
  805324:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  805328:	e0bffc17 	ldw	r2,-16(fp)
  80532c:	10c00517 	ldw	r3,20(r2)
  805330:	e0bffd17 	ldw	r2,-12(fp)
  805334:	11000044 	addi	r4,r2,1
  805338:	e13ffd15 	stw	r4,-12(fp)
  80533c:	10800003 	ldbu	r2,0(r2)
  805340:	1009883a 	mov	r4,r2
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	10c5883a 	add	r2,r2,r3
  80534c:	10801704 	addi	r2,r2,92
  805350:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  805354:	e0bffc17 	ldw	r2,-16(fp)
  805358:	e0fff617 	ldw	r3,-40(fp)
  80535c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  805360:	e0bff417 	ldw	r2,-48(fp)
  805364:	103fc21e 	bne	r2,zero,805270 <__alt_data_end+0xff805270>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805368:	0005303a 	rdctl	r2,status
  80536c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805370:	e0fffa17 	ldw	r3,-24(fp)
  805374:	00bfff84 	movi	r2,-2
  805378:	1884703a 	and	r2,r3,r2
  80537c:	1001703a 	wrctl	status,r2
  
  return context;
  805380:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  805384:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805388:	e0bffc17 	ldw	r2,-16(fp)
  80538c:	10800117 	ldw	r2,4(r2)
  805390:	10c11014 	ori	r3,r2,1088
  805394:	e0bffc17 	ldw	r2,-16(fp)
  805398:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80539c:	e0bffc17 	ldw	r2,-16(fp)
  8053a0:	10800017 	ldw	r2,0(r2)
  8053a4:	10800304 	addi	r2,r2,12
  8053a8:	e0fffc17 	ldw	r3,-16(fp)
  8053ac:	18c00117 	ldw	r3,4(r3)
  8053b0:	10c00035 	stwio	r3,0(r2)
  8053b4:	e0bff717 	ldw	r2,-36(fp)
  8053b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8053bc:	e0bffb17 	ldw	r2,-20(fp)
  8053c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8053c4:	e0fffe17 	ldw	r3,-8(fp)
  8053c8:	e0bff417 	ldw	r2,-48(fp)
  8053cc:	1885c83a 	sub	r2,r3,r2
}
  8053d0:	e037883a 	mov	sp,fp
  8053d4:	dfc00117 	ldw	ra,4(sp)
  8053d8:	df000017 	ldw	fp,0(sp)
  8053dc:	dec00204 	addi	sp,sp,8
  8053e0:	f800283a 	ret

008053e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8053e4:	defff504 	addi	sp,sp,-44
  8053e8:	df000a15 	stw	fp,40(sp)
  8053ec:	df000a04 	addi	fp,sp,40
  8053f0:	e13ffc15 	stw	r4,-16(fp)
  8053f4:	e17ffd15 	stw	r5,-12(fp)
  8053f8:	e1bffe15 	stw	r6,-8(fp)
  8053fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  805400:	e03ff615 	stw	zero,-40(fp)
  805404:	00802074 	movhi	r2,129
  805408:	10a0d204 	addi	r2,r2,-31928
  80540c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  805410:	10003f26 	beq	r2,zero,805510 <alt_alarm_start+0x12c>
  {
    if (alarm)
  805414:	e0bffc17 	ldw	r2,-16(fp)
  805418:	10003b26 	beq	r2,zero,805508 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  80541c:	e0bffc17 	ldw	r2,-16(fp)
  805420:	e0fffe17 	ldw	r3,-8(fp)
  805424:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  805428:	e0bffc17 	ldw	r2,-16(fp)
  80542c:	e0ffff17 	ldw	r3,-4(fp)
  805430:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805434:	0005303a 	rdctl	r2,status
  805438:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80543c:	e0fff817 	ldw	r3,-32(fp)
  805440:	00bfff84 	movi	r2,-2
  805444:	1884703a 	and	r2,r3,r2
  805448:	1001703a 	wrctl	status,r2
  
  return context;
  80544c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  805450:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805454:	00802074 	movhi	r2,129
  805458:	10a0d304 	addi	r2,r2,-31924
  80545c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  805460:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  805464:	e0fffd17 	ldw	r3,-12(fp)
  805468:	e0bff617 	ldw	r2,-40(fp)
  80546c:	1885883a 	add	r2,r3,r2
  805470:	10c00044 	addi	r3,r2,1
  805474:	e0bffc17 	ldw	r2,-16(fp)
  805478:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80547c:	e0bffc17 	ldw	r2,-16(fp)
  805480:	10c00217 	ldw	r3,8(r2)
  805484:	e0bff617 	ldw	r2,-40(fp)
  805488:	1880042e 	bgeu	r3,r2,80549c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  80548c:	e0bffc17 	ldw	r2,-16(fp)
  805490:	00c00044 	movi	r3,1
  805494:	10c00405 	stb	r3,16(r2)
  805498:	00000206 	br	8054a4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  80549c:	e0bffc17 	ldw	r2,-16(fp)
  8054a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8054a4:	e0fffc17 	ldw	r3,-16(fp)
  8054a8:	00802034 	movhi	r2,128
  8054ac:	109da604 	addi	r2,r2,30360
  8054b0:	e0bff915 	stw	r2,-28(fp)
  8054b4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8054b8:	e0bffa17 	ldw	r2,-24(fp)
  8054bc:	e0fff917 	ldw	r3,-28(fp)
  8054c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8054c4:	e0bff917 	ldw	r2,-28(fp)
  8054c8:	10c00017 	ldw	r3,0(r2)
  8054cc:	e0bffa17 	ldw	r2,-24(fp)
  8054d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8054d4:	e0bff917 	ldw	r2,-28(fp)
  8054d8:	10800017 	ldw	r2,0(r2)
  8054dc:	e0fffa17 	ldw	r3,-24(fp)
  8054e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8054e4:	e0bff917 	ldw	r2,-28(fp)
  8054e8:	e0fffa17 	ldw	r3,-24(fp)
  8054ec:	10c00015 	stw	r3,0(r2)
  8054f0:	e0bff717 	ldw	r2,-36(fp)
  8054f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8054f8:	e0bffb17 	ldw	r2,-20(fp)
  8054fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  805500:	0005883a 	mov	r2,zero
  805504:	00000306 	br	805514 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  805508:	00bffa84 	movi	r2,-22
  80550c:	00000106 	br	805514 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  805510:	00bfde84 	movi	r2,-134
  }
}
  805514:	e037883a 	mov	sp,fp
  805518:	df000017 	ldw	fp,0(sp)
  80551c:	dec00104 	addi	sp,sp,4
  805520:	f800283a 	ret

00805524 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805524:	defffe04 	addi	sp,sp,-8
  805528:	df000115 	stw	fp,4(sp)
  80552c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  805530:	e03fff15 	stw	zero,-4(fp)
  805534:	00000506 	br	80554c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  805538:	e0bfff17 	ldw	r2,-4(fp)
  80553c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  805540:	e0bfff17 	ldw	r2,-4(fp)
  805544:	10800804 	addi	r2,r2,32
  805548:	e0bfff15 	stw	r2,-4(fp)
  80554c:	e0bfff17 	ldw	r2,-4(fp)
  805550:	10820030 	cmpltui	r2,r2,2048
  805554:	103ff81e 	bne	r2,zero,805538 <__alt_data_end+0xff805538>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  805558:	e037883a 	mov	sp,fp
  80555c:	df000017 	ldw	fp,0(sp)
  805560:	dec00104 	addi	sp,sp,4
  805564:	f800283a 	ret

00805568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805568:	defffe04 	addi	sp,sp,-8
  80556c:	dfc00115 	stw	ra,4(sp)
  805570:	df000015 	stw	fp,0(sp)
  805574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805578:	00802034 	movhi	r2,128
  80557c:	109da204 	addi	r2,r2,30344
  805580:	10800017 	ldw	r2,0(r2)
  805584:	10000526 	beq	r2,zero,80559c <alt_get_errno+0x34>
  805588:	00802034 	movhi	r2,128
  80558c:	109da204 	addi	r2,r2,30344
  805590:	10800017 	ldw	r2,0(r2)
  805594:	103ee83a 	callr	r2
  805598:	00000206 	br	8055a4 <alt_get_errno+0x3c>
  80559c:	00802074 	movhi	r2,129
  8055a0:	10a0cd04 	addi	r2,r2,-31948
}
  8055a4:	e037883a 	mov	sp,fp
  8055a8:	dfc00117 	ldw	ra,4(sp)
  8055ac:	df000017 	ldw	fp,0(sp)
  8055b0:	dec00204 	addi	sp,sp,8
  8055b4:	f800283a 	ret

008055b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8055b8:	defffa04 	addi	sp,sp,-24
  8055bc:	dfc00515 	stw	ra,20(sp)
  8055c0:	df000415 	stw	fp,16(sp)
  8055c4:	df000404 	addi	fp,sp,16
  8055c8:	e13ffe15 	stw	r4,-8(fp)
  8055cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8055d0:	e0bffe17 	ldw	r2,-8(fp)
  8055d4:	10000326 	beq	r2,zero,8055e4 <alt_dev_llist_insert+0x2c>
  8055d8:	e0bffe17 	ldw	r2,-8(fp)
  8055dc:	10800217 	ldw	r2,8(r2)
  8055e0:	1000061e 	bne	r2,zero,8055fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8055e4:	08055680 	call	805568 <alt_get_errno>
  8055e8:	1007883a 	mov	r3,r2
  8055ec:	00800584 	movi	r2,22
  8055f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8055f4:	00bffa84 	movi	r2,-22
  8055f8:	00001306 	br	805648 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8055fc:	e0bffe17 	ldw	r2,-8(fp)
  805600:	e0ffff17 	ldw	r3,-4(fp)
  805604:	e0fffc15 	stw	r3,-16(fp)
  805608:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80560c:	e0bffd17 	ldw	r2,-12(fp)
  805610:	e0fffc17 	ldw	r3,-16(fp)
  805614:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  805618:	e0bffc17 	ldw	r2,-16(fp)
  80561c:	10c00017 	ldw	r3,0(r2)
  805620:	e0bffd17 	ldw	r2,-12(fp)
  805624:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805628:	e0bffc17 	ldw	r2,-16(fp)
  80562c:	10800017 	ldw	r2,0(r2)
  805630:	e0fffd17 	ldw	r3,-12(fp)
  805634:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  805638:	e0bffc17 	ldw	r2,-16(fp)
  80563c:	e0fffd17 	ldw	r3,-12(fp)
  805640:	10c00015 	stw	r3,0(r2)

  return 0;  
  805644:	0005883a 	mov	r2,zero
}
  805648:	e037883a 	mov	sp,fp
  80564c:	dfc00117 	ldw	ra,4(sp)
  805650:	df000017 	ldw	fp,0(sp)
  805654:	dec00204 	addi	sp,sp,8
  805658:	f800283a 	ret

0080565c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80565c:	defffd04 	addi	sp,sp,-12
  805660:	dfc00215 	stw	ra,8(sp)
  805664:	df000115 	stw	fp,4(sp)
  805668:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80566c:	00802034 	movhi	r2,128
  805670:	1099c104 	addi	r2,r2,26372
  805674:	e0bfff15 	stw	r2,-4(fp)
  805678:	00000606 	br	805694 <_do_ctors+0x38>
        (*ctor) (); 
  80567c:	e0bfff17 	ldw	r2,-4(fp)
  805680:	10800017 	ldw	r2,0(r2)
  805684:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805688:	e0bfff17 	ldw	r2,-4(fp)
  80568c:	10bfff04 	addi	r2,r2,-4
  805690:	e0bfff15 	stw	r2,-4(fp)
  805694:	e0ffff17 	ldw	r3,-4(fp)
  805698:	00802034 	movhi	r2,128
  80569c:	1099c204 	addi	r2,r2,26376
  8056a0:	18bff62e 	bgeu	r3,r2,80567c <__alt_data_end+0xff80567c>
        (*ctor) (); 
}
  8056a4:	e037883a 	mov	sp,fp
  8056a8:	dfc00117 	ldw	ra,4(sp)
  8056ac:	df000017 	ldw	fp,0(sp)
  8056b0:	dec00204 	addi	sp,sp,8
  8056b4:	f800283a 	ret

008056b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8056b8:	defffd04 	addi	sp,sp,-12
  8056bc:	dfc00215 	stw	ra,8(sp)
  8056c0:	df000115 	stw	fp,4(sp)
  8056c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8056c8:	00802034 	movhi	r2,128
  8056cc:	1099c104 	addi	r2,r2,26372
  8056d0:	e0bfff15 	stw	r2,-4(fp)
  8056d4:	00000606 	br	8056f0 <_do_dtors+0x38>
        (*dtor) (); 
  8056d8:	e0bfff17 	ldw	r2,-4(fp)
  8056dc:	10800017 	ldw	r2,0(r2)
  8056e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8056e4:	e0bfff17 	ldw	r2,-4(fp)
  8056e8:	10bfff04 	addi	r2,r2,-4
  8056ec:	e0bfff15 	stw	r2,-4(fp)
  8056f0:	e0ffff17 	ldw	r3,-4(fp)
  8056f4:	00802034 	movhi	r2,128
  8056f8:	1099c204 	addi	r2,r2,26376
  8056fc:	18bff62e 	bgeu	r3,r2,8056d8 <__alt_data_end+0xff8056d8>
        (*dtor) (); 
}
  805700:	e037883a 	mov	sp,fp
  805704:	dfc00117 	ldw	ra,4(sp)
  805708:	df000017 	ldw	fp,0(sp)
  80570c:	dec00204 	addi	sp,sp,8
  805710:	f800283a 	ret

00805714 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  805714:	defffe04 	addi	sp,sp,-8
  805718:	dfc00115 	stw	ra,4(sp)
  80571c:	df000015 	stw	fp,0(sp)
  805720:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  805724:	0009883a 	mov	r4,zero
  805728:	01440004 	movi	r5,4096
  80572c:	080623c0 	call	80623c <alt_icache_flush>
#endif
}
  805730:	e037883a 	mov	sp,fp
  805734:	dfc00117 	ldw	ra,4(sp)
  805738:	df000017 	ldw	fp,0(sp)
  80573c:	dec00204 	addi	sp,sp,8
  805740:	f800283a 	ret

00805744 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  805744:	defff904 	addi	sp,sp,-28
  805748:	dfc00615 	stw	ra,24(sp)
  80574c:	df000515 	stw	fp,20(sp)
  805750:	df000504 	addi	fp,sp,20
  805754:	e13ffc15 	stw	r4,-16(fp)
  805758:	e17ffd15 	stw	r5,-12(fp)
  80575c:	e1bffe15 	stw	r6,-8(fp)
  805760:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  805764:	e13ffd17 	ldw	r4,-12(fp)
  805768:	e17ffe17 	ldw	r5,-8(fp)
  80576c:	e1bfff17 	ldw	r6,-4(fp)
  805770:	0805b480 	call	805b48 <open>
  805774:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  805778:	e0bffb17 	ldw	r2,-20(fp)
  80577c:	10001c16 	blt	r2,zero,8057f0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  805780:	00802034 	movhi	r2,128
  805784:	109c9d04 	addi	r2,r2,29300
  805788:	e0fffb17 	ldw	r3,-20(fp)
  80578c:	18c00324 	muli	r3,r3,12
  805790:	10c5883a 	add	r2,r2,r3
  805794:	10c00017 	ldw	r3,0(r2)
  805798:	e0bffc17 	ldw	r2,-16(fp)
  80579c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8057a0:	00802034 	movhi	r2,128
  8057a4:	109c9d04 	addi	r2,r2,29300
  8057a8:	e0fffb17 	ldw	r3,-20(fp)
  8057ac:	18c00324 	muli	r3,r3,12
  8057b0:	18c00104 	addi	r3,r3,4
  8057b4:	10c5883a 	add	r2,r2,r3
  8057b8:	10c00017 	ldw	r3,0(r2)
  8057bc:	e0bffc17 	ldw	r2,-16(fp)
  8057c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8057c4:	00802034 	movhi	r2,128
  8057c8:	109c9d04 	addi	r2,r2,29300
  8057cc:	e0fffb17 	ldw	r3,-20(fp)
  8057d0:	18c00324 	muli	r3,r3,12
  8057d4:	18c00204 	addi	r3,r3,8
  8057d8:	10c5883a 	add	r2,r2,r3
  8057dc:	10c00017 	ldw	r3,0(r2)
  8057e0:	e0bffc17 	ldw	r2,-16(fp)
  8057e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8057e8:	e13ffb17 	ldw	r4,-20(fp)
  8057ec:	08036a80 	call	8036a8 <alt_release_fd>
  }
} 
  8057f0:	e037883a 	mov	sp,fp
  8057f4:	dfc00117 	ldw	ra,4(sp)
  8057f8:	df000017 	ldw	fp,0(sp)
  8057fc:	dec00204 	addi	sp,sp,8
  805800:	f800283a 	ret

00805804 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  805804:	defffb04 	addi	sp,sp,-20
  805808:	dfc00415 	stw	ra,16(sp)
  80580c:	df000315 	stw	fp,12(sp)
  805810:	df000304 	addi	fp,sp,12
  805814:	e13ffd15 	stw	r4,-12(fp)
  805818:	e17ffe15 	stw	r5,-8(fp)
  80581c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805820:	01002034 	movhi	r4,128
  805824:	211ca004 	addi	r4,r4,29312
  805828:	e17ffd17 	ldw	r5,-12(fp)
  80582c:	01800044 	movi	r6,1
  805830:	01c07fc4 	movi	r7,511
  805834:	08057440 	call	805744 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  805838:	01002034 	movhi	r4,128
  80583c:	211c9d04 	addi	r4,r4,29300
  805840:	e17ffe17 	ldw	r5,-8(fp)
  805844:	000d883a 	mov	r6,zero
  805848:	01c07fc4 	movi	r7,511
  80584c:	08057440 	call	805744 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  805850:	01002034 	movhi	r4,128
  805854:	211ca304 	addi	r4,r4,29324
  805858:	e17fff17 	ldw	r5,-4(fp)
  80585c:	01800044 	movi	r6,1
  805860:	01c07fc4 	movi	r7,511
  805864:	08057440 	call	805744 <alt_open_fd>
}  
  805868:	e037883a 	mov	sp,fp
  80586c:	dfc00117 	ldw	ra,4(sp)
  805870:	df000017 	ldw	fp,0(sp)
  805874:	dec00204 	addi	sp,sp,8
  805878:	f800283a 	ret

0080587c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80587c:	defff004 	addi	sp,sp,-64
  805880:	df000f15 	stw	fp,60(sp)
  805884:	df000f04 	addi	fp,sp,60
  805888:	e13ffd15 	stw	r4,-12(fp)
  80588c:	e17ffe15 	stw	r5,-8(fp)
  805890:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  805894:	00bffa84 	movi	r2,-22
  805898:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80589c:	e0bffd17 	ldw	r2,-12(fp)
  8058a0:	10800828 	cmpgeui	r2,r2,32
  8058a4:	10005c1e 	bne	r2,zero,805a18 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8058a8:	0005303a 	rdctl	r2,status
  8058ac:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8058b0:	e0fff317 	ldw	r3,-52(fp)
  8058b4:	00bfff84 	movi	r2,-2
  8058b8:	1884703a 	and	r2,r3,r2
  8058bc:	1001703a 	wrctl	status,r2
  
  return context;
  8058c0:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8058c4:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  8058c8:	00802074 	movhi	r2,129
  8058cc:	10a0df04 	addi	r2,r2,-31876
  8058d0:	e0fffd17 	ldw	r3,-12(fp)
  8058d4:	180690fa 	slli	r3,r3,3
  8058d8:	10c5883a 	add	r2,r2,r3
  8058dc:	e0ffff17 	ldw	r3,-4(fp)
  8058e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  8058e4:	00802074 	movhi	r2,129
  8058e8:	10a0df04 	addi	r2,r2,-31876
  8058ec:	e0fffd17 	ldw	r3,-12(fp)
  8058f0:	180690fa 	slli	r3,r3,3
  8058f4:	18c00104 	addi	r3,r3,4
  8058f8:	10c5883a 	add	r2,r2,r3
  8058fc:	e0fffe17 	ldw	r3,-8(fp)
  805900:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  805904:	e0bfff17 	ldw	r2,-4(fp)
  805908:	10001f26 	beq	r2,zero,805988 <alt_irq_register+0x10c>
  80590c:	e0bffd17 	ldw	r2,-12(fp)
  805910:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805914:	0005303a 	rdctl	r2,status
  805918:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80591c:	e0fff517 	ldw	r3,-44(fp)
  805920:	00bfff84 	movi	r2,-2
  805924:	1884703a 	and	r2,r3,r2
  805928:	1001703a 	wrctl	status,r2
  
  return context;
  80592c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805930:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  805934:	e0bff417 	ldw	r2,-48(fp)
  805938:	00c00044 	movi	r3,1
  80593c:	1884983a 	sll	r2,r3,r2
  805940:	1007883a 	mov	r3,r2
  805944:	00802074 	movhi	r2,129
  805948:	10a0d104 	addi	r2,r2,-31932
  80594c:	10800017 	ldw	r2,0(r2)
  805950:	1886b03a 	or	r3,r3,r2
  805954:	00802074 	movhi	r2,129
  805958:	10a0d104 	addi	r2,r2,-31932
  80595c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805960:	00802074 	movhi	r2,129
  805964:	10a0d104 	addi	r2,r2,-31932
  805968:	10800017 	ldw	r2,0(r2)
  80596c:	100170fa 	wrctl	ienable,r2
  805970:	e0bff617 	ldw	r2,-40(fp)
  805974:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805978:	e0bff717 	ldw	r2,-36(fp)
  80597c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805980:	0005883a 	mov	r2,zero
  805984:	00001f06 	br	805a04 <alt_irq_register+0x188>
  805988:	e0bffd17 	ldw	r2,-12(fp)
  80598c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805990:	0005303a 	rdctl	r2,status
  805994:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805998:	e0fff917 	ldw	r3,-28(fp)
  80599c:	00bfff84 	movi	r2,-2
  8059a0:	1884703a 	and	r2,r3,r2
  8059a4:	1001703a 	wrctl	status,r2
  
  return context;
  8059a8:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8059ac:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  8059b0:	e0bff817 	ldw	r2,-32(fp)
  8059b4:	00c00044 	movi	r3,1
  8059b8:	1884983a 	sll	r2,r3,r2
  8059bc:	0084303a 	nor	r2,zero,r2
  8059c0:	1007883a 	mov	r3,r2
  8059c4:	00802074 	movhi	r2,129
  8059c8:	10a0d104 	addi	r2,r2,-31932
  8059cc:	10800017 	ldw	r2,0(r2)
  8059d0:	1886703a 	and	r3,r3,r2
  8059d4:	00802074 	movhi	r2,129
  8059d8:	10a0d104 	addi	r2,r2,-31932
  8059dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8059e0:	00802074 	movhi	r2,129
  8059e4:	10a0d104 	addi	r2,r2,-31932
  8059e8:	10800017 	ldw	r2,0(r2)
  8059ec:	100170fa 	wrctl	ienable,r2
  8059f0:	e0bffa17 	ldw	r2,-24(fp)
  8059f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8059f8:	e0bffb17 	ldw	r2,-20(fp)
  8059fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805a00:	0005883a 	mov	r2,zero
  805a04:	e0bff115 	stw	r2,-60(fp)
  805a08:	e0bff217 	ldw	r2,-56(fp)
  805a0c:	e0bffc15 	stw	r2,-16(fp)
  805a10:	e0bffc17 	ldw	r2,-16(fp)
  805a14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  805a18:	e0bff117 	ldw	r2,-60(fp)
}
  805a1c:	e037883a 	mov	sp,fp
  805a20:	df000017 	ldw	fp,0(sp)
  805a24:	dec00104 	addi	sp,sp,4
  805a28:	f800283a 	ret

00805a2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805a2c:	defffe04 	addi	sp,sp,-8
  805a30:	dfc00115 	stw	ra,4(sp)
  805a34:	df000015 	stw	fp,0(sp)
  805a38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805a3c:	00802034 	movhi	r2,128
  805a40:	109da204 	addi	r2,r2,30344
  805a44:	10800017 	ldw	r2,0(r2)
  805a48:	10000526 	beq	r2,zero,805a60 <alt_get_errno+0x34>
  805a4c:	00802034 	movhi	r2,128
  805a50:	109da204 	addi	r2,r2,30344
  805a54:	10800017 	ldw	r2,0(r2)
  805a58:	103ee83a 	callr	r2
  805a5c:	00000206 	br	805a68 <alt_get_errno+0x3c>
  805a60:	00802074 	movhi	r2,129
  805a64:	10a0cd04 	addi	r2,r2,-31948
}
  805a68:	e037883a 	mov	sp,fp
  805a6c:	dfc00117 	ldw	ra,4(sp)
  805a70:	df000017 	ldw	fp,0(sp)
  805a74:	dec00204 	addi	sp,sp,8
  805a78:	f800283a 	ret

00805a7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805a7c:	defffd04 	addi	sp,sp,-12
  805a80:	df000215 	stw	fp,8(sp)
  805a84:	df000204 	addi	fp,sp,8
  805a88:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805a8c:	e0bfff17 	ldw	r2,-4(fp)
  805a90:	10800217 	ldw	r2,8(r2)
  805a94:	10d00034 	orhi	r3,r2,16384
  805a98:	e0bfff17 	ldw	r2,-4(fp)
  805a9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805aa0:	e03ffe15 	stw	zero,-8(fp)
  805aa4:	00001d06 	br	805b1c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805aa8:	00802034 	movhi	r2,128
  805aac:	109c9d04 	addi	r2,r2,29300
  805ab0:	e0fffe17 	ldw	r3,-8(fp)
  805ab4:	18c00324 	muli	r3,r3,12
  805ab8:	10c5883a 	add	r2,r2,r3
  805abc:	10c00017 	ldw	r3,0(r2)
  805ac0:	e0bfff17 	ldw	r2,-4(fp)
  805ac4:	10800017 	ldw	r2,0(r2)
  805ac8:	1880111e 	bne	r3,r2,805b10 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805acc:	00802034 	movhi	r2,128
  805ad0:	109c9d04 	addi	r2,r2,29300
  805ad4:	e0fffe17 	ldw	r3,-8(fp)
  805ad8:	18c00324 	muli	r3,r3,12
  805adc:	18c00204 	addi	r3,r3,8
  805ae0:	10c5883a 	add	r2,r2,r3
  805ae4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805ae8:	1000090e 	bge	r2,zero,805b10 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  805aec:	e0bffe17 	ldw	r2,-8(fp)
  805af0:	10c00324 	muli	r3,r2,12
  805af4:	00802034 	movhi	r2,128
  805af8:	109c9d04 	addi	r2,r2,29300
  805afc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805b00:	e0bfff17 	ldw	r2,-4(fp)
  805b04:	18800226 	beq	r3,r2,805b10 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  805b08:	00bffcc4 	movi	r2,-13
  805b0c:	00000a06 	br	805b38 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805b10:	e0bffe17 	ldw	r2,-8(fp)
  805b14:	10800044 	addi	r2,r2,1
  805b18:	e0bffe15 	stw	r2,-8(fp)
  805b1c:	00802034 	movhi	r2,128
  805b20:	109da104 	addi	r2,r2,30340
  805b24:	10800017 	ldw	r2,0(r2)
  805b28:	1007883a 	mov	r3,r2
  805b2c:	e0bffe17 	ldw	r2,-8(fp)
  805b30:	18bfdd2e 	bgeu	r3,r2,805aa8 <__alt_data_end+0xff805aa8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  805b34:	0005883a 	mov	r2,zero
}
  805b38:	e037883a 	mov	sp,fp
  805b3c:	df000017 	ldw	fp,0(sp)
  805b40:	dec00104 	addi	sp,sp,4
  805b44:	f800283a 	ret

00805b48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805b48:	defff604 	addi	sp,sp,-40
  805b4c:	dfc00915 	stw	ra,36(sp)
  805b50:	df000815 	stw	fp,32(sp)
  805b54:	df000804 	addi	fp,sp,32
  805b58:	e13ffd15 	stw	r4,-12(fp)
  805b5c:	e17ffe15 	stw	r5,-8(fp)
  805b60:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805b64:	00bfffc4 	movi	r2,-1
  805b68:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  805b6c:	00bffb44 	movi	r2,-19
  805b70:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  805b74:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805b78:	e13ffd17 	ldw	r4,-12(fp)
  805b7c:	01402034 	movhi	r5,128
  805b80:	295d9f04 	addi	r5,r5,30332
  805b84:	0805fe40 	call	805fe4 <alt_find_dev>
  805b88:	e0bff815 	stw	r2,-32(fp)
  805b8c:	e0bff817 	ldw	r2,-32(fp)
  805b90:	1000051e 	bne	r2,zero,805ba8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805b94:	e13ffd17 	ldw	r4,-12(fp)
  805b98:	08060740 	call	806074 <alt_find_file>
  805b9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  805ba0:	00800044 	movi	r2,1
  805ba4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805ba8:	e0bff817 	ldw	r2,-32(fp)
  805bac:	10002926 	beq	r2,zero,805c54 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805bb0:	e13ff817 	ldw	r4,-32(fp)
  805bb4:	08061880 	call	806188 <alt_get_fd>
  805bb8:	e0bff915 	stw	r2,-28(fp)
  805bbc:	e0bff917 	ldw	r2,-28(fp)
  805bc0:	1000030e 	bge	r2,zero,805bd0 <open+0x88>
    {
      status = index;
  805bc4:	e0bff917 	ldw	r2,-28(fp)
  805bc8:	e0bffa15 	stw	r2,-24(fp)
  805bcc:	00002306 	br	805c5c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  805bd0:	e0bff917 	ldw	r2,-28(fp)
  805bd4:	10c00324 	muli	r3,r2,12
  805bd8:	00802034 	movhi	r2,128
  805bdc:	109c9d04 	addi	r2,r2,29300
  805be0:	1885883a 	add	r2,r3,r2
  805be4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805be8:	e0fffe17 	ldw	r3,-8(fp)
  805bec:	00900034 	movhi	r2,16384
  805bf0:	10bfffc4 	addi	r2,r2,-1
  805bf4:	1886703a 	and	r3,r3,r2
  805bf8:	e0bffc17 	ldw	r2,-16(fp)
  805bfc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  805c00:	e0bffb17 	ldw	r2,-20(fp)
  805c04:	1000051e 	bne	r2,zero,805c1c <open+0xd4>
  805c08:	e13ffc17 	ldw	r4,-16(fp)
  805c0c:	0805a7c0 	call	805a7c <alt_file_locked>
  805c10:	e0bffa15 	stw	r2,-24(fp)
  805c14:	e0bffa17 	ldw	r2,-24(fp)
  805c18:	10001016 	blt	r2,zero,805c5c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805c1c:	e0bff817 	ldw	r2,-32(fp)
  805c20:	10800317 	ldw	r2,12(r2)
  805c24:	10000826 	beq	r2,zero,805c48 <open+0x100>
  805c28:	e0bff817 	ldw	r2,-32(fp)
  805c2c:	10800317 	ldw	r2,12(r2)
  805c30:	e13ffc17 	ldw	r4,-16(fp)
  805c34:	e17ffd17 	ldw	r5,-12(fp)
  805c38:	e1bffe17 	ldw	r6,-8(fp)
  805c3c:	e1ffff17 	ldw	r7,-4(fp)
  805c40:	103ee83a 	callr	r2
  805c44:	00000106 	br	805c4c <open+0x104>
  805c48:	0005883a 	mov	r2,zero
  805c4c:	e0bffa15 	stw	r2,-24(fp)
  805c50:	00000206 	br	805c5c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805c54:	00bffb44 	movi	r2,-19
  805c58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805c5c:	e0bffa17 	ldw	r2,-24(fp)
  805c60:	1000090e 	bge	r2,zero,805c88 <open+0x140>
  {
    alt_release_fd (index);  
  805c64:	e13ff917 	ldw	r4,-28(fp)
  805c68:	08036a80 	call	8036a8 <alt_release_fd>
    ALT_ERRNO = -status;
  805c6c:	0805a2c0 	call	805a2c <alt_get_errno>
  805c70:	1007883a 	mov	r3,r2
  805c74:	e0bffa17 	ldw	r2,-24(fp)
  805c78:	0085c83a 	sub	r2,zero,r2
  805c7c:	18800015 	stw	r2,0(r3)
    return -1;
  805c80:	00bfffc4 	movi	r2,-1
  805c84:	00000106 	br	805c8c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  805c88:	e0bff917 	ldw	r2,-28(fp)
}
  805c8c:	e037883a 	mov	sp,fp
  805c90:	dfc00117 	ldw	ra,4(sp)
  805c94:	df000017 	ldw	fp,0(sp)
  805c98:	dec00204 	addi	sp,sp,8
  805c9c:	f800283a 	ret

00805ca0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  805ca0:	defffa04 	addi	sp,sp,-24
  805ca4:	df000515 	stw	fp,20(sp)
  805ca8:	df000504 	addi	fp,sp,20
  805cac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805cb0:	0005303a 	rdctl	r2,status
  805cb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805cb8:	e0fffc17 	ldw	r3,-16(fp)
  805cbc:	00bfff84 	movi	r2,-2
  805cc0:	1884703a 	and	r2,r3,r2
  805cc4:	1001703a 	wrctl	status,r2
  
  return context;
  805cc8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805ccc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  805cd0:	e0bfff17 	ldw	r2,-4(fp)
  805cd4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805cd8:	e0bffd17 	ldw	r2,-12(fp)
  805cdc:	10800017 	ldw	r2,0(r2)
  805ce0:	e0fffd17 	ldw	r3,-12(fp)
  805ce4:	18c00117 	ldw	r3,4(r3)
  805ce8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  805cec:	e0bffd17 	ldw	r2,-12(fp)
  805cf0:	10800117 	ldw	r2,4(r2)
  805cf4:	e0fffd17 	ldw	r3,-12(fp)
  805cf8:	18c00017 	ldw	r3,0(r3)
  805cfc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  805d00:	e0bffd17 	ldw	r2,-12(fp)
  805d04:	e0fffd17 	ldw	r3,-12(fp)
  805d08:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  805d0c:	e0bffd17 	ldw	r2,-12(fp)
  805d10:	e0fffd17 	ldw	r3,-12(fp)
  805d14:	10c00015 	stw	r3,0(r2)
  805d18:	e0bffb17 	ldw	r2,-20(fp)
  805d1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d20:	e0bffe17 	ldw	r2,-8(fp)
  805d24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805d28:	e037883a 	mov	sp,fp
  805d2c:	df000017 	ldw	fp,0(sp)
  805d30:	dec00104 	addi	sp,sp,4
  805d34:	f800283a 	ret

00805d38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805d38:	defffb04 	addi	sp,sp,-20
  805d3c:	dfc00415 	stw	ra,16(sp)
  805d40:	df000315 	stw	fp,12(sp)
  805d44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805d48:	d0a00d17 	ldw	r2,-32716(gp)
  805d4c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805d50:	d0a33a17 	ldw	r2,-29464(gp)
  805d54:	10800044 	addi	r2,r2,1
  805d58:	d0a33a15 	stw	r2,-29464(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805d5c:	00002e06 	br	805e18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  805d60:	e0bffd17 	ldw	r2,-12(fp)
  805d64:	10800017 	ldw	r2,0(r2)
  805d68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805d6c:	e0bffd17 	ldw	r2,-12(fp)
  805d70:	10800403 	ldbu	r2,16(r2)
  805d74:	10803fcc 	andi	r2,r2,255
  805d78:	10000426 	beq	r2,zero,805d8c <alt_tick+0x54>
  805d7c:	d0a33a17 	ldw	r2,-29464(gp)
  805d80:	1000021e 	bne	r2,zero,805d8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  805d84:	e0bffd17 	ldw	r2,-12(fp)
  805d88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805d8c:	e0bffd17 	ldw	r2,-12(fp)
  805d90:	10800217 	ldw	r2,8(r2)
  805d94:	d0e33a17 	ldw	r3,-29464(gp)
  805d98:	18801d36 	bltu	r3,r2,805e10 <alt_tick+0xd8>
  805d9c:	e0bffd17 	ldw	r2,-12(fp)
  805da0:	10800403 	ldbu	r2,16(r2)
  805da4:	10803fcc 	andi	r2,r2,255
  805da8:	1000191e 	bne	r2,zero,805e10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  805dac:	e0bffd17 	ldw	r2,-12(fp)
  805db0:	10800317 	ldw	r2,12(r2)
  805db4:	e0fffd17 	ldw	r3,-12(fp)
  805db8:	18c00517 	ldw	r3,20(r3)
  805dbc:	1809883a 	mov	r4,r3
  805dc0:	103ee83a 	callr	r2
  805dc4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805dc8:	e0bfff17 	ldw	r2,-4(fp)
  805dcc:	1000031e 	bne	r2,zero,805ddc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  805dd0:	e13ffd17 	ldw	r4,-12(fp)
  805dd4:	0805ca00 	call	805ca0 <alt_alarm_stop>
  805dd8:	00000d06 	br	805e10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  805ddc:	e0bffd17 	ldw	r2,-12(fp)
  805de0:	10c00217 	ldw	r3,8(r2)
  805de4:	e0bfff17 	ldw	r2,-4(fp)
  805de8:	1887883a 	add	r3,r3,r2
  805dec:	e0bffd17 	ldw	r2,-12(fp)
  805df0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  805df4:	e0bffd17 	ldw	r2,-12(fp)
  805df8:	10c00217 	ldw	r3,8(r2)
  805dfc:	d0a33a17 	ldw	r2,-29464(gp)
  805e00:	1880032e 	bgeu	r3,r2,805e10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  805e04:	e0bffd17 	ldw	r2,-12(fp)
  805e08:	00c00044 	movi	r3,1
  805e0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  805e10:	e0bffe17 	ldw	r2,-8(fp)
  805e14:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805e18:	e0fffd17 	ldw	r3,-12(fp)
  805e1c:	d0a00d04 	addi	r2,gp,-32716
  805e20:	18bfcf1e 	bne	r3,r2,805d60 <__alt_data_end+0xff805d60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  805e24:	0001883a 	nop
}
  805e28:	e037883a 	mov	sp,fp
  805e2c:	dfc00117 	ldw	ra,4(sp)
  805e30:	df000017 	ldw	fp,0(sp)
  805e34:	dec00204 	addi	sp,sp,8
  805e38:	f800283a 	ret

00805e3c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  805e3c:	defffd04 	addi	sp,sp,-12
  805e40:	dfc00215 	stw	ra,8(sp)
  805e44:	df000115 	stw	fp,4(sp)
  805e48:	df000104 	addi	fp,sp,4
  805e4c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  805e50:	e13fff17 	ldw	r4,-4(fp)
  805e54:	0805e8c0 	call	805e8c <alt_busy_sleep>
}
  805e58:	e037883a 	mov	sp,fp
  805e5c:	dfc00117 	ldw	ra,4(sp)
  805e60:	df000017 	ldw	fp,0(sp)
  805e64:	dec00204 	addi	sp,sp,8
  805e68:	f800283a 	ret

00805e6c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  805e6c:	deffff04 	addi	sp,sp,-4
  805e70:	df000015 	stw	fp,0(sp)
  805e74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805e78:	000170fa 	wrctl	ienable,zero
}
  805e7c:	e037883a 	mov	sp,fp
  805e80:	df000017 	ldw	fp,0(sp)
  805e84:	dec00104 	addi	sp,sp,4
  805e88:	f800283a 	ret

00805e8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  805e8c:	defffa04 	addi	sp,sp,-24
  805e90:	dfc00515 	stw	ra,20(sp)
  805e94:	df000415 	stw	fp,16(sp)
  805e98:	df000404 	addi	fp,sp,16
  805e9c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  805ea0:	008000c4 	movi	r2,3
  805ea4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  805ea8:	e0fffd17 	ldw	r3,-12(fp)
  805eac:	008003f4 	movhi	r2,15
  805eb0:	10909004 	addi	r2,r2,16960
  805eb4:	1885383a 	mul	r2,r3,r2
  805eb8:	0100bef4 	movhi	r4,763
  805ebc:	213c2004 	addi	r4,r4,-3968
  805ec0:	100b883a 	mov	r5,r2
  805ec4:	0802f4c0 	call	802f4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  805ec8:	01200034 	movhi	r4,32768
  805ecc:	213fffc4 	addi	r4,r4,-1
  805ed0:	100b883a 	mov	r5,r2
  805ed4:	0802f4c0 	call	802f4c <__udivsi3>
  805ed8:	e13fff17 	ldw	r4,-4(fp)
  805edc:	100b883a 	mov	r5,r2
  805ee0:	0802f4c0 	call	802f4c <__udivsi3>
  805ee4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  805ee8:	e0bffe17 	ldw	r2,-8(fp)
  805eec:	10002a26 	beq	r2,zero,805f98 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  805ef0:	e03ffc15 	stw	zero,-16(fp)
  805ef4:	00001706 	br	805f54 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  805ef8:	00a00034 	movhi	r2,32768
  805efc:	10bfffc4 	addi	r2,r2,-1
  805f00:	10bfffc4 	addi	r2,r2,-1
  805f04:	103ffe1e 	bne	r2,zero,805f00 <__alt_data_end+0xff805f00>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  805f08:	e0fffd17 	ldw	r3,-12(fp)
  805f0c:	008003f4 	movhi	r2,15
  805f10:	10909004 	addi	r2,r2,16960
  805f14:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  805f18:	0100bef4 	movhi	r4,763
  805f1c:	213c2004 	addi	r4,r4,-3968
  805f20:	100b883a 	mov	r5,r2
  805f24:	0802f4c0 	call	802f4c <__udivsi3>
  805f28:	01200034 	movhi	r4,32768
  805f2c:	213fffc4 	addi	r4,r4,-1
  805f30:	100b883a 	mov	r5,r2
  805f34:	0802f4c0 	call	802f4c <__udivsi3>
  805f38:	1007883a 	mov	r3,r2
  805f3c:	e0bfff17 	ldw	r2,-4(fp)
  805f40:	10c5c83a 	sub	r2,r2,r3
  805f44:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  805f48:	e0bffc17 	ldw	r2,-16(fp)
  805f4c:	10800044 	addi	r2,r2,1
  805f50:	e0bffc15 	stw	r2,-16(fp)
  805f54:	e0fffc17 	ldw	r3,-16(fp)
  805f58:	e0bffe17 	ldw	r2,-8(fp)
  805f5c:	18bfe616 	blt	r3,r2,805ef8 <__alt_data_end+0xff805ef8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  805f60:	e0fffd17 	ldw	r3,-12(fp)
  805f64:	008003f4 	movhi	r2,15
  805f68:	10909004 	addi	r2,r2,16960
  805f6c:	1885383a 	mul	r2,r3,r2
  805f70:	0100bef4 	movhi	r4,763
  805f74:	213c2004 	addi	r4,r4,-3968
  805f78:	100b883a 	mov	r5,r2
  805f7c:	0802f4c0 	call	802f4c <__udivsi3>
  805f80:	1007883a 	mov	r3,r2
  805f84:	e0bfff17 	ldw	r2,-4(fp)
  805f88:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805f8c:	10bfffc4 	addi	r2,r2,-1
  805f90:	103ffe1e 	bne	r2,zero,805f8c <__alt_data_end+0xff805f8c>
  805f94:	00000d06 	br	805fcc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  805f98:	e0fffd17 	ldw	r3,-12(fp)
  805f9c:	008003f4 	movhi	r2,15
  805fa0:	10909004 	addi	r2,r2,16960
  805fa4:	1885383a 	mul	r2,r3,r2
  805fa8:	0100bef4 	movhi	r4,763
  805fac:	213c2004 	addi	r4,r4,-3968
  805fb0:	100b883a 	mov	r5,r2
  805fb4:	0802f4c0 	call	802f4c <__udivsi3>
  805fb8:	1007883a 	mov	r3,r2
  805fbc:	e0bfff17 	ldw	r2,-4(fp)
  805fc0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805fc4:	10bfffc4 	addi	r2,r2,-1
  805fc8:	00bffe16 	blt	zero,r2,805fc4 <__alt_data_end+0xff805fc4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  805fcc:	0005883a 	mov	r2,zero
}
  805fd0:	e037883a 	mov	sp,fp
  805fd4:	dfc00117 	ldw	ra,4(sp)
  805fd8:	df000017 	ldw	fp,0(sp)
  805fdc:	dec00204 	addi	sp,sp,8
  805fe0:	f800283a 	ret

00805fe4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  805fe4:	defffa04 	addi	sp,sp,-24
  805fe8:	dfc00515 	stw	ra,20(sp)
  805fec:	df000415 	stw	fp,16(sp)
  805ff0:	df000404 	addi	fp,sp,16
  805ff4:	e13ffe15 	stw	r4,-8(fp)
  805ff8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  805ffc:	e0bfff17 	ldw	r2,-4(fp)
  806000:	10800017 	ldw	r2,0(r2)
  806004:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  806008:	e13ffe17 	ldw	r4,-8(fp)
  80600c:	08003a40 	call	8003a4 <strlen>
  806010:	10800044 	addi	r2,r2,1
  806014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806018:	00000d06 	br	806050 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80601c:	e0bffc17 	ldw	r2,-16(fp)
  806020:	10c00217 	ldw	r3,8(r2)
  806024:	e0bffd17 	ldw	r2,-12(fp)
  806028:	1809883a 	mov	r4,r3
  80602c:	e17ffe17 	ldw	r5,-8(fp)
  806030:	100d883a 	mov	r6,r2
  806034:	08063b00 	call	8063b0 <memcmp>
  806038:	1000021e 	bne	r2,zero,806044 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80603c:	e0bffc17 	ldw	r2,-16(fp)
  806040:	00000706 	br	806060 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  806044:	e0bffc17 	ldw	r2,-16(fp)
  806048:	10800017 	ldw	r2,0(r2)
  80604c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806050:	e0fffc17 	ldw	r3,-16(fp)
  806054:	e0bfff17 	ldw	r2,-4(fp)
  806058:	18bff01e 	bne	r3,r2,80601c <__alt_data_end+0xff80601c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80605c:	0005883a 	mov	r2,zero
}
  806060:	e037883a 	mov	sp,fp
  806064:	dfc00117 	ldw	ra,4(sp)
  806068:	df000017 	ldw	fp,0(sp)
  80606c:	dec00204 	addi	sp,sp,8
  806070:	f800283a 	ret

00806074 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  806074:	defffb04 	addi	sp,sp,-20
  806078:	dfc00415 	stw	ra,16(sp)
  80607c:	df000315 	stw	fp,12(sp)
  806080:	df000304 	addi	fp,sp,12
  806084:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  806088:	00802034 	movhi	r2,128
  80608c:	109d9d04 	addi	r2,r2,30324
  806090:	10800017 	ldw	r2,0(r2)
  806094:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806098:	00003106 	br	806160 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  80609c:	e0bffd17 	ldw	r2,-12(fp)
  8060a0:	10800217 	ldw	r2,8(r2)
  8060a4:	1009883a 	mov	r4,r2
  8060a8:	08003a40 	call	8003a4 <strlen>
  8060ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8060b0:	e0bffd17 	ldw	r2,-12(fp)
  8060b4:	10c00217 	ldw	r3,8(r2)
  8060b8:	e0bffe17 	ldw	r2,-8(fp)
  8060bc:	10bfffc4 	addi	r2,r2,-1
  8060c0:	1885883a 	add	r2,r3,r2
  8060c4:	10800003 	ldbu	r2,0(r2)
  8060c8:	10803fcc 	andi	r2,r2,255
  8060cc:	1080201c 	xori	r2,r2,128
  8060d0:	10bfe004 	addi	r2,r2,-128
  8060d4:	10800bd8 	cmpnei	r2,r2,47
  8060d8:	1000031e 	bne	r2,zero,8060e8 <alt_find_file+0x74>
    {
      len -= 1;
  8060dc:	e0bffe17 	ldw	r2,-8(fp)
  8060e0:	10bfffc4 	addi	r2,r2,-1
  8060e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8060e8:	e0bffe17 	ldw	r2,-8(fp)
  8060ec:	e0ffff17 	ldw	r3,-4(fp)
  8060f0:	1885883a 	add	r2,r3,r2
  8060f4:	10800003 	ldbu	r2,0(r2)
  8060f8:	10803fcc 	andi	r2,r2,255
  8060fc:	1080201c 	xori	r2,r2,128
  806100:	10bfe004 	addi	r2,r2,-128
  806104:	10800be0 	cmpeqi	r2,r2,47
  806108:	1000081e 	bne	r2,zero,80612c <alt_find_file+0xb8>
  80610c:	e0bffe17 	ldw	r2,-8(fp)
  806110:	e0ffff17 	ldw	r3,-4(fp)
  806114:	1885883a 	add	r2,r3,r2
  806118:	10800003 	ldbu	r2,0(r2)
  80611c:	10803fcc 	andi	r2,r2,255
  806120:	1080201c 	xori	r2,r2,128
  806124:	10bfe004 	addi	r2,r2,-128
  806128:	10000a1e 	bne	r2,zero,806154 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  80612c:	e0bffd17 	ldw	r2,-12(fp)
  806130:	10c00217 	ldw	r3,8(r2)
  806134:	e0bffe17 	ldw	r2,-8(fp)
  806138:	1809883a 	mov	r4,r3
  80613c:	e17fff17 	ldw	r5,-4(fp)
  806140:	100d883a 	mov	r6,r2
  806144:	08063b00 	call	8063b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806148:	1000021e 	bne	r2,zero,806154 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80614c:	e0bffd17 	ldw	r2,-12(fp)
  806150:	00000806 	br	806174 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  806154:	e0bffd17 	ldw	r2,-12(fp)
  806158:	10800017 	ldw	r2,0(r2)
  80615c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806160:	e0fffd17 	ldw	r3,-12(fp)
  806164:	00802034 	movhi	r2,128
  806168:	109d9d04 	addi	r2,r2,30324
  80616c:	18bfcb1e 	bne	r3,r2,80609c <__alt_data_end+0xff80609c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  806170:	0005883a 	mov	r2,zero
}
  806174:	e037883a 	mov	sp,fp
  806178:	dfc00117 	ldw	ra,4(sp)
  80617c:	df000017 	ldw	fp,0(sp)
  806180:	dec00204 	addi	sp,sp,8
  806184:	f800283a 	ret

00806188 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  806188:	defffc04 	addi	sp,sp,-16
  80618c:	df000315 	stw	fp,12(sp)
  806190:	df000304 	addi	fp,sp,12
  806194:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  806198:	00bffa04 	movi	r2,-24
  80619c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8061a0:	e03ffd15 	stw	zero,-12(fp)
  8061a4:	00001d06 	br	80621c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  8061a8:	00802034 	movhi	r2,128
  8061ac:	109c9d04 	addi	r2,r2,29300
  8061b0:	e0fffd17 	ldw	r3,-12(fp)
  8061b4:	18c00324 	muli	r3,r3,12
  8061b8:	10c5883a 	add	r2,r2,r3
  8061bc:	10800017 	ldw	r2,0(r2)
  8061c0:	1000131e 	bne	r2,zero,806210 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  8061c4:	00802034 	movhi	r2,128
  8061c8:	109c9d04 	addi	r2,r2,29300
  8061cc:	e0fffd17 	ldw	r3,-12(fp)
  8061d0:	18c00324 	muli	r3,r3,12
  8061d4:	10c5883a 	add	r2,r2,r3
  8061d8:	e0ffff17 	ldw	r3,-4(fp)
  8061dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8061e0:	00802034 	movhi	r2,128
  8061e4:	109da104 	addi	r2,r2,30340
  8061e8:	10c00017 	ldw	r3,0(r2)
  8061ec:	e0bffd17 	ldw	r2,-12(fp)
  8061f0:	1880040e 	bge	r3,r2,806204 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8061f4:	00802034 	movhi	r2,128
  8061f8:	109da104 	addi	r2,r2,30340
  8061fc:	e0fffd17 	ldw	r3,-12(fp)
  806200:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  806204:	e0bffd17 	ldw	r2,-12(fp)
  806208:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80620c:	00000606 	br	806228 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806210:	e0bffd17 	ldw	r2,-12(fp)
  806214:	10800044 	addi	r2,r2,1
  806218:	e0bffd15 	stw	r2,-12(fp)
  80621c:	e0bffd17 	ldw	r2,-12(fp)
  806220:	10800810 	cmplti	r2,r2,32
  806224:	103fe01e 	bne	r2,zero,8061a8 <__alt_data_end+0xff8061a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  806228:	e0bffe17 	ldw	r2,-8(fp)
}
  80622c:	e037883a 	mov	sp,fp
  806230:	df000017 	ldw	fp,0(sp)
  806234:	dec00104 	addi	sp,sp,4
  806238:	f800283a 	ret

0080623c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80623c:	defffb04 	addi	sp,sp,-20
  806240:	df000415 	stw	fp,16(sp)
  806244:	df000404 	addi	fp,sp,16
  806248:	e13ffe15 	stw	r4,-8(fp)
  80624c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  806250:	e0bfff17 	ldw	r2,-4(fp)
  806254:	10840070 	cmpltui	r2,r2,4097
  806258:	1000021e 	bne	r2,zero,806264 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80625c:	00840004 	movi	r2,4096
  806260:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  806264:	e0fffe17 	ldw	r3,-8(fp)
  806268:	e0bfff17 	ldw	r2,-4(fp)
  80626c:	1885883a 	add	r2,r3,r2
  806270:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806274:	e0bffe17 	ldw	r2,-8(fp)
  806278:	e0bffc15 	stw	r2,-16(fp)
  80627c:	00000506 	br	806294 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  806280:	e0bffc17 	ldw	r2,-16(fp)
  806284:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806288:	e0bffc17 	ldw	r2,-16(fp)
  80628c:	10800804 	addi	r2,r2,32
  806290:	e0bffc15 	stw	r2,-16(fp)
  806294:	e0fffc17 	ldw	r3,-16(fp)
  806298:	e0bffd17 	ldw	r2,-12(fp)
  80629c:	18bff836 	bltu	r3,r2,806280 <__alt_data_end+0xff806280>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8062a0:	e0bffe17 	ldw	r2,-8(fp)
  8062a4:	108007cc 	andi	r2,r2,31
  8062a8:	10000226 	beq	r2,zero,8062b4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8062ac:	e0bffc17 	ldw	r2,-16(fp)
  8062b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8062b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8062b8:	e037883a 	mov	sp,fp
  8062bc:	df000017 	ldw	fp,0(sp)
  8062c0:	dec00104 	addi	sp,sp,4
  8062c4:	f800283a 	ret

008062c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8062c8:	defffe04 	addi	sp,sp,-8
  8062cc:	df000115 	stw	fp,4(sp)
  8062d0:	df000104 	addi	fp,sp,4
  8062d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8062d8:	e0bfff17 	ldw	r2,-4(fp)
  8062dc:	10bffe84 	addi	r2,r2,-6
  8062e0:	10c00428 	cmpgeui	r3,r2,16
  8062e4:	18001a1e 	bne	r3,zero,806350 <alt_exception_cause_generated_bad_addr+0x88>
  8062e8:	100690ba 	slli	r3,r2,2
  8062ec:	00802034 	movhi	r2,128
  8062f0:	1098c004 	addi	r2,r2,25344
  8062f4:	1885883a 	add	r2,r3,r2
  8062f8:	10800017 	ldw	r2,0(r2)
  8062fc:	1000683a 	jmp	r2
  806300:	00806340 	call	80634 <__reset-0x77f9cc>
  806304:	00806340 	call	80634 <__reset-0x77f9cc>
  806308:	00806350 	cmplti	r2,zero,397
  80630c:	00806350 	cmplti	r2,zero,397
  806310:	00806350 	cmplti	r2,zero,397
  806314:	00806340 	call	80634 <__reset-0x77f9cc>
  806318:	00806348 	cmpgei	r2,zero,397
  80631c:	00806350 	cmplti	r2,zero,397
  806320:	00806340 	call	80634 <__reset-0x77f9cc>
  806324:	00806340 	call	80634 <__reset-0x77f9cc>
  806328:	00806350 	cmplti	r2,zero,397
  80632c:	00806340 	call	80634 <__reset-0x77f9cc>
  806330:	00806348 	cmpgei	r2,zero,397
  806334:	00806350 	cmplti	r2,zero,397
  806338:	00806350 	cmplti	r2,zero,397
  80633c:	00806340 	call	80634 <__reset-0x77f9cc>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  806340:	00800044 	movi	r2,1
  806344:	00000306 	br	806354 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  806348:	0005883a 	mov	r2,zero
  80634c:	00000106 	br	806354 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  806350:	0005883a 	mov	r2,zero
  }
}
  806354:	e037883a 	mov	sp,fp
  806358:	df000017 	ldw	fp,0(sp)
  80635c:	dec00104 	addi	sp,sp,4
  806360:	f800283a 	ret

00806364 <atexit>:
  806364:	200b883a 	mov	r5,r4
  806368:	000d883a 	mov	r6,zero
  80636c:	0009883a 	mov	r4,zero
  806370:	000f883a 	mov	r7,zero
  806374:	080642c1 	jmpi	80642c <__register_exitproc>

00806378 <exit>:
  806378:	defffe04 	addi	sp,sp,-8
  80637c:	000b883a 	mov	r5,zero
  806380:	dc000015 	stw	r16,0(sp)
  806384:	dfc00115 	stw	ra,4(sp)
  806388:	2021883a 	mov	r16,r4
  80638c:	08065400 	call	806540 <__call_exitprocs>
  806390:	00802034 	movhi	r2,128
  806394:	109d9904 	addi	r2,r2,30308
  806398:	11000017 	ldw	r4,0(r2)
  80639c:	20800f17 	ldw	r2,60(r4)
  8063a0:	10000126 	beq	r2,zero,8063a8 <exit+0x30>
  8063a4:	103ee83a 	callr	r2
  8063a8:	8009883a 	mov	r4,r16
  8063ac:	08066d40 	call	8066d4 <_exit>

008063b0 <memcmp>:
  8063b0:	01c000c4 	movi	r7,3
  8063b4:	3980192e 	bgeu	r7,r6,80641c <memcmp+0x6c>
  8063b8:	2144b03a 	or	r2,r4,r5
  8063bc:	11c4703a 	and	r2,r2,r7
  8063c0:	10000f26 	beq	r2,zero,806400 <memcmp+0x50>
  8063c4:	20800003 	ldbu	r2,0(r4)
  8063c8:	28c00003 	ldbu	r3,0(r5)
  8063cc:	10c0151e 	bne	r2,r3,806424 <memcmp+0x74>
  8063d0:	31bfff84 	addi	r6,r6,-2
  8063d4:	01ffffc4 	movi	r7,-1
  8063d8:	00000406 	br	8063ec <memcmp+0x3c>
  8063dc:	20800003 	ldbu	r2,0(r4)
  8063e0:	28c00003 	ldbu	r3,0(r5)
  8063e4:	31bfffc4 	addi	r6,r6,-1
  8063e8:	10c00e1e 	bne	r2,r3,806424 <memcmp+0x74>
  8063ec:	21000044 	addi	r4,r4,1
  8063f0:	29400044 	addi	r5,r5,1
  8063f4:	31fff91e 	bne	r6,r7,8063dc <__alt_data_end+0xff8063dc>
  8063f8:	0005883a 	mov	r2,zero
  8063fc:	f800283a 	ret
  806400:	20c00017 	ldw	r3,0(r4)
  806404:	28800017 	ldw	r2,0(r5)
  806408:	1880041e 	bne	r3,r2,80641c <memcmp+0x6c>
  80640c:	31bfff04 	addi	r6,r6,-4
  806410:	21000104 	addi	r4,r4,4
  806414:	29400104 	addi	r5,r5,4
  806418:	39bff936 	bltu	r7,r6,806400 <__alt_data_end+0xff806400>
  80641c:	303fe91e 	bne	r6,zero,8063c4 <__alt_data_end+0xff8063c4>
  806420:	003ff506 	br	8063f8 <__alt_data_end+0xff8063f8>
  806424:	10c5c83a 	sub	r2,r2,r3
  806428:	f800283a 	ret

0080642c <__register_exitproc>:
  80642c:	00802034 	movhi	r2,128
  806430:	defffa04 	addi	sp,sp,-24
  806434:	109d9904 	addi	r2,r2,30308
  806438:	dc000315 	stw	r16,12(sp)
  80643c:	14000017 	ldw	r16,0(r2)
  806440:	dc400415 	stw	r17,16(sp)
  806444:	dfc00515 	stw	ra,20(sp)
  806448:	80805217 	ldw	r2,328(r16)
  80644c:	2023883a 	mov	r17,r4
  806450:	10003626 	beq	r2,zero,80652c <__register_exitproc+0x100>
  806454:	10c00117 	ldw	r3,4(r2)
  806458:	010007c4 	movi	r4,31
  80645c:	20c00e16 	blt	r4,r3,806498 <__register_exitproc+0x6c>
  806460:	1a400044 	addi	r9,r3,1
  806464:	8800211e 	bne	r17,zero,8064ec <__register_exitproc+0xc0>
  806468:	18c00084 	addi	r3,r3,2
  80646c:	18c7883a 	add	r3,r3,r3
  806470:	18c7883a 	add	r3,r3,r3
  806474:	12400115 	stw	r9,4(r2)
  806478:	10c7883a 	add	r3,r2,r3
  80647c:	19400015 	stw	r5,0(r3)
  806480:	0005883a 	mov	r2,zero
  806484:	dfc00517 	ldw	ra,20(sp)
  806488:	dc400417 	ldw	r17,16(sp)
  80648c:	dc000317 	ldw	r16,12(sp)
  806490:	dec00604 	addi	sp,sp,24
  806494:	f800283a 	ret
  806498:	00800034 	movhi	r2,0
  80649c:	10800004 	addi	r2,r2,0
  8064a0:	10002526 	beq	r2,zero,806538 <__register_exitproc+0x10c>
  8064a4:	01006404 	movi	r4,400
  8064a8:	d9400015 	stw	r5,0(sp)
  8064ac:	d9800115 	stw	r6,4(sp)
  8064b0:	d9c00215 	stw	r7,8(sp)
  8064b4:	00000000 	call	0 <__reset-0x800000>
  8064b8:	d9400017 	ldw	r5,0(sp)
  8064bc:	d9800117 	ldw	r6,4(sp)
  8064c0:	d9c00217 	ldw	r7,8(sp)
  8064c4:	10001c26 	beq	r2,zero,806538 <__register_exitproc+0x10c>
  8064c8:	80c05217 	ldw	r3,328(r16)
  8064cc:	10000115 	stw	zero,4(r2)
  8064d0:	02400044 	movi	r9,1
  8064d4:	10c00015 	stw	r3,0(r2)
  8064d8:	80805215 	stw	r2,328(r16)
  8064dc:	10006215 	stw	zero,392(r2)
  8064e0:	10006315 	stw	zero,396(r2)
  8064e4:	0007883a 	mov	r3,zero
  8064e8:	883fdf26 	beq	r17,zero,806468 <__alt_data_end+0xff806468>
  8064ec:	18d1883a 	add	r8,r3,r3
  8064f0:	4211883a 	add	r8,r8,r8
  8064f4:	1211883a 	add	r8,r2,r8
  8064f8:	41802215 	stw	r6,136(r8)
  8064fc:	01000044 	movi	r4,1
  806500:	11806217 	ldw	r6,392(r2)
  806504:	20c8983a 	sll	r4,r4,r3
  806508:	310cb03a 	or	r6,r6,r4
  80650c:	11806215 	stw	r6,392(r2)
  806510:	41c04215 	stw	r7,264(r8)
  806514:	01800084 	movi	r6,2
  806518:	89bfd31e 	bne	r17,r6,806468 <__alt_data_end+0xff806468>
  80651c:	11806317 	ldw	r6,396(r2)
  806520:	3108b03a 	or	r4,r6,r4
  806524:	11006315 	stw	r4,396(r2)
  806528:	003fcf06 	br	806468 <__alt_data_end+0xff806468>
  80652c:	80805304 	addi	r2,r16,332
  806530:	80805215 	stw	r2,328(r16)
  806534:	003fc706 	br	806454 <__alt_data_end+0xff806454>
  806538:	00bfffc4 	movi	r2,-1
  80653c:	003fd106 	br	806484 <__alt_data_end+0xff806484>

00806540 <__call_exitprocs>:
  806540:	00802034 	movhi	r2,128
  806544:	109d9904 	addi	r2,r2,30308
  806548:	10800017 	ldw	r2,0(r2)
  80654c:	defff404 	addi	sp,sp,-48
  806550:	dd800815 	stw	r22,32(sp)
  806554:	d8800015 	stw	r2,0(sp)
  806558:	10805204 	addi	r2,r2,328
  80655c:	dd000615 	stw	r20,24(sp)
  806560:	dc800415 	stw	r18,16(sp)
  806564:	dfc00b15 	stw	ra,44(sp)
  806568:	df000a15 	stw	fp,40(sp)
  80656c:	ddc00915 	stw	r23,36(sp)
  806570:	dd400715 	stw	r21,28(sp)
  806574:	dcc00515 	stw	r19,20(sp)
  806578:	dc400315 	stw	r17,12(sp)
  80657c:	dc000215 	stw	r16,8(sp)
  806580:	2025883a 	mov	r18,r4
  806584:	2829883a 	mov	r20,r5
  806588:	d8800115 	stw	r2,4(sp)
  80658c:	05bfffc4 	movi	r22,-1
  806590:	d8800017 	ldw	r2,0(sp)
  806594:	14c05217 	ldw	r19,328(r2)
  806598:	98001d26 	beq	r19,zero,806610 <__call_exitprocs+0xd0>
  80659c:	dd400117 	ldw	r21,4(sp)
  8065a0:	98800117 	ldw	r2,4(r19)
  8065a4:	173fffc4 	addi	fp,r2,-1
  8065a8:	e0000d16 	blt	fp,zero,8065e0 <__call_exitprocs+0xa0>
  8065ac:	14000044 	addi	r16,r2,1
  8065b0:	8421883a 	add	r16,r16,r16
  8065b4:	8421883a 	add	r16,r16,r16
  8065b8:	84402004 	addi	r17,r16,128
  8065bc:	9c63883a 	add	r17,r19,r17
  8065c0:	9c21883a 	add	r16,r19,r16
  8065c4:	a0001e26 	beq	r20,zero,806640 <__call_exitprocs+0x100>
  8065c8:	80804017 	ldw	r2,256(r16)
  8065cc:	15001c26 	beq	r2,r20,806640 <__call_exitprocs+0x100>
  8065d0:	e73fffc4 	addi	fp,fp,-1
  8065d4:	843fff04 	addi	r16,r16,-4
  8065d8:	8c7fff04 	addi	r17,r17,-4
  8065dc:	e5bff91e 	bne	fp,r22,8065c4 <__alt_data_end+0xff8065c4>
  8065e0:	00800034 	movhi	r2,0
  8065e4:	10800004 	addi	r2,r2,0
  8065e8:	10000926 	beq	r2,zero,806610 <__call_exitprocs+0xd0>
  8065ec:	98800117 	ldw	r2,4(r19)
  8065f0:	1000311e 	bne	r2,zero,8066b8 <__call_exitprocs+0x178>
  8065f4:	98800017 	ldw	r2,0(r19)
  8065f8:	10003426 	beq	r2,zero,8066cc <__call_exitprocs+0x18c>
  8065fc:	9809883a 	mov	r4,r19
  806600:	a8800015 	stw	r2,0(r21)
  806604:	00000000 	call	0 <__reset-0x800000>
  806608:	acc00017 	ldw	r19,0(r21)
  80660c:	983fe41e 	bne	r19,zero,8065a0 <__alt_data_end+0xff8065a0>
  806610:	dfc00b17 	ldw	ra,44(sp)
  806614:	df000a17 	ldw	fp,40(sp)
  806618:	ddc00917 	ldw	r23,36(sp)
  80661c:	dd800817 	ldw	r22,32(sp)
  806620:	dd400717 	ldw	r21,28(sp)
  806624:	dd000617 	ldw	r20,24(sp)
  806628:	dcc00517 	ldw	r19,20(sp)
  80662c:	dc800417 	ldw	r18,16(sp)
  806630:	dc400317 	ldw	r17,12(sp)
  806634:	dc000217 	ldw	r16,8(sp)
  806638:	dec00c04 	addi	sp,sp,48
  80663c:	f800283a 	ret
  806640:	98800117 	ldw	r2,4(r19)
  806644:	80c00017 	ldw	r3,0(r16)
  806648:	10bfffc4 	addi	r2,r2,-1
  80664c:	17001526 	beq	r2,fp,8066a4 <__call_exitprocs+0x164>
  806650:	80000015 	stw	zero,0(r16)
  806654:	183fde26 	beq	r3,zero,8065d0 <__alt_data_end+0xff8065d0>
  806658:	00800044 	movi	r2,1
  80665c:	1708983a 	sll	r4,r2,fp
  806660:	98806217 	ldw	r2,392(r19)
  806664:	9dc00117 	ldw	r23,4(r19)
  806668:	2084703a 	and	r2,r4,r2
  80666c:	1000061e 	bne	r2,zero,806688 <__call_exitprocs+0x148>
  806670:	183ee83a 	callr	r3
  806674:	98800117 	ldw	r2,4(r19)
  806678:	15ffc51e 	bne	r2,r23,806590 <__alt_data_end+0xff806590>
  80667c:	a8800017 	ldw	r2,0(r21)
  806680:	14ffd326 	beq	r2,r19,8065d0 <__alt_data_end+0xff8065d0>
  806684:	003fc206 	br	806590 <__alt_data_end+0xff806590>
  806688:	98806317 	ldw	r2,396(r19)
  80668c:	2084703a 	and	r2,r4,r2
  806690:	1000061e 	bne	r2,zero,8066ac <__call_exitprocs+0x16c>
  806694:	89400017 	ldw	r5,0(r17)
  806698:	9009883a 	mov	r4,r18
  80669c:	183ee83a 	callr	r3
  8066a0:	003ff406 	br	806674 <__alt_data_end+0xff806674>
  8066a4:	9f000115 	stw	fp,4(r19)
  8066a8:	003fea06 	br	806654 <__alt_data_end+0xff806654>
  8066ac:	89000017 	ldw	r4,0(r17)
  8066b0:	183ee83a 	callr	r3
  8066b4:	003fef06 	br	806674 <__alt_data_end+0xff806674>
  8066b8:	98800017 	ldw	r2,0(r19)
  8066bc:	982b883a 	mov	r21,r19
  8066c0:	1027883a 	mov	r19,r2
  8066c4:	983fb61e 	bne	r19,zero,8065a0 <__alt_data_end+0xff8065a0>
  8066c8:	003fd106 	br	806610 <__alt_data_end+0xff806610>
  8066cc:	0005883a 	mov	r2,zero
  8066d0:	003ffa06 	br	8066bc <__alt_data_end+0xff8066bc>

008066d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8066d4:	defffd04 	addi	sp,sp,-12
  8066d8:	df000215 	stw	fp,8(sp)
  8066dc:	df000204 	addi	fp,sp,8
  8066e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8066e4:	0001883a 	nop
  8066e8:	e0bfff17 	ldw	r2,-4(fp)
  8066ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8066f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8066f4:	10000226 	beq	r2,zero,806700 <_exit+0x2c>
    ALT_SIM_FAIL();
  8066f8:	002af070 	cmpltui	zero,zero,43969
  8066fc:	00000106 	br	806704 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  806700:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806704:	003fff06 	br	806704 <__alt_data_end+0xff806704>
